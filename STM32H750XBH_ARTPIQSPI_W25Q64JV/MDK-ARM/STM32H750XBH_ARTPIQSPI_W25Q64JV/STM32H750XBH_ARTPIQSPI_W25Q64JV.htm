<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32H750XBH_ARTPIQSPI_W25Q64JV\STM32H750XBH_ARTPIQSPI_W25Q64JV.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32H750XBH_ARTPIQSPI_W25Q64JV\STM32H750XBH_ARTPIQSPI_W25Q64JV.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 30 22:20:31 2023
<BR><P>
<H3>Maximum Stack Usage =         80 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">QSPI_DMAAbortCplt</a> from stm32h7xx_hal_qspi.o(.text) referenced 2 times from stm32h7xx_hal_qspi.o(.text)
 <LI><a href="#[3]">QSPI_DMAError</a> from stm32h7xx_hal_qspi.o(.text) referenced 2 times from stm32h7xx_hal_qspi.o(.text)
 <LI><a href="#[4]">QSPI_DMARxCplt</a> from stm32h7xx_hal_qspi.o(.text) referenced from stm32h7xx_hal_qspi.o(.text)
 <LI><a href="#[2]">QSPI_DMATxCplt</a> from stm32h7xx_hal_qspi.o(.text) referenced from stm32h7xx_hal_qspi.o(.text)
 <LI><a href="#[16]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[f]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text) referenced 2 times from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[10]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[13]">UART_DMARxAbortCallback</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[11]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[15]">UART_DMARxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[d]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[12]">UART_DMATxAbortCallback</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[e]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[14]">UART_DMATxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[a]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text) referenced 2 times from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[b]">UART_RxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[9]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text) referenced 2 times from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[c]">UART_RxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[7]">UART_TxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[5]">UART_TxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[8]">UART_TxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[6]">UART_TxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text) referenced from stm32h7xx_hal_uart.o(.text)
 <LI><a href="#[18]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[17]">fputc</a> from loader_src.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fc]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fd]"></a>__asm___6_main_c_4557ba80____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.rev16_text), UNUSED)

<P><STRONG><a name="[fe]"></a>__asm___9_quadspi_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, quadspi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[ff]"></a>__asm___14_stm32h7xx_it_c_bb8ca80c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.rev16_text), UNUSED)

<P><STRONG><a name="[100]"></a>__asm___19_stm32h7xx_hal_msp_c_d46e2bee____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.rev16_text), UNUSED)

<P><STRONG><a name="[101]"></a>__asm___12_Loader_Src_c_2a3ab6ca____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loader_src.o(.rev16_text), UNUSED)

<P><STRONG><a name="[102]"></a>__asm___8_w25qxx_c_e0ff6147____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25qxx.o(.rev16_text), UNUSED)

<P><STRONG><a name="[103]"></a>__asm___7_usart_c_100358e7____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.rev16_text), UNUSED)

<P><STRONG><a name="[104]"></a>__asm___11_w25q64jvx_c_f2ae3461____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25q64jvx.o(.rev16_text), UNUSED)

<P><STRONG><a name="[105]"></a>__asm___22_stm32h7xx_hal_cortex_c_2992dbc0____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.rev16_text), UNUSED)

<P><STRONG><a name="[106]"></a>__asm___20_stm32h7xx_hal_qspi_c_9f327679____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[107]"></a>__asm___19_stm32h7xx_hal_rcc_c_b7071a4b____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[108]"></a>__asm___22_stm32h7xx_hal_rcc_ex_c_bed13b44____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.rev16_text), UNUSED)

<P><STRONG><a name="[109]"></a>__asm___20_stm32h7xx_hal_gpio_c_ea787061____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10a]"></a>__asm___15_stm32h7xx_hal_c_3da258af____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10b]"></a>__asm___19_stm32h7xx_hal_pwr_c_f2cfe8be____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10c]"></a>__asm___22_stm32h7xx_hal_pwr_ex_c_75a25fd4____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10d]"></a>__asm___20_stm32h7xx_hal_uart_c_574fddf5____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10e]"></a>__asm___23_stm32h7xx_hal_uart_ex_c_83a37df4____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.rev16_text), UNUSED)

<P><STRONG><a name="[10f]"></a>__asm___19_stm32h7xx_hal_dma_c_c25f65ec____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.rev16_text), UNUSED)

<P><STRONG><a name="[110]"></a>__asm___20_stm32h7xx_hal_mdma_c_49e2804d____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.rev16_text), UNUSED)

<P><STRONG><a name="[111]"></a>__asm___18_system_stm32h7xx_c_5d646a67____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32h7xx.o(.rev16_text), UNUSED)

<P><STRONG><a name="[112]"></a>__asm___6_main_c_4557ba80____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.revsh_text), UNUSED)

<P><STRONG><a name="[113]"></a>__asm___9_quadspi_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, quadspi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[114]"></a>__asm___14_stm32h7xx_it_c_bb8ca80c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.revsh_text), UNUSED)

<P><STRONG><a name="[115]"></a>__asm___19_stm32h7xx_hal_msp_c_d46e2bee____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.revsh_text), UNUSED)

<P><STRONG><a name="[116]"></a>__asm___12_Loader_Src_c_2a3ab6ca____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loader_src.o(.revsh_text), UNUSED)

<P><STRONG><a name="[117]"></a>__asm___8_w25qxx_c_e0ff6147____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25qxx.o(.revsh_text), UNUSED)

<P><STRONG><a name="[118]"></a>__asm___7_usart_c_100358e7____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.revsh_text), UNUSED)

<P><STRONG><a name="[119]"></a>__asm___11_w25q64jvx_c_f2ae3461____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25q64jvx.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11a]"></a>__asm___22_stm32h7xx_hal_cortex_c_2992dbc0____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11b]"></a>__asm___20_stm32h7xx_hal_qspi_c_9f327679____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11c]"></a>__asm___19_stm32h7xx_hal_rcc_c_b7071a4b____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11d]"></a>__asm___22_stm32h7xx_hal_rcc_ex_c_bed13b44____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11e]"></a>__asm___20_stm32h7xx_hal_gpio_c_ea787061____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.revsh_text), UNUSED)

<P><STRONG><a name="[11f]"></a>__asm___15_stm32h7xx_hal_c_3da258af____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.revsh_text), UNUSED)

<P><STRONG><a name="[120]"></a>__asm___19_stm32h7xx_hal_pwr_c_f2cfe8be____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.revsh_text), UNUSED)

<P><STRONG><a name="[121]"></a>__asm___22_stm32h7xx_hal_pwr_ex_c_75a25fd4____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.revsh_text), UNUSED)

<P><STRONG><a name="[122]"></a>__asm___20_stm32h7xx_hal_uart_c_574fddf5____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.revsh_text), UNUSED)

<P><STRONG><a name="[123]"></a>__asm___23_stm32h7xx_hal_uart_ex_c_83a37df4____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.revsh_text), UNUSED)

<P><STRONG><a name="[124]"></a>__asm___19_stm32h7xx_hal_dma_c_c25f65ec____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.revsh_text), UNUSED)

<P><STRONG><a name="[125]"></a>__asm___20_stm32h7xx_hal_mdma_c_49e2804d____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.revsh_text), UNUSED)

<P><STRONG><a name="[126]"></a>__asm___18_system_stm32h7xx_c_5d646a67____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32h7xx.o(.revsh_text), UNUSED)

<P><STRONG><a name="[127]"></a>__asm___6_main_c_4557ba80____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.rrx_text), UNUSED)

<P><STRONG><a name="[128]"></a>__asm___9_quadspi_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, quadspi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[129]"></a>__asm___14_stm32h7xx_it_c_bb8ca80c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12a]"></a>__asm___19_stm32h7xx_hal_msp_c_d46e2bee____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12b]"></a>__asm___12_Loader_Src_c_2a3ab6ca____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loader_src.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12c]"></a>__asm___8_w25qxx_c_e0ff6147____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w25qxx.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12d]"></a>__asm___7_usart_c_100358e7____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12e]"></a>__asm___11_w25q64jvx_c_f2ae3461____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w25q64jvx.o(.rrx_text), UNUSED)

<P><STRONG><a name="[12f]"></a>__asm___22_stm32h7xx_hal_cortex_c_2992dbc0____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.rrx_text), UNUSED)

<P><STRONG><a name="[130]"></a>__asm___20_stm32h7xx_hal_qspi_c_9f327679____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[131]"></a>__asm___19_stm32h7xx_hal_rcc_c_b7071a4b____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[132]"></a>__asm___22_stm32h7xx_hal_rcc_ex_c_bed13b44____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.rrx_text), UNUSED)

<P><STRONG><a name="[133]"></a>__asm___20_stm32h7xx_hal_gpio_c_ea787061____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.rrx_text), UNUSED)

<P><STRONG><a name="[134]"></a>__asm___15_stm32h7xx_hal_c_3da258af____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.rrx_text), UNUSED)

<P><STRONG><a name="[135]"></a>__asm___19_stm32h7xx_hal_pwr_c_f2cfe8be____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.rrx_text), UNUSED)

<P><STRONG><a name="[136]"></a>__asm___22_stm32h7xx_hal_pwr_ex_c_75a25fd4____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.rrx_text), UNUSED)

<P><STRONG><a name="[137]"></a>__asm___20_stm32h7xx_hal_uart_c_574fddf5____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.rrx_text), UNUSED)

<P><STRONG><a name="[138]"></a>__asm___23_stm32h7xx_hal_uart_ex_c_83a37df4____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.rrx_text), UNUSED)

<P><STRONG><a name="[139]"></a>__asm___19_stm32h7xx_hal_dma_c_c25f65ec____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.rrx_text), UNUSED)

<P><STRONG><a name="[13a]"></a>__asm___20_stm32h7xx_hal_mdma_c_49e2804d____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.rrx_text), UNUSED)

<P><STRONG><a name="[13b]"></a>__asm___18_system_stm32h7xx_c_5d646a67____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_stm32h7xx.o(.rrx_text), UNUSED)

<P><STRONG><a name="[21]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d]"></a>SystemClock_Config</STRONG> (Thumb, 230 bytes, Stack size 312 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[13c]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>

<P><STRONG><a name="[9c]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[26]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 236 bytes, Stack size 232 bytes, stm32h7xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[28]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[2a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32h7xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[2b]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[7d]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
</UL>

<P><STRONG><a name="[2d]"></a>HAL_GetTick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, loader_src.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSWaitSynchronization
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command_IT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_PollForTransfer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUSBReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableBkUpReg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableBkUpReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
</UL>

<P><STRONG><a name="[2c]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2e]"></a>Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ExitQPIMode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[39]"></a>Read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Memory_Mapped_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[3b]"></a>Write</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3e]"></a>SectorErase</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3f]"></a>MassErase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loader_src.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[144]"></a>Verify</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, loader_src.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loader_src.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, loader_src.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>Checksum</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, loader_src.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[42]"></a>W25QXX_WriteEnable</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block64K_Erase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block32K_Erase
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ChipErase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageProgram
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
</UL>

<P><STRONG><a name="[44]"></a>W25QXX_WriteSR</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
</UL>

<P><STRONG><a name="[46]"></a>W25QXX_ReadSR</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
</UL>

<P><STRONG><a name="[37]"></a>W25QXX_EnterQPIMode</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteSR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[48]"></a>W25QXX_WaitBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block64K_Erase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block32K_Erase
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ChipErase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageProgram
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Reset
</UL>

<P><STRONG><a name="[36]"></a>W25QXX_Reset</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[35]"></a>W25QXX_ExitQPIMode</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[49]"></a>W25QXX_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ExitQPIMode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[4a]"></a>W25QXX_MftrDeviceID</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[4b]"></a>W25QXX_UniqueID</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[4c]"></a>W25QXX_Read</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[4d]"></a>W25QXX_PageProgram</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[3d]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[3c]"></a>W25QXX_SectorErase</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[4e]"></a>W25QXX_Write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
</UL>

<P><STRONG><a name="[4f]"></a>W25QXX_ChipErase</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>

<P><STRONG><a name="[50]"></a>W25QXX_Block32K_Erase</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>

<P><STRONG><a name="[51]"></a>W25QXX_Block64K_Erase</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WaitBusy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
</UL>

<P><STRONG><a name="[3a]"></a>W25Q_Memory_Mapped_Enable</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[32]"></a>MX_UART4_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[56]"></a>QSPI_W25Q64JV_DeviceID</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[57]"></a>QSPI_W25Q64JV_WriteEnable</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseChip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseBlock_32Kx2
</UL>

<P><STRONG><a name="[58]"></a>QSPI_W25Q64JV_Reset</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[59]"></a>QSPI_W25Q64JV_IDNumber</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5a]"></a>QSPI_W25Q64JV_Read</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5b]"></a>QSPI_W25Q64JV_EraseBlock_32Kx2</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5c]"></a>QSPI_W25Q64JV_EraseChip</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5d]"></a>QSPI_W25Q64JV_PageProgram</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Write
</UL>

<P><STRONG><a name="[5e]"></a>QSPI_W25Q64JV_Write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
</UL>

<P><STRONG><a name="[5f]"></a>QSPI_W25Q64JV_EnableMemoryMappedMode</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[9b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[60]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>

<P><STRONG><a name="[147]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>

<P><STRONG><a name="[14a]"></a>HAL_MPU_Disable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>HAL_MPU_Enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>

<P><STRONG><a name="[14d]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[153]"></a>HAL_GetCurrentCPUID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[41]"></a>HAL_QSPI_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[33]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[72]"></a>HAL_QSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>HAL_QSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[70]"></a>HAL_QSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>HAL_QSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort_IT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>HAL_QSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_QSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>HAL_QSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>HAL_QSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>HAL_QSPI_IRQHandler</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_FifoThresholdCallback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TxCpltCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_RxCpltCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_CmdCpltCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_StatusMatchCallback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TimeOutCallback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
</UL>

<P><STRONG><a name="[43]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseChip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseBlock_32Kx2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_IDNumber
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Reset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_DeviceID
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block64K_Erase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Block32K_Erase
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ChipErase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_UniqueID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_MftrDeviceID
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteSR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteEnable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorErase
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ExitQPIMode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
</UL>

<P><STRONG><a name="[74]"></a>HAL_QSPI_Command_IT</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[45]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageProgram
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteSR
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_EnterQPIMode
</UL>

<P><STRONG><a name="[47]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_IDNumber
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_DeviceID
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_UniqueID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_MftrDeviceID
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>

<P><STRONG><a name="[154]"></a>HAL_QSPI_Transmit_IT</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>HAL_QSPI_Receive_IT</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>HAL_QSPI_Abort_IT</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32h7xx_hal_qspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_QSPI_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAError
</UL>

<P><STRONG><a name="[76]"></a>HAL_QSPI_Transmit_DMA</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>

<P><STRONG><a name="[78]"></a>HAL_QSPI_Receive_DMA</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>

<P><STRONG><a name="[55]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
</UL>

<P><STRONG><a name="[79]"></a>HAL_QSPI_AutoPolling_IT</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[52]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EnableMemoryMappedMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Memory_Mapped_Enable
</UL>

<P><STRONG><a name="[156]"></a>HAL_QSPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>HAL_QSPI_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>HAL_QSPI_Abort</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[158]"></a>HAL_QSPI_SetFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>HAL_QSPI_GetFifoThreshold</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>HAL_QSPI_SetFlashID</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[20]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2144 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 554 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[22]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 814 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1PCLK1Freq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[83]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[23]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3448 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 644 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[8d]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2172 bytes, Stack size 64 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[8e]"></a>HAL_RCCEx_GetD1PCLK1Freq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RCCEx_EnableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>HAL_RCCEx_DisableLSECSS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>HAL_RCCEx_EnableLSECSS_IT</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>HAL_RCCEx_WakeUpStopCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>HAL_RCCEx_KerWakeUpStopCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>HAL_RCCEx_WWDGxSysResetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>HAL_RCCEx_CRSConfig</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCCEx_CRSSoftwareSynchronizationGenerate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>HAL_RCCEx_CRSGetSynchronizationInfo</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>HAL_RCCEx_CRSWaitSynchronization</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCCEx_CRS_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCCEx_CRS_ExpectedSyncCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCCEx_CRS_SyncWarnCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCCEx_CRS_SyncOkCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_RCCEx_CRS_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_SyncOkCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_SyncWarnCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_ExpectedSyncCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_ErrorCallback
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCCEx_LSECSS_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCCEx_LSECSS_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_Callback
</UL>

<P><STRONG><a name="[27]"></a>HAL_GPIO_Init</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>

<P><STRONG><a name="[29]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 328 bytes, Stack size 20 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>

<P><STRONG><a name="[167]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[30]"></a>HAL_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DeInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[25]"></a>HAL_IncTick</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_GetTickPrio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>HAL_SetTickFreq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GetTickFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[16c]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[16f]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>HAL_GetUIDw0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>HAL_GetUIDw1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>HAL_GetUIDw2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>HAL_SYSCFG_VREFBUF_VoltageScalingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>HAL_SYSCFG_VREFBUF_HighImpedanceConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>HAL_SYSCFG_VREFBUF_TrimmingConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>HAL_SYSCFG_EnableVREFBUF</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[176]"></a>HAL_SYSCFG_DisableVREFBUF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>HAL_SYSCFG_AnalogSwitchConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>HAL_SYSCFG_EnableBOOST</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>HAL_SYSCFG_DisableBOOST</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>HAL_SYSCFG_CM7BootAddConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>HAL_SYSCFG_EnableIOSpeedOptimize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>HAL_SYSCFG_DisableIOSpeedOptimize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>HAL_SYSCFG_CompensationCodeSelect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>HAL_SYSCFG_CompensationCodeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>HAL_SetFMCMemorySwappingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>HAL_GetFMCMemorySwappingConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>HAL_EXTI_EdgeConfig</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>HAL_EXTI_GenerateSWInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>HAL_EXTI_D1_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>HAL_EXTI_D1_EventInputConfig</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>HAL_EXTI_D3_EventInputConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>HAL_PWR_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>HAL_PWR_DisableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>HAL_PWR_EnableWakeUpPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>HAL_PWR_DisableWakeUpPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>HAL_PWR_EnterSTANDBYMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>HAL_PWR_EnableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>HAL_PWR_DisableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>HAL_PWR_EnableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>HAL_PWR_DisableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_AVD_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_PWR_PVD_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[1f]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19e]"></a>HAL_PWREx_GetSupplyConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[19f]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>HAL_PWREx_ControlStopModeVoltageScaling</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>HAL_PWREx_GetStopModeVoltageRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>HAL_PWREx_EnterSTOPMode</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>HAL_PWREx_ClearPendingEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>HAL_PWREx_EnterSTANDBYMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>HAL_PWREx_ConfigD3Domain</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>HAL_PWREx_EnableFlashPowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>HAL_PWREx_DisableFlashPowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>HAL_PWREx_EnableWakeUpPin</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>HAL_PWREx_DisableWakeUpPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>HAL_PWREx_GetWakeupFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>HAL_PWREx_ClearWakeupFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>HAL_PWREx_WKUP6_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_PWREx_WKUP5_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_PWREx_WKUP4_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_PWREx_WKUP3_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_PWREx_WKUP2_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_PWREx_WKUP1_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WAKEUP_PIN_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_PWREx_WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP1_Callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP2_Callback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP3_Callback
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP4_Callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP5_Callback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_WKUP6_Callback
</UL>

<P><STRONG><a name="[ac]"></a>HAL_PWREx_EnableBkUpReg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[ad]"></a>HAL_PWREx_DisableBkUpReg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[ae]"></a>HAL_PWREx_EnableUSBReg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[af]"></a>HAL_PWREx_DisableUSBReg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>HAL_PWREx_DisableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>HAL_PWREx_EnableBatteryCharging</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>HAL_PWREx_DisableBatteryCharging</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>HAL_PWREx_EnableMonitoring</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>HAL_PWREx_DisableMonitoring</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>HAL_PWREx_GetTemperatureLevel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>HAL_PWREx_GetVBATLevel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>HAL_PWREx_ConfigAVD</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>HAL_PWREx_EnableAVD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>HAL_PWREx_DisableAVD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>HAL_PWREx_AVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_AVD_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_PWREx_PVD_AVD_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_AVDCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[b2]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b3]"></a>UART_CheckIdleState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessorEx_AddressLength_Set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_DisableMuteMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_EnableMuteMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[b6]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[b4]"></a>UART_SetConfig</STRONG> (Thumb, 1414 bytes, Stack size 72 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[53]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b8]"></a>HAL_LIN_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b9]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[31]"></a>HAL_UART_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[40]"></a>HAL_UART_Transmit</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_Receive</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[bb]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
</UL>

<P><STRONG><a name="[bf]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>

<P><STRONG><a name="[c2]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[c4]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[c6]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[c7]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[c8]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_Abort</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[ce]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxAbortCallback
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxAbortCallback
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_Abort_IT</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[d2]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 992 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_UART_ReceiverTimeout_Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>HAL_UART_EnableReceiverTimeout</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>HAL_UART_DisableReceiverTimeout</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>HAL_MultiProcessor_EnableMuteMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[dc]"></a>HAL_MultiProcessor_DisableMuteMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>HAL_UART_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>HAL_UART_GetError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>HAL_RS485Ex_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[d8]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_MultiProcessorEx_AddressLength_Set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[df]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_Wakeup_AddressConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UARTEx_ReceiveToIdle</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[e6]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>

<P><STRONG><a name="[e7]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DMA_Init</STRONG> (Thumb, 1308 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 656 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>

<P><STRONG><a name="[ee]"></a>HAL_DMA_Start</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 994 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[ca]"></a>HAL_DMA_Abort</STRONG> (Thumb, 1236 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 918 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 1494 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 2800 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[f1]"></a>HAL_MDMA_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_Init
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_MDMA_DeInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>HAL_MDMA_ConfigPostRequestMask</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>HAL_MDMA_RegisterCallback</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>HAL_MDMA_UnRegisterCallback</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>HAL_MDMA_LinkedList_CreateNode</STRONG> (Thumb, 266 bytes, Stack size 12 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>HAL_MDMA_LinkedList_AddNode</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>HAL_MDMA_LinkedList_RemoveNode</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>HAL_MDMA_LinkedList_EnableCircularMode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>HAL_MDMA_LinkedList_DisableCircularMode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>HAL_MDMA_Start</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_SetConfig
</UL>

<P><STRONG><a name="[77]"></a>HAL_MDMA_Start_IT</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive_DMA
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit_DMA
</UL>

<P><STRONG><a name="[7b]"></a>HAL_MDMA_Abort</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_PollForTransfer
</UL>

<P><STRONG><a name="[71]"></a>HAL_MDMA_Abort_IT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort_IT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_MDMA_PollForTransfer</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_MDMA_GenerateSWRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>HAL_MDMA_IRQHandler</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>HAL_MDMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>HAL_MDMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[1d7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 522 bytes, Stack size 20 bytes, system_stm32h7xx.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d9]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassErase
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[1a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1da]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__printf</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, __printf_flags.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EnableMemoryMappedMode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseChip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseBlock_32Kx2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_IDNumber
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Reset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_WriteEnable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_DeviceID
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_AutoPollingMemReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[fa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[fb]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[54]"></a>QSPI_W25Q64JV_AutoPollingMemReady</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, w25q64jvx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_PageProgram
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseChip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_EraseBlock_32Kx2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Read
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_W25Q64JV_Reset
</UL>

<P><STRONG><a name="[62]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[61]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriorityGrouping
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[67]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command_IT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[1]"></a>QSPI_DMAAbortCplt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32h7xx_hal_qspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QSPI_DMAAbortCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>QSPI_Config</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command_IT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[3]"></a>QSPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h7xx_hal_qspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_DMAError &rArr; HAL_QSPI_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>QSPI_DMATxCplt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>QSPI_DMARxCplt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[88]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[8]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxISR_16BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>UART_EndRxTransfer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[c0]"></a>UART_EndTxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[f]"></a>UART_DMAError</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>UART_DMARxAbortCallback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>UART_DMATxAbortCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>UARTEx_Wakeup_AddressConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[e2]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[ec]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[eb]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ea]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e9]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ef]"></a>DMA_SetConfig</STRONG> (Thumb, 628 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[f2]"></a>MDMA_Init</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
</UL>

<P><STRONG><a name="[f4]"></a>MDMA_SetConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32h7xx_hal_mdma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start
</UL>

<P><STRONG><a name="[18]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
