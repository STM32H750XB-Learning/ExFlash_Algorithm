
stm32h750xb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .info         000000c8  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .prog         00002754  24000004  24000004  00002004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  24002758  24002758  00004758  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  24002768  24002768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  2400276c  2400276c  0000476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  24002770  24002770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2400277c  2400277c  0000477c  2**2
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0000477c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000dc6f  00000000  00000000  000047aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000022d6  00000000  00000000  00012419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000880  00000000  00000000  000146ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00035efb  00000000  00000000  00014f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000dd0d  00000000  00000000  0004ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    001537b0  00000000  00000000  00058b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      00000043  00000000  00000000  001ac327  2**0
                  CONTENTS, READONLY
 15 .debug_loclists 00002d6c  00000000  00000000  001ac36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077e  00000000  00000000  001af0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001474  00000000  00000000  001af854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .prog:

24000004 <__do_global_dtors_aux>:
24000004:	b510      	push	{r4, lr}
24000006:	4c05      	ldr	r4, [pc, #20]	@ (2400001c <__do_global_dtors_aux+0x18>)
24000008:	7823      	ldrb	r3, [r4, #0]
2400000a:	b933      	cbnz	r3, 2400001a <__do_global_dtors_aux+0x16>
2400000c:	4b04      	ldr	r3, [pc, #16]	@ (24000020 <__do_global_dtors_aux+0x1c>)
2400000e:	b113      	cbz	r3, 24000016 <__do_global_dtors_aux+0x12>
24000010:	4804      	ldr	r0, [pc, #16]	@ (24000024 <__do_global_dtors_aux+0x20>)
24000012:	f3af 8000 	nop.w
24000016:	2301      	movs	r3, #1
24000018:	7023      	strb	r3, [r4, #0]
2400001a:	bd10      	pop	{r4, pc}
2400001c:	2400277c 	.word	0x2400277c
24000020:	00000000 	.word	0x00000000
24000024:	24002740 	.word	0x24002740

24000028 <frame_dummy>:
24000028:	b508      	push	{r3, lr}
2400002a:	4b03      	ldr	r3, [pc, #12]	@ (24000038 <frame_dummy+0x10>)
2400002c:	b11b      	cbz	r3, 24000036 <frame_dummy+0xe>
2400002e:	4903      	ldr	r1, [pc, #12]	@ (2400003c <frame_dummy+0x14>)
24000030:	4803      	ldr	r0, [pc, #12]	@ (24000040 <frame_dummy+0x18>)
24000032:	f3af 8000 	nop.w
24000036:	bd08      	pop	{r3, pc}
24000038:	00000000 	.word	0x00000000
2400003c:	24002780 	.word	0x24002780
24000040:	24002740 	.word	0x24002740

24000044 <Init>:
  * @param  None
  * @retval  1      : Operation succeeded
  * @retval  0      : Operation failed
  */
int Init(void)
{
24000044:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24000046:	b672      	cpsid	i
    __disable_irq();
    SystemInit();

    hqspi.Instance = QUADSPI;
24000048:	4c0d      	ldr	r4, [pc, #52]	@ (24000080 <Init+0x3c>)
    SystemInit();
2400004a:	f000 fc1b 	bl	24000884 <SystemInit>
    hqspi.Instance = QUADSPI;
2400004e:	4b0d      	ldr	r3, [pc, #52]	@ (24000084 <Init+0x40>)
    HAL_QSPI_DeInit(&hqspi);
24000050:	4620      	mov	r0, r4
    hqspi.Instance = QUADSPI;
24000052:	6023      	str	r3, [r4, #0]
    HAL_QSPI_DeInit(&hqspi);
24000054:	f000 ffdc 	bl	24001010 <HAL_QSPI_DeInit>
    HAL_DeInit();
24000058:	f000 fc76 	bl	24000948 <HAL_DeInit>

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
2400005c:	f000 fcb6 	bl	240009cc <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
24000060:	f000 fa7a 	bl	24000558 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
24000064:	f000 f9fa 	bl	2400045c <MX_GPIO_Init>
	HAL_QSPI_DeInit(&hqspi);
24000068:	4620      	mov	r0, r4
2400006a:	f000 ffd1 	bl	24001010 <HAL_QSPI_DeInit>
    MX_QUADSPI_Init();
2400006e:	f000 faf7 	bl	24000660 <MX_QUADSPI_Init>
	
    w25qxx_init();
24000072:	f000 f957 	bl	24000324 <w25qxx_init>

    w25qxx_memorymapped();
24000076:	f000 f8b1 	bl	240001dc <w25qxx_memorymapped>

    return 1;
}
2400007a:	2001      	movs	r0, #1
2400007c:	bd10      	pop	{r4, pc}
2400007e:	bf00      	nop
24000080:	24002798 	.word	0x24002798
24000084:	52005000 	.word	0x52005000

24000088 <Write>:
	* @param   buffer : pointer to data buffer
	* @retval  1      : Operation succeeded
	* @retval  0      : Operation failed
	*/
int Write(uint32_t Address, uint32_t Size, uint8_t *Buffer)
{
24000088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400008a:	4604      	mov	r4, r0
2400008c:	460d      	mov	r5, r1
    HAL_QSPI_DeInit(&hqspi);
2400008e:	4813      	ldr	r0, [pc, #76]	@ (240000dc <Write+0x54>)
{
24000090:	4617      	mov	r7, r2
    MX_QUADSPI_Init();
    w25qxx_init();

	uint32_t end_addr, current_size, current_addr;

	Address -= QSPI_FLASH_MEM_ADDR;
24000092:	f104 46e0 	add.w	r6, r4, #1879048192	@ 0x70000000

	current_size = QSPI_PAGE_SIZE - (Address % QSPI_PAGE_SIZE);
24000096:	f3c4 0408 	ubfx	r4, r4, #0, #9
    HAL_QSPI_DeInit(&hqspi);
2400009a:	f000 ffb9 	bl	24001010 <HAL_QSPI_DeInit>
	current_size = QSPI_PAGE_SIZE - (Address % QSPI_PAGE_SIZE);
2400009e:	f5c4 7400 	rsb	r4, r4, #512	@ 0x200
    MX_QUADSPI_Init();
240000a2:	f000 fadd 	bl	24000660 <MX_QUADSPI_Init>
    w25qxx_init();
240000a6:	f000 f93d 	bl	24000324 <w25qxx_init>

	if (current_size > Size)
240000aa:	42ac      	cmp	r4, r5
240000ac:	bf28      	it	cs
240000ae:	462c      	movcs	r4, r5
	{
		current_size = Size;
	}

    current_addr = Address;
    end_addr = Address + Size;
240000b0:	4435      	add	r5, r6

    do{
		w25qxx_write(current_addr, Buffer, current_size);
240000b2:	4630      	mov	r0, r6

		/* 更新地址 */
		current_addr += current_size;
240000b4:	4426      	add	r6, r4
		w25qxx_write(current_addr, Buffer, current_size);
240000b6:	4622      	mov	r2, r4
240000b8:	4639      	mov	r1, r7
240000ba:	f000 f9b1 	bl	24000420 <w25qxx_write>
		Buffer += current_size;
		current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
240000be:	f506 7300 	add.w	r3, r6, #512	@ 0x200
		Buffer += current_size;
240000c2:	4427      	add	r7, r4
		current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
240000c4:	42ab      	cmp	r3, r5
240000c6:	bf8c      	ite	hi
240000c8:	1bac      	subhi	r4, r5, r6
240000ca:	f44f 7400 	movls.w	r4, #512	@ 0x200
    }while(current_addr < end_addr);
240000ce:	42b5      	cmp	r5, r6
240000d0:	d8ef      	bhi.n	240000b2 <Write+0x2a>

    w25qxx_memorymapped();
240000d2:	f000 f883 	bl	240001dc <w25qxx_memorymapped>

    return 1;
}
240000d6:	2001      	movs	r0, #1
240000d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240000da:	bf00      	nop
240000dc:	24002798 	.word	0x24002798

240000e0 <SectorErase>:
	* @param   EraseStartAddress :  erase start address
	* @param   EraseEndAddress   :  erase end address
	* @retval  None
	*/
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
240000e0:	b538      	push	{r3, r4, r5, lr}
240000e2:	4604      	mov	r4, r0
240000e4:	460d      	mov	r5, r1
    HAL_QSPI_DeInit(&hqspi);
240000e6:	480d      	ldr	r0, [pc, #52]	@ (2400011c <SectorErase+0x3c>)
    MX_QUADSPI_Init();
    w25qxx_init();

    uint32_t BlockAddr;
    EraseStartAddress -= QSPI_FLASH_MEM_ADDR;
240000e8:	f104 44e0 	add.w	r4, r4, #1879048192	@ 0x70000000
    EraseEndAddress -= QSPI_FLASH_MEM_ADDR;
240000ec:	f105 45e0 	add.w	r5, r5, #1879048192	@ 0x70000000
    HAL_QSPI_DeInit(&hqspi);
240000f0:	f000 ff8e 	bl	24001010 <HAL_QSPI_DeInit>
    EraseStartAddress = EraseStartAddress -  EraseStartAddress % QSPI_BLOCK_SIZE;
240000f4:	0c64      	lsrs	r4, r4, #17
    MX_QUADSPI_Init();
240000f6:	f000 fab3 	bl	24000660 <MX_QUADSPI_Init>
    EraseStartAddress = EraseStartAddress -  EraseStartAddress % QSPI_BLOCK_SIZE;
240000fa:	0464      	lsls	r4, r4, #17
    w25qxx_init();
240000fc:	f000 f912 	bl	24000324 <w25qxx_init>

    while (EraseEndAddress >= EraseStartAddress)
24000100:	42ac      	cmp	r4, r5
24000102:	d903      	bls.n	2400010c <SectorErase+0x2c>
        BlockAddr = EraseStartAddress & 0x07FFFFFF;		// not exceed 64MB
        w25qxx_128k_block_erase(BlockAddr);
        EraseStartAddress += QSPI_BLOCK_SIZE;
    }

    w25qxx_memorymapped();
24000104:	f000 f86a 	bl	240001dc <w25qxx_memorymapped>
    return 1;
}
24000108:	2001      	movs	r0, #1
2400010a:	bd38      	pop	{r3, r4, r5, pc}
        w25qxx_128k_block_erase(BlockAddr);
2400010c:	f024 4078 	bic.w	r0, r4, #4160749568	@ 0xf8000000
        EraseStartAddress += QSPI_BLOCK_SIZE;
24000110:	f504 3400 	add.w	r4, r4, #131072	@ 0x20000
        w25qxx_128k_block_erase(BlockAddr);
24000114:	f000 f914 	bl	24000340 <w25qxx_128k_block_erase>
        EraseStartAddress += QSPI_BLOCK_SIZE;
24000118:	e7f2      	b.n	24000100 <SectorErase+0x20>
2400011a:	bf00      	nop
2400011c:	24002798 	.word	0x24002798

24000120 <MassErase>:
	* @param   Parallelism : 0
	* @retval  1           : Operation succeeded
	* @retval  0           : Operation failed
	*/
int MassErase(uint32_t Parallelism)
{
24000120:	b508      	push	{r3, lr}
    HAL_QSPI_DeInit(&hqspi);
24000122:	4806      	ldr	r0, [pc, #24]	@ (2400013c <MassErase+0x1c>)
24000124:	f000 ff74 	bl	24001010 <HAL_QSPI_DeInit>
    MX_QUADSPI_Init();
24000128:	f000 fa9a 	bl	24000660 <MX_QUADSPI_Init>
    w25qxx_init();
2400012c:	f000 f8fa 	bl	24000324 <w25qxx_init>

    w25qxx_chip_erase();
24000130:	f000 f92a 	bl	24000388 <w25qxx_chip_erase>

    w25qxx_memorymapped();
24000134:	f000 f852 	bl	240001dc <w25qxx_memorymapped>
    return 1;
}
24000138:	2001      	movs	r0, #1
2400013a:	bd08      	pop	{r3, pc}
2400013c:	24002798 	.word	0x24002798

24000140 <w25qxx_set_address_mode>:
#include <stdio.h>

//static w25qxx_interface_t w25qxx_mode = W25QXX_INTERFACE_QPI;

int w25qxx_set_address_mode(w25qxx_address_mode_t address_mode)
{
24000140:	b510      	push	{r4, lr}
24000142:	b08e      	sub	sp, #56	@ 0x38
24000144:	4604      	mov	r4, r0
    QSPI_CommandTypeDef cmd = {0};
24000146:	2234      	movs	r2, #52	@ 0x34
24000148:	2100      	movs	r1, #0
2400014a:	a801      	add	r0, sp, #4
2400014c:	f002 faf0 	bl	24002730 <memset>

    if (address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
        cmd.Instruction = W25QXX_CMD_ENTER_4_BYTES_ADDRESS_MODE;
24000150:	2c01      	cmp	r4, #1
    else
        cmd.Instruction = W25QXX_CMD_EXIT_4_BYTES_ADDRESS_MODE;
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;

    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000152:	f242 7210 	movw	r2, #10000	@ 0x2710
24000156:	4669      	mov	r1, sp
        cmd.Instruction = W25QXX_CMD_ENTER_4_BYTES_ADDRESS_MODE;
24000158:	bf14      	ite	ne
2400015a:	23e9      	movne	r3, #233	@ 0xe9
2400015c:	23b7      	moveq	r3, #183	@ 0xb7
    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
2400015e:	4806      	ldr	r0, [pc, #24]	@ (24000178 <w25qxx_set_address_mode+0x38>)
24000160:	9300      	str	r3, [sp, #0]
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000162:	f44f 7380 	mov.w	r3, #256	@ 0x100
24000166:	9306      	str	r3, [sp, #24]
    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000168:	f000 ff63 	bl	24001032 <HAL_QSPI_Command>
2400016c:	3800      	subs	r0, #0
2400016e:	bf18      	it	ne
24000170:	2001      	movne	r0, #1
    {
        return QSPI_OK;
    }

    return QSPI_ERROR;
}
24000172:	4240      	negs	r0, r0
24000174:	b00e      	add	sp, #56	@ 0x38
24000176:	bd10      	pop	{r4, pc}
24000178:	24002798 	.word	0x24002798

2400017c <w25qxx_autopolling_ready>:

int w25qxx_autopolling_ready(void)
{
2400017c:	b500      	push	{lr}
2400017e:	b095      	sub	sp, #84	@ 0x54
    QSPI_CommandTypeDef cmd = {0};
24000180:	2234      	movs	r2, #52	@ 0x34
24000182:	2100      	movs	r1, #0
24000184:	a807      	add	r0, sp, #28
24000186:	f002 fad3 	bl	24002730 <memset>
    QSPI_AutoPollingTypeDef config = {0};
2400018a:	2214      	movs	r2, #20
2400018c:	2100      	movs	r1, #0
2400018e:	4668      	mov	r0, sp
24000190:	f002 face 	bl	24002730 <memset>

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000194:	f44f 7380 	mov.w	r3, #256	@ 0x100

    config.Mask = 0x0101;
    config.Match = 0x0000;
    config.MatchMode = QSPI_MATCH_MODE_AND;
    config.StatusBytesSize = 2;
    config.Interval = 10;
24000198:	f04f 0e02 	mov.w	lr, #2
    config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &config, QSPI_TIMEOUT) != HAL_OK)
2400019c:	466a      	mov	r2, sp
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400019e:	930c      	str	r3, [sp, #48]	@ 0x30
    cmd.Instruction = W25QXX_CMD_READ_STATUS_REG1;
240001a0:	2305      	movs	r3, #5
    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &config, QSPI_TIMEOUT) != HAL_OK)
240001a2:	a906      	add	r1, sp, #24
240001a4:	480c      	ldr	r0, [pc, #48]	@ (240001d8 <w25qxx_autopolling_ready+0x5c>)
    cmd.Instruction = W25QXX_CMD_READ_STATUS_REG1;
240001a6:	9306      	str	r3, [sp, #24]
    cmd.DataMode = QSPI_DATA_1_LINE;
240001a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
240001ac:	930f      	str	r3, [sp, #60]	@ 0x3c
    config.Mask = 0x0101;
240001ae:	f240 1301 	movw	r3, #257	@ 0x101
240001b2:	9301      	str	r3, [sp, #4]
    config.Interval = 10;
240001b4:	230a      	movs	r3, #10
240001b6:	e9cd 3e02 	strd	r3, lr, [sp, #8]
    config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
240001ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
240001be:	9305      	str	r3, [sp, #20]
    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &config, QSPI_TIMEOUT) != HAL_OK)
240001c0:	f242 7310 	movw	r3, #10000	@ 0x2710
240001c4:	f000 ffd6 	bl	24001174 <HAL_QSPI_AutoPolling>
240001c8:	b108      	cbz	r0, 240001ce <w25qxx_autopolling_ready+0x52>
    {
        Error_Handler();
240001ca:	f000 fa47 	bl	2400065c <Error_Handler>
    }

    return QSPI_OK;
}
240001ce:	2000      	movs	r0, #0
240001d0:	b015      	add	sp, #84	@ 0x54
240001d2:	f85d fb04 	ldr.w	pc, [sp], #4
240001d6:	bf00      	nop
240001d8:	24002798 	.word	0x24002798

240001dc <w25qxx_memorymapped>:

    return QSPI_OK;
}

int w25qxx_memorymapped(void)
{
240001dc:	b510      	push	{r4, lr}
240001de:	b090      	sub	sp, #64	@ 0x40
    QSPI_CommandTypeDef cmd = {0};
    QSPI_MemoryMappedTypeDef config = {0};
240001e0:	2400      	movs	r4, #0
    QSPI_CommandTypeDef cmd = {0};
240001e2:	2238      	movs	r2, #56	@ 0x38
240001e4:	2100      	movs	r1, #0
240001e6:	a802      	add	r0, sp, #8
240001e8:	f002 faa2 	bl	24002730 <memset>
    QSPI_MemoryMappedTypeDef config = {0};
240001ec:	e9cd 4400 	strd	r4, r4, [sp]

    w25qxx_autopolling_ready();
240001f0:	f7ff ffc4 	bl	2400017c <w25qxx_autopolling_ready>

    cmd.Instruction = W25QXX_CMD_FAST_READ_QUAD_IO;
240001f4:	23eb      	movs	r3, #235	@ 0xeb
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;

    cmd.AddressMode = QSPI_ADDRESS_4_LINES;
240001f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
    cmd.DataMode =  QSPI_DATA_4_LINES;

    config.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
    config.TimeOutPeriod = 0;

    if (HAL_QSPI_MemoryMapped(&hqspi, &cmd, &config) != HAL_OK)
240001fa:	466a      	mov	r2, sp
    cmd.Instruction = W25QXX_CMD_FAST_READ_QUAD_IO;
240001fc:	9302      	str	r3, [sp, #8]
    cmd.AddressMode = QSPI_ADDRESS_4_LINES;
240001fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
    if (HAL_QSPI_MemoryMapped(&hqspi, &cmd, &config) != HAL_OK)
24000202:	480e      	ldr	r0, [pc, #56]	@ (2400023c <w25qxx_memorymapped+0x60>)
    cmd.Address = 0x00;
24000204:	9403      	str	r4, [sp, #12]
    cmd.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
24000206:	9406      	str	r4, [sp, #24]
    cmd.AddressMode = QSPI_ADDRESS_4_LINES;
24000208:	e9cd 1308 	strd	r1, r3, [sp, #32]
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;
2400020c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
    if (HAL_QSPI_MemoryMapped(&hqspi, &cmd, &config) != HAL_OK)
24000210:	a902      	add	r1, sp, #8
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;
24000212:	9305      	str	r3, [sp, #20]
    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
24000214:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
24000218:	930a      	str	r3, [sp, #40]	@ 0x28
    cmd.AlternateBytes = 0xFF;
2400021a:	23ff      	movs	r3, #255	@ 0xff
2400021c:	9304      	str	r3, [sp, #16]
    cmd.DummyCycles = 4;
2400021e:	2304      	movs	r3, #4
24000220:	9307      	str	r3, [sp, #28]
    cmd.DataMode =  QSPI_DATA_4_LINES;
24000222:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    config.TimeOutPeriod = 0;
24000226:	e9cd 4400 	strd	r4, r4, [sp]
    cmd.DataMode =  QSPI_DATA_4_LINES;
2400022a:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_QSPI_MemoryMapped(&hqspi, &cmd, &config) != HAL_OK)
2400022c:	f000 fff3 	bl	24001216 <HAL_QSPI_MemoryMapped>
24000230:	b108      	cbz	r0, 24000236 <w25qxx_memorymapped+0x5a>
    {
        Error_Handler();
24000232:	f000 fa13 	bl	2400065c <Error_Handler>
    }

    return QSPI_OK;
}
24000236:	2000      	movs	r0, #0
24000238:	b010      	add	sp, #64	@ 0x40
2400023a:	bd10      	pop	{r4, pc}
2400023c:	24002798 	.word	0x24002798

24000240 <w25qxx_write_enable>:

int w25qxx_write_enable(void)
{
24000240:	b500      	push	{lr}
24000242:	b08f      	sub	sp, #60	@ 0x3c
    QSPI_CommandTypeDef cmd = {0};
24000244:	2234      	movs	r2, #52	@ 0x34
24000246:	2100      	movs	r1, #0
24000248:	a801      	add	r0, sp, #4
2400024a:	f002 fa71 	bl	24002730 <memset>

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400024e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    cmd.Instruction = W25QXX_CMD_WRITE_ENABLE;

    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000252:	f242 7210 	movw	r2, #10000	@ 0x2710
24000256:	4669      	mov	r1, sp
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000258:	9306      	str	r3, [sp, #24]
    cmd.Instruction = W25QXX_CMD_WRITE_ENABLE;
2400025a:	2306      	movs	r3, #6
    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
2400025c:	4804      	ldr	r0, [pc, #16]	@ (24000270 <w25qxx_write_enable+0x30>)
    cmd.Instruction = W25QXX_CMD_WRITE_ENABLE;
2400025e:	9300      	str	r3, [sp, #0]
    if (HAL_OK == HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000260:	f000 fee7 	bl	24001032 <HAL_QSPI_Command>
    else return HAL_ERROR;

    w25qxx_autopolling_ready();

    return QSPI_OK;
}
24000264:	3800      	subs	r0, #0
24000266:	bf18      	it	ne
24000268:	2001      	movne	r0, #1
2400026a:	b00f      	add	sp, #60	@ 0x3c
2400026c:	f85d fb04 	ldr.w	pc, [sp], #4
24000270:	24002798 	.word	0x24002798

24000274 <w25qxx_reset>:

int w25qxx_reset(void)
{
24000274:	b500      	push	{lr}
24000276:	b08f      	sub	sp, #60	@ 0x3c
    QSPI_CommandTypeDef cmd = {0};
24000278:	2238      	movs	r2, #56	@ 0x38
2400027a:	2100      	movs	r1, #0
2400027c:	4668      	mov	r0, sp
2400027e:	f002 fa57 	bl	24002730 <memset>

    w25qxx_autopolling_ready();
24000282:	f7ff ff7b 	bl	2400017c <w25qxx_autopolling_ready>

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000286:	f44f 7380 	mov.w	r3, #256	@ 0x100
    cmd.Instruction = W25QXX_CMD_ENABLE_RESET;

    if (HAL_OK != HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
2400028a:	f242 7210 	movw	r2, #10000	@ 0x2710
2400028e:	4669      	mov	r1, sp
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000290:	9306      	str	r3, [sp, #24]
    cmd.Instruction = W25QXX_CMD_ENABLE_RESET;
24000292:	2366      	movs	r3, #102	@ 0x66
    if (HAL_OK != HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000294:	480b      	ldr	r0, [pc, #44]	@ (240002c4 <w25qxx_reset+0x50>)
    cmd.Instruction = W25QXX_CMD_ENABLE_RESET;
24000296:	9300      	str	r3, [sp, #0]
    if (HAL_OK != HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
24000298:	f000 fecb 	bl	24001032 <HAL_QSPI_Command>
2400029c:	b970      	cbnz	r0, 240002bc <w25qxx_reset+0x48>
    {
        return QSPI_ERROR;
    }

    cmd.Instruction = W25QXX_CMD_RESET_DEVICE;
2400029e:	2399      	movs	r3, #153	@ 0x99
    if (HAL_OK != HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
240002a0:	f242 7210 	movw	r2, #10000	@ 0x2710
240002a4:	4669      	mov	r1, sp
240002a6:	4807      	ldr	r0, [pc, #28]	@ (240002c4 <w25qxx_reset+0x50>)
    cmd.Instruction = W25QXX_CMD_RESET_DEVICE;
240002a8:	9300      	str	r3, [sp, #0]
    if (HAL_OK != HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT))
240002aa:	f000 fec2 	bl	24001032 <HAL_QSPI_Command>
240002ae:	3800      	subs	r0, #0
240002b0:	bf18      	it	ne
240002b2:	2001      	movne	r0, #1
240002b4:	4240      	negs	r0, r0
    {
        return QSPI_ERROR;
    }

    return QSPI_OK;
}
240002b6:	b00f      	add	sp, #60	@ 0x3c
240002b8:	f85d fb04 	ldr.w	pc, [sp], #4
        return QSPI_ERROR;
240002bc:	f04f 30ff 	mov.w	r0, #4294967295
240002c0:	e7f9      	b.n	240002b6 <w25qxx_reset+0x42>
240002c2:	bf00      	nop
240002c4:	24002798 	.word	0x24002798

240002c8 <w25qxx_write_status_reg>:

    return QSPI_OK;
}

int w25qxx_write_status_reg(uint8_t reg, uint16_t status)
{
240002c8:	b510      	push	{r4, lr}
    QSPI_CommandTypeDef cmd = {0};

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;

    switch (reg)
240002ca:	2802      	cmp	r0, #2
{
240002cc:	b090      	sub	sp, #64	@ 0x40
240002ce:	f8ad 1006 	strh.w	r1, [sp, #6]
    switch (reg)
240002d2:	d023      	beq.n	2400031c <w25qxx_write_status_reg+0x54>
240002d4:	2803      	cmp	r0, #3
240002d6:	bf0c      	ite	eq
240002d8:	2411      	moveq	r4, #17
240002da:	2401      	movne	r4, #1
    QSPI_CommandTypeDef cmd = {0};
240002dc:	2234      	movs	r2, #52	@ 0x34
240002de:	2100      	movs	r1, #0
240002e0:	a803      	add	r0, sp, #12
240002e2:	f002 fa25 	bl	24002730 <memset>
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240002e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        cmd.Instruction = W25QXX_CMD_WRITE_STATUS_REG1;
        break;
    }

    cmd.DataMode = QSPI_DATA_1_LINE;
    cmd.NbData = 2;
240002ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000

    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240002ee:	a902      	add	r1, sp, #8
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240002f0:	9308      	str	r3, [sp, #32]
    cmd.NbData = 2;
240002f2:	2302      	movs	r3, #2
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240002f4:	480a      	ldr	r0, [pc, #40]	@ (24000320 <w25qxx_write_status_reg+0x58>)
        cmd.Instruction = W25QXX_CMD_WRITE_STATUS_REG1;
240002f6:	9402      	str	r4, [sp, #8]
    cmd.NbData = 2;
240002f8:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240002fc:	f242 7210 	movw	r2, #10000	@ 0x2710
24000300:	f000 fe97 	bl	24001032 <HAL_QSPI_Command>

    HAL_QSPI_Transmit(&hqspi, (uint8_t *)&status, QSPI_TIMEOUT);
24000304:	f242 7210 	movw	r2, #10000	@ 0x2710
24000308:	f10d 0106 	add.w	r1, sp, #6
2400030c:	4804      	ldr	r0, [pc, #16]	@ (24000320 <w25qxx_write_status_reg+0x58>)
2400030e:	f000 fed5 	bl	240010bc <HAL_QSPI_Transmit>

    w25qxx_autopolling_ready();
24000312:	f7ff ff33 	bl	2400017c <w25qxx_autopolling_ready>

    return QSPI_OK;
}
24000316:	2000      	movs	r0, #0
24000318:	b010      	add	sp, #64	@ 0x40
2400031a:	bd10      	pop	{r4, pc}
    switch (reg)
2400031c:	2431      	movs	r4, #49	@ 0x31
2400031e:	e7dd      	b.n	240002dc <w25qxx_write_status_reg+0x14>
24000320:	24002798 	.word	0x24002798

24000324 <w25qxx_init>:
{
24000324:	b508      	push	{r3, lr}
    w25qxx_reset();
24000326:	f7ff ffa5 	bl	24000274 <w25qxx_reset>
    w25qxx_autopolling_ready();
2400032a:	f7ff ff27 	bl	2400017c <w25qxx_autopolling_ready>
    w25qxx_set_address_mode(W25QXX_ADDRESS_MODE_4_BYTE);
2400032e:	2001      	movs	r0, #1
24000330:	f7ff ff06 	bl	24000140 <w25qxx_set_address_mode>
    w25qxx_write_status_reg(2, 0202);       // enable QE bit
24000334:	2182      	movs	r1, #130	@ 0x82
24000336:	2002      	movs	r0, #2
24000338:	f7ff ffc6 	bl	240002c8 <w25qxx_write_status_reg>
}
2400033c:	2000      	movs	r0, #0
2400033e:	bd08      	pop	{r3, pc}

24000340 <w25qxx_128k_block_erase>:

    return QSPI_OK;
}

int w25qxx_128k_block_erase(uint32_t addr)
{
24000340:	b510      	push	{r4, lr}
24000342:	b08e      	sub	sp, #56	@ 0x38
24000344:	4604      	mov	r4, r0
    QSPI_CommandTypeDef cmd = {0};
24000346:	2238      	movs	r2, #56	@ 0x38
24000348:	2100      	movs	r1, #0
2400034a:	4668      	mov	r0, sp
2400034c:	f002 f9f0 	bl	24002730 <memset>

    w25qxx_write_enable();
24000350:	f7ff ff76 	bl	24000240 <w25qxx_write_enable>

    cmd.Instruction = W25QXX_CMD_BLOCK_ERASE_64K;
24000354:	23d8      	movs	r3, #216	@ 0xd8

    cmd.Address = addr;
    cmd.AddressMode = QSPI_ADDRESS_1_LINE;
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;

    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
24000356:	f242 7210 	movw	r2, #10000	@ 0x2710
2400035a:	4669      	mov	r1, sp
    cmd.Instruction = W25QXX_CMD_BLOCK_ERASE_64K;
2400035c:	9300      	str	r3, [sp, #0]
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400035e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
24000362:	4808      	ldr	r0, [pc, #32]	@ (24000384 <w25qxx_128k_block_erase+0x44>)
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000364:	9306      	str	r3, [sp, #24]
    cmd.AddressMode = QSPI_ADDRESS_1_LINE;
24000366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    cmd.Address = addr;
2400036a:	9401      	str	r4, [sp, #4]
    cmd.AddressMode = QSPI_ADDRESS_1_LINE;
2400036c:	9307      	str	r3, [sp, #28]
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;
2400036e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
24000372:	9303      	str	r3, [sp, #12]
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
24000374:	f000 fe5d 	bl	24001032 <HAL_QSPI_Command>

    w25qxx_autopolling_ready();
24000378:	f7ff ff00 	bl	2400017c <w25qxx_autopolling_ready>

    return QSPI_OK;
}
2400037c:	2000      	movs	r0, #0
2400037e:	b00e      	add	sp, #56	@ 0x38
24000380:	bd10      	pop	{r4, pc}
24000382:	bf00      	nop
24000384:	24002798 	.word	0x24002798

24000388 <w25qxx_chip_erase>:

int w25qxx_chip_erase(void)
{
24000388:	b500      	push	{lr}
2400038a:	b08f      	sub	sp, #60	@ 0x3c
    QSPI_CommandTypeDef cmd = {0};
2400038c:	2238      	movs	r2, #56	@ 0x38
2400038e:	2100      	movs	r1, #0
24000390:	4668      	mov	r0, sp
24000392:	f002 f9cd 	bl	24002730 <memset>

    w25qxx_write_enable();
24000396:	f7ff ff53 	bl	24000240 <w25qxx_write_enable>

    cmd.Instruction = W25QXX_CMD_CHIP_ERASE;
2400039a:	23c7      	movs	r3, #199	@ 0xc7
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;

    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
2400039c:	f242 7210 	movw	r2, #10000	@ 0x2710
240003a0:	4669      	mov	r1, sp
    cmd.Instruction = W25QXX_CMD_CHIP_ERASE;
240003a2:	9300      	str	r3, [sp, #0]
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240003a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240003a8:	4804      	ldr	r0, [pc, #16]	@ (240003bc <w25qxx_chip_erase+0x34>)
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240003aa:	9306      	str	r3, [sp, #24]
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240003ac:	f000 fe41 	bl	24001032 <HAL_QSPI_Command>

    w25qxx_autopolling_ready();
240003b0:	f7ff fee4 	bl	2400017c <w25qxx_autopolling_ready>

    return QSPI_OK;
}
240003b4:	2000      	movs	r0, #0
240003b6:	b00f      	add	sp, #60	@ 0x3c
240003b8:	f85d fb04 	ldr.w	pc, [sp], #4
240003bc:	24002798 	.word	0x24002798

240003c0 <w25qxx_page_program>:
//{

//}

int w25qxx_page_program(uint32_t addr, uint8_t *data, uint32_t len)
{
240003c0:	b570      	push	{r4, r5, r6, lr}
240003c2:	b08e      	sub	sp, #56	@ 0x38
240003c4:	4606      	mov	r6, r0
240003c6:	460c      	mov	r4, r1
240003c8:	4615      	mov	r5, r2
    QSPI_CommandTypeDef cmd = {0};
240003ca:	2100      	movs	r1, #0
240003cc:	2238      	movs	r2, #56	@ 0x38
240003ce:	4668      	mov	r0, sp
240003d0:	f002 f9ae 	bl	24002730 <memset>

    w25qxx_write_enable();
240003d4:	f7ff ff34 	bl	24000240 <w25qxx_write_enable>

    cmd.Instruction = W25QXX_CMD_QUAD_INPUT_PAGE_PROGRAM;
240003d8:	2332      	movs	r3, #50	@ 0x32
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;

    cmd.DataMode = QSPI_DATA_4_LINES;
    cmd.NbData = len;

    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240003da:	4669      	mov	r1, sp
240003dc:	f242 7210 	movw	r2, #10000	@ 0x2710
    cmd.Instruction = W25QXX_CMD_QUAD_INPUT_PAGE_PROGRAM;
240003e0:	9300      	str	r3, [sp, #0]
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240003e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
    cmd.Address = addr;
240003e6:	9601      	str	r6, [sp, #4]
    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240003e8:	9306      	str	r3, [sp, #24]
    cmd.AddressMode = QSPI_ADDRESS_1_LINE;
240003ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
240003ee:	9307      	str	r3, [sp, #28]
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;
240003f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
240003f4:	9303      	str	r3, [sp, #12]
    cmd.DataMode = QSPI_DATA_4_LINES;
240003f6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    cmd.NbData = len;
240003fa:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    HAL_QSPI_Command(&hqspi, &cmd, QSPI_TIMEOUT);
240003fe:	4d07      	ldr	r5, [pc, #28]	@ (2400041c <w25qxx_page_program+0x5c>)
24000400:	4628      	mov	r0, r5
24000402:	f000 fe16 	bl	24001032 <HAL_QSPI_Command>

    HAL_QSPI_Transmit(&hqspi, data, QSPI_TIMEOUT);
24000406:	f242 7210 	movw	r2, #10000	@ 0x2710
2400040a:	4621      	mov	r1, r4
2400040c:	4628      	mov	r0, r5
2400040e:	f000 fe55 	bl	240010bc <HAL_QSPI_Transmit>

    w25qxx_autopolling_ready();
24000412:	f7ff feb3 	bl	2400017c <w25qxx_autopolling_ready>

    return QSPI_OK;
}
24000416:	2000      	movs	r0, #0
24000418:	b00e      	add	sp, #56	@ 0x38
2400041a:	bd70      	pop	{r4, r5, r6, pc}
2400041c:	24002798 	.word	0x24002798

24000420 <w25qxx_write>:

int w25qxx_write(uint32_t addr, uint8_t *data, uint32_t len)
{
24000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t page_remain = 0;

    page_remain = 512 - addr % 512;
24000422:	f3c0 0408 	ubfx	r4, r0, #0, #9
{
24000426:	4606      	mov	r6, r0
24000428:	460f      	mov	r7, r1
2400042a:	4615      	mov	r5, r2
    page_remain = 512 - addr % 512;
2400042c:	f5c4 7400 	rsb	r4, r4, #512	@ 0x200
24000430:	4294      	cmp	r4, r2
24000432:	bf28      	it	cs
24000434:	4614      	movcs	r4, r2
    if (len <= page_remain)		page_remain = len;

    while(1)
    {
        w25qxx_page_program(addr, data, page_remain);
24000436:	4622      	mov	r2, r4
24000438:	4639      	mov	r1, r7
2400043a:	4630      	mov	r0, r6
2400043c:	f7ff ffc0 	bl	240003c0 <w25qxx_page_program>
        if (len == page_remain)
24000440:	42a5      	cmp	r5, r4
24000442:	d009      	beq.n	24000458 <w25qxx_write+0x38>
        else
        {
            data += page_remain;
            addr += page_remain;

            len -= page_remain;
24000444:	1b2d      	subs	r5, r5, r4
            data += page_remain;
24000446:	4427      	add	r7, r4
            addr += page_remain;
24000448:	4426      	add	r6, r4
            if (len > 512)
2400044a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
2400044e:	462c      	mov	r4, r5
24000450:	bf28      	it	cs
24000452:	f44f 7400 	movcs.w	r4, #512	@ 0x200
24000456:	e7ee      	b.n	24000436 <w25qxx_write+0x16>
            }
        }
    }

    return QSPI_OK;
}
24000458:	2000      	movs	r0, #0
2400045a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2400045c <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
2400045c:	b510      	push	{r4, lr}
2400045e:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000460:	2214      	movs	r2, #20
24000462:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
24000464:	4c2f      	ldr	r4, [pc, #188]	@ (24000524 <MX_GPIO_Init+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000466:	a807      	add	r0, sp, #28
24000468:	f002 f962 	bl	24002730 <memset>
  __HAL_RCC_GPIOG_CLK_ENABLE();
2400046c:	4b2e      	ldr	r3, [pc, #184]	@ (24000528 <MX_GPIO_Init+0xcc>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
2400046e:	4620      	mov	r0, r4
24000470:	2130      	movs	r1, #48	@ 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
24000472:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2400047a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
2400047e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000482:	f002 0240 	and.w	r2, r2, #64	@ 0x40
24000486:	9201      	str	r2, [sp, #4]
24000488:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2400048a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
2400048e:	f042 0208 	orr.w	r2, r2, #8
24000492:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
24000496:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
2400049a:	f002 0208 	and.w	r2, r2, #8
2400049e:	9202      	str	r2, [sp, #8]
240004a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
240004a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004a6:	f042 0204 	orr.w	r2, r2, #4
240004aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
240004ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004b2:	f002 0204 	and.w	r2, r2, #4
240004b6:	9203      	str	r2, [sp, #12]
240004b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
240004ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
240004c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
240004c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004ca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
240004ce:	9204      	str	r2, [sp, #16]
240004d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
240004d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004d6:	f042 0220 	orr.w	r2, r2, #32
240004da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
240004de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004e2:	f002 0220 	and.w	r2, r2, #32
240004e6:	9205      	str	r2, [sp, #20]
240004e8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
240004ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
240004ee:	f042 0202 	orr.w	r2, r2, #2
240004f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
240004f6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
240004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
240004fc:	f003 0302 	and.w	r3, r3, #2
24000500:	9306      	str	r3, [sp, #24]
24000502:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
24000504:	f000 fc2c 	bl	24000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24000508:	2230      	movs	r2, #48	@ 0x30
2400050a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400050c:	a907      	add	r1, sp, #28
2400050e:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24000510:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000514:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000516:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400051a:	f000 fa9d 	bl	24000a58 <HAL_GPIO_Init>

}
2400051e:	b00c      	add	sp, #48	@ 0x30
24000520:	bd10      	pop	{r4, pc}
24000522:	bf00      	nop
24000524:	58020c00 	.word	0x58020c00
24000528:	58024400 	.word	0x58024400

2400052c <HAL_InitTick>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    return HAL_OK;
}
2400052c:	2000      	movs	r0, #0
2400052e:	4770      	bx	lr

24000530 <HAL_GetTick>:
    volatile int i=0;
    for (i=0; i<0x1000; i++);
}

uint32_t HAL_GetTick(void)
{
24000530:	b082      	sub	sp, #8
    volatile int i;
    for (i=0; i < 512; i++);
24000532:	2300      	movs	r3, #0
24000534:	9301      	str	r3, [sp, #4]
24000536:	9b01      	ldr	r3, [sp, #4]
24000538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2400053c:	db06      	blt.n	2400054c <HAL_GetTick+0x1c>
    uwTick++;
2400053e:	4b05      	ldr	r3, [pc, #20]	@ (24000554 <HAL_GetTick+0x24>)
24000540:	681a      	ldr	r2, [r3, #0]
24000542:	3201      	adds	r2, #1
24000544:	601a      	str	r2, [r3, #0]
    return uwTick;
24000546:	6818      	ldr	r0, [r3, #0]
}
24000548:	b002      	add	sp, #8
2400054a:	4770      	bx	lr
    for (i=0; i < 512; i++);
2400054c:	9b01      	ldr	r3, [sp, #4]
2400054e:	3301      	adds	r3, #1
24000550:	e7f0      	b.n	24000534 <HAL_GetTick+0x4>
24000552:	bf00      	nop
24000554:	240027e4 	.word	0x240027e4

24000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24000558:	b510      	push	{r4, lr}
2400055a:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2400055c:	224c      	movs	r2, #76	@ 0x4c
2400055e:	2100      	movs	r1, #0
24000560:	a80b      	add	r0, sp, #44	@ 0x2c
24000562:	f002 f8e5 	bl	24002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24000566:	2220      	movs	r2, #32
24000568:	2100      	movs	r1, #0
2400056a:	a803      	add	r0, sp, #12
2400056c:	f002 f8e0 	bl	24002730 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24000570:	2002      	movs	r0, #2
24000572:	f000 fbfb 	bl	24000d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24000576:	2300      	movs	r3, #0
24000578:	9300      	str	r3, [sp, #0]
2400057a:	4b35      	ldr	r3, [pc, #212]	@ (24000650 <SystemClock_Config+0xf8>)
2400057c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
2400057e:	f022 0201 	bic.w	r2, r2, #1
24000582:	62da      	str	r2, [r3, #44]	@ 0x2c
24000584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24000586:	f003 0301 	and.w	r3, r3, #1
2400058a:	9300      	str	r3, [sp, #0]
2400058c:	4b31      	ldr	r3, [pc, #196]	@ (24000654 <SystemClock_Config+0xfc>)
2400058e:	699a      	ldr	r2, [r3, #24]
24000590:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
24000594:	619a      	str	r2, [r3, #24]
24000596:	699a      	ldr	r2, [r3, #24]
24000598:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
2400059c:	9200      	str	r2, [sp, #0]
2400059e:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240005a0:	699a      	ldr	r2, [r3, #24]
240005a2:	0492      	lsls	r2, r2, #18
240005a4:	d5fc      	bpl.n	240005a0 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240005a6:	4a2c      	ldr	r2, [pc, #176]	@ (24000658 <SystemClock_Config+0x100>)
240005a8:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
240005ac:	f041 0102 	orr.w	r1, r1, #2
240005b0:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
240005b4:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
240005b8:	f002 0202 	and.w	r2, r2, #2
240005bc:	9201      	str	r2, [sp, #4]
240005be:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240005c0:	2200      	movs	r2, #0
240005c2:	9202      	str	r2, [sp, #8]
240005c4:	699a      	ldr	r2, [r3, #24]
240005c6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
240005ca:	619a      	str	r2, [r3, #24]
240005cc:	699b      	ldr	r3, [r3, #24]
240005ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
240005d2:	9302      	str	r3, [sp, #8]
240005d4:	4b1e      	ldr	r3, [pc, #120]	@ (24000650 <SystemClock_Config+0xf8>)
240005d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
240005d8:	f042 0201 	orr.w	r2, r2, #1
240005dc:	62da      	str	r2, [r3, #44]	@ 0x2c
240005de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240005e0:	4a1c      	ldr	r2, [pc, #112]	@ (24000654 <SystemClock_Config+0xfc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240005e2:	f003 0301 	and.w	r3, r3, #1
240005e6:	9302      	str	r3, [sp, #8]
240005e8:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240005ea:	6993      	ldr	r3, [r2, #24]
240005ec:	049c      	lsls	r4, r3, #18
240005ee:	d5fc      	bpl.n	240005ea <SystemClock_Config+0x92>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
240005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
240005f4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
240005f6:	2005      	movs	r0, #5
240005f8:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240005fa:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
240005fc:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000600:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000602:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
24000606:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
2400060a:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2400060c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 192;
2400060e:	e9cd 0216 	strd	r0, r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000612:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000614:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000616:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2400061a:	f000 fe3d 	bl	24001298 <HAL_RCC_OscConfig>
2400061e:	b108      	cbz	r0, 24000624 <SystemClock_Config+0xcc>
24000620:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
24000622:	e7fe      	b.n	24000622 <SystemClock_Config+0xca>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000624:	223f      	movs	r2, #63	@ 0x3f
24000626:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000628:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400062a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400062e:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000634:	e9cd 0405 	strd	r0, r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000638:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
2400063a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2400063e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000642:	f001 f977 	bl	24001934 <HAL_RCC_ClockConfig>
24000646:	b108      	cbz	r0, 2400064c <SystemClock_Config+0xf4>
24000648:	b672      	cpsid	i
    while (1)
2400064a:	e7fe      	b.n	2400064a <SystemClock_Config+0xf2>
}
2400064c:	b01e      	add	sp, #120	@ 0x78
2400064e:	bd10      	pop	{r4, pc}
24000650:	58000400 	.word	0x58000400
24000654:	58024800 	.word	0x58024800
24000658:	58024400 	.word	0x58024400

2400065c <Error_Handler>:
2400065c:	b672      	cpsid	i
    while (1)
2400065e:	e7fe      	b.n	2400065e <Error_Handler+0x2>

24000660 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24000660:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24000662:	480d      	ldr	r0, [pc, #52]	@ (24000698 <MX_QUADSPI_Init+0x38>)
  hqspi.Init.ClockPrescaler = 3;
24000664:	2303      	movs	r3, #3
24000666:	4a0d      	ldr	r2, [pc, #52]	@ (2400069c <MX_QUADSPI_Init+0x3c>)
  hqspi.Init.FifoThreshold = 32;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24000668:	2120      	movs	r1, #32
  hqspi.Init.FlashSize = 27;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_8_CYCLE;
2400066a:	f04f 0c1b 	mov.w	ip, #27
  hqspi.Init.ClockPrescaler = 3;
2400066e:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24000672:	2300      	movs	r3, #0
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_8_CYCLE;
24000674:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24000678:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
2400067c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
2400067e:	2340      	movs	r3, #64	@ 0x40
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_8_CYCLE;
24000680:	e9c0 c204 	strd	ip, r2, [r0, #16]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
24000684:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24000686:	f000 fc77 	bl	24000f78 <HAL_QSPI_Init>
2400068a:	b118      	cbz	r0, 24000694 <MX_QUADSPI_Init+0x34>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
2400068c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24000690:	f7ff bfe4 	b.w	2400065c <Error_Handler>
}
24000694:	bd08      	pop	{r3, pc}
24000696:	bf00      	nop
24000698:	24002798 	.word	0x24002798
2400069c:	52005000 	.word	0x52005000

240006a0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
240006a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240006a4:	2214      	movs	r2, #20
{
240006a6:	b0ba      	sub	sp, #232	@ 0xe8
240006a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240006aa:	2100      	movs	r1, #0
240006ac:	eb0d 0002 	add.w	r0, sp, r2
240006b0:	f002 f83e 	bl	24002730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240006b4:	22c0      	movs	r2, #192	@ 0xc0
240006b6:	2100      	movs	r1, #0
240006b8:	a80a      	add	r0, sp, #40	@ 0x28
240006ba:	f002 f839 	bl	24002730 <memset>
  if(qspiHandle->Instance==QUADSPI)
240006be:	6822      	ldr	r2, [r4, #0]
240006c0:	4b4a      	ldr	r3, [pc, #296]	@ (240007ec <HAL_QSPI_MspInit+0x14c>)
240006c2:	429a      	cmp	r2, r3
240006c4:	f040 808e 	bne.w	240007e4 <HAL_QSPI_MspInit+0x144>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
240006c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
240006cc:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240006ce:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
240006d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240006d4:	f001 fb44 	bl	24001d60 <HAL_RCCEx_PeriphCLKConfig>
240006d8:	b108      	cbz	r0, 240006de <HAL_QSPI_MspInit+0x3e>
    {
      Error_Handler();
240006da:	f7ff ffbf 	bl	2400065c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
240006de:	4b44      	ldr	r3, [pc, #272]	@ (240007f0 <HAL_QSPI_MspInit+0x150>)
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240006e0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240006e2:	2500      	movs	r5, #0
240006e4:	2403      	movs	r4, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
240006e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240006ea:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240006ec:	a905      	add	r1, sp, #20
240006ee:	4841      	ldr	r0, [pc, #260]	@ (240007f4 <HAL_QSPI_MspInit+0x154>)
    __HAL_RCC_QSPI_CLK_ENABLE();
240006f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
240006f4:	f04f 080a 	mov.w	r8, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
240006f8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
240006fc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
24000700:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
24000704:	9200      	str	r2, [sp, #0]
24000706:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24000708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
2400070c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
24000710:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
24000714:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000718:	f002 0240 	and.w	r2, r2, #64	@ 0x40
2400071c:	9201      	str	r2, [sp, #4]
2400071e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24000720:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000724:	f042 0220 	orr.w	r2, r2, #32
24000728:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
2400072c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000730:	f002 0220 	and.w	r2, r2, #32
24000734:	9202      	str	r2, [sp, #8]
24000736:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
24000738:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
2400073c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
24000740:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
24000744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000748:	f002 0280 	and.w	r2, r2, #128	@ 0x80
2400074c:	9203      	str	r2, [sp, #12]
2400074e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000750:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
24000754:	f042 0202 	orr.w	r2, r2, #2
24000758:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
2400075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000760:	9709      	str	r7, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000762:	f003 0302 	and.w	r3, r3, #2
24000766:	9304      	str	r3, [sp, #16]
24000768:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400076a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400076e:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000772:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000776:	f000 f96f 	bl	24000a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2400077a:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400077c:	a905      	add	r1, sp, #20
2400077e:	481d      	ldr	r0, [pc, #116]	@ (240007f4 <HAL_QSPI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24000780:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000784:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000788:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400078c:	f000 f964 	bl	24000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24000790:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24000792:	a905      	add	r1, sp, #20
24000794:	4818      	ldr	r0, [pc, #96]	@ (240007f8 <HAL_QSPI_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000796:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000798:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400079c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240007a0:	f000 f95a 	bl	24000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240007a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240007a8:	a905      	add	r1, sp, #20
240007aa:	4813      	ldr	r0, [pc, #76]	@ (240007f8 <HAL_QSPI_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
240007ac:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240007b0:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240007b4:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240007b8:	f000 f94e 	bl	24000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
240007bc:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240007be:	a905      	add	r1, sp, #20
240007c0:	480e      	ldr	r0, [pc, #56]	@ (240007fc <HAL_QSPI_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240007c2:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240007c4:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240007c8:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240007cc:	f000 f944 	bl	24000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
240007d0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240007d2:	a905      	add	r1, sp, #20
240007d4:	480a      	ldr	r0, [pc, #40]	@ (24000800 <HAL_QSPI_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240007d6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240007d8:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240007dc:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240007e0:	f000 f93a 	bl	24000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
240007e4:	b03a      	add	sp, #232	@ 0xe8
240007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240007ea:	bf00      	nop
240007ec:	52005000 	.word	0x52005000
240007f0:	58024400 	.word	0x58024400
240007f4:	58021800 	.word	0x58021800
240007f8:	58021400 	.word	0x58021400
240007fc:	58021c00 	.word	0x58021c00
24000800:	58020400 	.word	0x58020400

24000804 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
24000804:	6802      	ldr	r2, [r0, #0]
{
24000806:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
24000808:	4b0f      	ldr	r3, [pc, #60]	@ (24000848 <HAL_QSPI_MspDeInit+0x44>)
2400080a:	429a      	cmp	r2, r3
2400080c:	d11a      	bne.n	24000844 <HAL_QSPI_MspDeInit+0x40>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
2400080e:	4a0f      	ldr	r2, [pc, #60]	@ (2400084c <HAL_QSPI_MspDeInit+0x48>)
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_6);
24000810:	f244 2140 	movw	r1, #16960	@ 0x4240
24000814:	480e      	ldr	r0, [pc, #56]	@ (24000850 <HAL_QSPI_MspDeInit+0x4c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
24000816:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
2400081a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
2400081e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_6);
24000822:	f000 fa01 	bl	24000c28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
24000826:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
2400082a:	480a      	ldr	r0, [pc, #40]	@ (24000854 <HAL_QSPI_MspDeInit+0x50>)
2400082c:	f000 f9fc 	bl	24000c28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_2|GPIO_PIN_3);
24000830:	210c      	movs	r1, #12
24000832:	4809      	ldr	r0, [pc, #36]	@ (24000858 <HAL_QSPI_MspDeInit+0x54>)
24000834:	f000 f9f8 	bl	24000c28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
24000838:	2104      	movs	r1, #4
2400083a:	4808      	ldr	r0, [pc, #32]	@ (2400085c <HAL_QSPI_MspDeInit+0x58>)

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
2400083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
24000840:	f000 b9f2 	b.w	24000c28 <HAL_GPIO_DeInit>
}
24000844:	bd08      	pop	{r3, pc}
24000846:	bf00      	nop
24000848:	52005000 	.word	0x52005000
2400084c:	58024400 	.word	0x58024400
24000850:	58021800 	.word	0x58021800
24000854:	58021400 	.word	0x58021400
24000858:	58021c00 	.word	0x58021c00
2400085c:	58020400 	.word	0x58020400

24000860 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000860:	4b07      	ldr	r3, [pc, #28]	@ (24000880 <HAL_MspInit+0x20>)
{
24000862:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000864:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
24000868:	f042 0202 	orr.w	r2, r2, #2
2400086c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
24000870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
24000874:	f003 0302 	and.w	r3, r3, #2
24000878:	9301      	str	r3, [sp, #4]
2400087a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400087c:	b002      	add	sp, #8
2400087e:	4770      	bx	lr
24000880:	58024400 	.word	0x58024400

24000884 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24000884:	4a25      	ldr	r2, [pc, #148]	@ (2400091c <SystemInit+0x98>)
24000886:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
2400088a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
2400088e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000892:	4a23      	ldr	r2, [pc, #140]	@ (24000920 <SystemInit+0x9c>)
24000894:	6813      	ldr	r3, [r2, #0]
24000896:	f003 030f 	and.w	r3, r3, #15
2400089a:	2b06      	cmp	r3, #6
2400089c:	d805      	bhi.n	240008aa <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400089e:	6813      	ldr	r3, [r2, #0]
240008a0:	f023 030f 	bic.w	r3, r3, #15
240008a4:	f043 0307 	orr.w	r3, r3, #7
240008a8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
240008aa:	4b1e      	ldr	r3, [pc, #120]	@ (24000924 <SystemInit+0xa0>)
240008ac:	681a      	ldr	r2, [r3, #0]
240008ae:	f042 0201 	orr.w	r2, r2, #1
240008b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
240008b4:	2200      	movs	r2, #0
240008b6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
240008b8:	4a1b      	ldr	r2, [pc, #108]	@ (24000928 <SystemInit+0xa4>)
240008ba:	6819      	ldr	r1, [r3, #0]
240008bc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240008be:	4918      	ldr	r1, [pc, #96]	@ (24000920 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
240008c0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240008c2:	680a      	ldr	r2, [r1, #0]
240008c4:	0712      	lsls	r2, r2, #28
240008c6:	d505      	bpl.n	240008d4 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240008c8:	680a      	ldr	r2, [r1, #0]
240008ca:	f022 020f 	bic.w	r2, r2, #15
240008ce:	f042 0207 	orr.w	r2, r2, #7
240008d2:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
240008d4:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
240008d6:	4915      	ldr	r1, [pc, #84]	@ (2400092c <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
240008d8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
240008da:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
240008dc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
240008de:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
240008e0:	4913      	ldr	r1, [pc, #76]	@ (24000930 <SystemInit+0xac>)
240008e2:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
240008e4:	4913      	ldr	r1, [pc, #76]	@ (24000934 <SystemInit+0xb0>)
240008e6:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
240008e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
240008ea:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
240008ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
240008ee:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
240008f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
240008f2:	6819      	ldr	r1, [r3, #0]
240008f4:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
240008f8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
240008fa:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240008fc:	4b0e      	ldr	r3, [pc, #56]	@ (24000938 <SystemInit+0xb4>)
240008fe:	681b      	ldr	r3, [r3, #0]
24000900:	0c1b      	lsrs	r3, r3, #16
24000902:	041b      	lsls	r3, r3, #16
24000904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24000908:	d203      	bcs.n	24000912 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
2400090a:	4b0c      	ldr	r3, [pc, #48]	@ (2400093c <SystemInit+0xb8>)
2400090c:	2201      	movs	r2, #1
2400090e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24000912:	4b0b      	ldr	r3, [pc, #44]	@ (24000940 <SystemInit+0xbc>)
24000914:	f243 02d2 	movw	r2, #12498	@ 0x30d2
24000918:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
2400091a:	4770      	bx	lr
2400091c:	e000ed00 	.word	0xe000ed00
24000920:	52002000 	.word	0x52002000
24000924:	58024400 	.word	0x58024400
24000928:	eaf6ed7f 	.word	0xeaf6ed7f
2400092c:	02020200 	.word	0x02020200
24000930:	01ff0000 	.word	0x01ff0000
24000934:	01010280 	.word	0x01010280
24000938:	5c001000 	.word	0x5c001000
2400093c:	51008000 	.word	0x51008000
24000940:	52004000 	.word	0x52004000

24000944 <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
24000944:	4770      	bx	lr
	...

24000948 <HAL_DeInit>:
  __HAL_RCC_AHB3_FORCE_RESET();
24000948:	4b19      	ldr	r3, [pc, #100]	@ (240009b0 <HAL_DeInit+0x68>)
2400094a:	4a1a      	ldr	r2, [pc, #104]	@ (240009b4 <HAL_DeInit+0x6c>)
{
2400094c:	b510      	push	{r4, lr}
  __HAL_RCC_AHB3_FORCE_RESET();
2400094e:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
24000950:	2400      	movs	r4, #0
  __HAL_RCC_AHB1_FORCE_RESET();
24000952:	4a19      	ldr	r2, [pc, #100]	@ (240009b8 <HAL_DeInit+0x70>)
  __HAL_RCC_AHB3_RELEASE_RESET();
24000954:	67dc      	str	r4, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB1_FORCE_RESET();
24000956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
2400095a:	f240 2271 	movw	r2, #625	@ 0x271
  __HAL_RCC_AHB1_RELEASE_RESET();
2400095e:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
24000962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
24000966:	4a15      	ldr	r2, [pc, #84]	@ (240009bc <HAL_DeInit+0x74>)
  __HAL_RCC_AHB2_RELEASE_RESET();
24000968:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
2400096c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __HAL_RCC_APB3_FORCE_RESET();
24000970:	2218      	movs	r2, #24
 __HAL_RCC_AHB4_RELEASE_RESET();
24000972:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  __HAL_RCC_APB3_FORCE_RESET();
24000976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
2400097a:	4a11      	ldr	r2, [pc, #68]	@ (240009c0 <HAL_DeInit+0x78>)
  __HAL_RCC_APB3_RELEASE_RESET();
2400097c:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
24000980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
24000984:	f44f 729b 	mov.w	r2, #310	@ 0x136
  __HAL_RCC_APB1L_RELEASE_RESET();
24000988:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
2400098c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
   __HAL_RCC_APB2_FORCE_RESET();
24000990:	4a0c      	ldr	r2, [pc, #48]	@ (240009c4 <HAL_DeInit+0x7c>)
  __HAL_RCC_APB1H_RELEASE_RESET();
24000992:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
   __HAL_RCC_APB2_FORCE_RESET();
24000996:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  __HAL_RCC_APB4_FORCE_RESET();
2400099a:	4a0b      	ldr	r2, [pc, #44]	@ (240009c8 <HAL_DeInit+0x80>)
   __HAL_RCC_APB2_RELEASE_RESET();
2400099c:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
  __HAL_RCC_APB4_FORCE_RESET();
240009a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
240009a4:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
  HAL_MspDeInit();
240009a8:	f7ff ffcc 	bl	24000944 <HAL_MspDeInit>
}
240009ac:	4620      	mov	r0, r4
240009ae:	bd10      	pop	{r4, pc}
240009b0:	58024400 	.word	0x58024400
240009b4:	00015031 	.word	0x00015031
240009b8:	0a00c023 	.word	0x0a00c023
240009bc:	032807ff 	.word	0x032807ff
240009c0:	e8ffc3ff 	.word	0xe8ffc3ff
240009c4:	31d73033 	.word	0x31d73033
240009c8:	0020deaa 	.word	0x0020deaa

240009cc <HAL_Init>:
{
240009cc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240009ce:	2003      	movs	r0, #3
240009d0:	f000 f830 	bl	24000a34 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240009d4:	f000 ff0c 	bl	240017f0 <HAL_RCC_GetSysClockFreq>
240009d8:	490f      	ldr	r1, [pc, #60]	@ (24000a18 <HAL_Init+0x4c>)
240009da:	4a10      	ldr	r2, [pc, #64]	@ (24000a1c <HAL_Init+0x50>)
240009dc:	698b      	ldr	r3, [r1, #24]
240009de:	f3c3 2303 	ubfx	r3, r3, #8, #4
240009e2:	5cd3      	ldrb	r3, [r2, r3]
240009e4:	f003 031f 	and.w	r3, r3, #31
240009e8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240009ea:	698b      	ldr	r3, [r1, #24]
240009ec:	f003 030f 	and.w	r3, r3, #15
240009f0:	5cd3      	ldrb	r3, [r2, r3]
240009f2:	4a0b      	ldr	r2, [pc, #44]	@ (24000a20 <HAL_Init+0x54>)
240009f4:	f003 031f 	and.w	r3, r3, #31
240009f8:	fa20 f303 	lsr.w	r3, r0, r3
240009fc:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
240009fe:	4b09      	ldr	r3, [pc, #36]	@ (24000a24 <HAL_Init+0x58>)
24000a00:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24000a02:	200f      	movs	r0, #15
24000a04:	f7ff fd92 	bl	2400052c <HAL_InitTick>
24000a08:	4604      	mov	r4, r0
24000a0a:	b918      	cbnz	r0, 24000a14 <HAL_Init+0x48>
  HAL_MspInit();
24000a0c:	f7ff ff28 	bl	24000860 <HAL_MspInit>
}
24000a10:	4620      	mov	r0, r4
24000a12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
24000a14:	2401      	movs	r4, #1
24000a16:	e7fb      	b.n	24000a10 <HAL_Init+0x44>
24000a18:	58024400 	.word	0x58024400
24000a1c:	24002758 	.word	0x24002758
24000a20:	24002770 	.word	0x24002770
24000a24:	24002774 	.word	0x24002774

24000a28 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24000a28:	4b01      	ldr	r3, [pc, #4]	@ (24000a30 <HAL_GetREVID+0x8>)
24000a2a:	6818      	ldr	r0, [r3, #0]
}
24000a2c:	0c00      	lsrs	r0, r0, #16
24000a2e:	4770      	bx	lr
24000a30:	5c001000 	.word	0x5c001000

24000a34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24000a34:	4907      	ldr	r1, [pc, #28]	@ (24000a54 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24000a36:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24000a38:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24000a3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24000a3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
24000a42:	0412      	lsls	r2, r2, #16
24000a44:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
24000a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
24000a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
24000a50:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24000a52:	4770      	bx	lr
24000a54:	e000ed00 	.word	0xe000ed00

24000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24000a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24000a5c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000a5e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 24000c24 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24000a62:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24000a66:	680a      	ldr	r2, [r1, #0]
24000a68:	fa32 f503 	lsrs.w	r5, r2, r3
24000a6c:	d102      	bne.n	24000a74 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
24000a6e:	b003      	add	sp, #12
24000a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24000a74:	2501      	movs	r5, #1
24000a76:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
24000a7a:	ea18 0202 	ands.w	r2, r8, r2
24000a7e:	f000 80bb 	beq.w	24000bf8 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24000a82:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000a84:	2703      	movs	r7, #3
24000a86:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24000a8a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000a8e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24000a92:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000a94:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24000a98:	2f01      	cmp	r7, #1
24000a9a:	d834      	bhi.n	24000b06 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
24000a9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000a9e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
24000aa2:	68cf      	ldr	r7, [r1, #12]
24000aa4:	fa07 f70e 	lsl.w	r7, r7, lr
24000aa8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
24000aac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
24000aae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24000ab0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24000ab4:	f3c6 1700 	ubfx	r7, r6, #4, #1
24000ab8:	409f      	lsls	r7, r3
24000aba:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
24000abe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
24000ac0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24000ac2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24000ac4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24000ac8:	688f      	ldr	r7, [r1, #8]
24000aca:	fa07 f70e 	lsl.w	r7, r7, lr
24000ace:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
24000ad2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24000ad4:	d119      	bne.n	24000b0a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
24000ad6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24000ada:	f003 0a07 	and.w	sl, r3, #7
24000ade:	f04f 0b0f 	mov.w	fp, #15
24000ae2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
24000ae6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
24000aea:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24000aee:	fa0b fb0a 	lsl.w	fp, fp, sl
24000af2:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24000af6:	690f      	ldr	r7, [r1, #16]
24000af8:	fa07 f70a 	lsl.w	r7, r7, sl
24000afc:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
24000b00:	f8c8 7020 	str.w	r7, [r8, #32]
24000b04:	e001      	b.n	24000b0a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24000b06:	2d03      	cmp	r5, #3
24000b08:	d1da      	bne.n	24000ac0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
24000b0a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24000b0c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24000b10:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24000b14:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24000b18:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
24000b1c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24000b1e:	d06b      	beq.n	24000bf8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000b20:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
24000b24:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24000b28:	f003 0c03 	and.w	ip, r3, #3
24000b2c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000b30:	f045 0502 	orr.w	r5, r5, #2
24000b34:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24000b38:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000b3c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
24000b40:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
24000b44:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24000b48:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000b4c:	f005 0502 	and.w	r5, r5, #2
24000b50:	9501      	str	r5, [sp, #4]
24000b52:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
24000b54:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24000b56:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24000b5a:	4d31      	ldr	r5, [pc, #196]	@ (24000c20 <HAL_GPIO_Init+0x1c8>)
24000b5c:	42a8      	cmp	r0, r5
24000b5e:	d04d      	beq.n	24000bfc <HAL_GPIO_Init+0x1a4>
24000b60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b64:	42a8      	cmp	r0, r5
24000b66:	d04b      	beq.n	24000c00 <HAL_GPIO_Init+0x1a8>
24000b68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b6c:	42a8      	cmp	r0, r5
24000b6e:	d049      	beq.n	24000c04 <HAL_GPIO_Init+0x1ac>
24000b70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b74:	42a8      	cmp	r0, r5
24000b76:	d047      	beq.n	24000c08 <HAL_GPIO_Init+0x1b0>
24000b78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b7c:	42a8      	cmp	r0, r5
24000b7e:	d045      	beq.n	24000c0c <HAL_GPIO_Init+0x1b4>
24000b80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b84:	42a8      	cmp	r0, r5
24000b86:	d043      	beq.n	24000c10 <HAL_GPIO_Init+0x1b8>
24000b88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b8c:	42a8      	cmp	r0, r5
24000b8e:	d041      	beq.n	24000c14 <HAL_GPIO_Init+0x1bc>
24000b90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b94:	42a8      	cmp	r0, r5
24000b96:	d03f      	beq.n	24000c18 <HAL_GPIO_Init+0x1c0>
24000b98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000b9c:	42a8      	cmp	r0, r5
24000b9e:	d03d      	beq.n	24000c1c <HAL_GPIO_Init+0x1c4>
24000ba0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000ba4:	42a8      	cmp	r0, r5
24000ba6:	bf14      	ite	ne
24000ba8:	250a      	movne	r5, #10
24000baa:	2509      	moveq	r5, #9
24000bac:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24000bb0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24000bb4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
24000bb8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
24000bba:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
24000bbe:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
24000bc0:	bf0c      	ite	eq
24000bc2:	403d      	andeq	r5, r7
          temp |= iocurrent;
24000bc4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24000bc6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
24000bca:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
24000bcc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
24000bce:	bf0c      	ite	eq
24000bd0:	403d      	andeq	r5, r7
          temp |= iocurrent;
24000bd2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24000bd4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
24000bd8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
24000bda:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
24000bde:	bf0c      	ite	eq
24000be0:	403d      	andeq	r5, r7
          temp |= iocurrent;
24000be2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24000be4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
24000be6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
24000bea:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
24000bee:	bf54      	ite	pl
24000bf0:	403d      	andpl	r5, r7
          temp |= iocurrent;
24000bf2:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
24000bf4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
24000bf8:	3301      	adds	r3, #1
24000bfa:	e734      	b.n	24000a66 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24000bfc:	2500      	movs	r5, #0
24000bfe:	e7d5      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c00:	2501      	movs	r5, #1
24000c02:	e7d3      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c04:	2502      	movs	r5, #2
24000c06:	e7d1      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c08:	2503      	movs	r5, #3
24000c0a:	e7cf      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c0c:	2504      	movs	r5, #4
24000c0e:	e7cd      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c10:	2505      	movs	r5, #5
24000c12:	e7cb      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c14:	2506      	movs	r5, #6
24000c16:	e7c9      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c18:	2507      	movs	r5, #7
24000c1a:	e7c7      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c1c:	2508      	movs	r5, #8
24000c1e:	e7c5      	b.n	24000bac <HAL_GPIO_Init+0x154>
24000c20:	58020000 	.word	0x58020000
24000c24:	58024400 	.word	0x58024400

24000c28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
24000c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24000c2c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
24000c2e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
24000c32:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
24000c36:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
24000c3a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
24000c3e:	fa31 f302 	lsrs.w	r3, r1, r2
24000c42:	d101      	bne.n	24000c48 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
24000c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
24000c48:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
24000c4c:	ea1c 0601 	ands.w	r6, ip, r1
24000c50:	d070      	beq.n	24000d34 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
24000c52:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
24000c56:	f002 0703 	and.w	r7, r2, #3
24000c5a:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
24000c5e:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
24000c60:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
24000c64:	fa08 f907 	lsl.w	r9, r8, r7
24000c68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
24000c6c:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
24000c70:	4b3a      	ldr	r3, [pc, #232]	@ (24000d5c <HAL_GPIO_DeInit+0x134>)
24000c72:	4298      	cmp	r0, r3
24000c74:	d060      	beq.n	24000d38 <HAL_GPIO_DeInit+0x110>
24000c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000c7a:	4298      	cmp	r0, r3
24000c7c:	d05e      	beq.n	24000d3c <HAL_GPIO_DeInit+0x114>
24000c7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000c82:	4298      	cmp	r0, r3
24000c84:	d05c      	beq.n	24000d40 <HAL_GPIO_DeInit+0x118>
24000c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000c8a:	4298      	cmp	r0, r3
24000c8c:	d05a      	beq.n	24000d44 <HAL_GPIO_DeInit+0x11c>
24000c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000c92:	4298      	cmp	r0, r3
24000c94:	d058      	beq.n	24000d48 <HAL_GPIO_DeInit+0x120>
24000c96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000c9a:	4298      	cmp	r0, r3
24000c9c:	d056      	beq.n	24000d4c <HAL_GPIO_DeInit+0x124>
24000c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000ca2:	4298      	cmp	r0, r3
24000ca4:	d054      	beq.n	24000d50 <HAL_GPIO_DeInit+0x128>
24000ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000caa:	4298      	cmp	r0, r3
24000cac:	d052      	beq.n	24000d54 <HAL_GPIO_DeInit+0x12c>
24000cae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000cb2:	4298      	cmp	r0, r3
24000cb4:	d050      	beq.n	24000d58 <HAL_GPIO_DeInit+0x130>
24000cb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
24000cba:	4298      	cmp	r0, r3
24000cbc:	bf0c      	ite	eq
24000cbe:	2309      	moveq	r3, #9
24000cc0:	230a      	movne	r3, #10
24000cc2:	40bb      	lsls	r3, r7
24000cc4:	4573      	cmp	r3, lr
24000cc6:	d117      	bne.n	24000cf8 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
24000cc8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
24000ccc:	ea23 0306 	bic.w	r3, r3, r6
24000cd0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
24000cd4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
24000cd8:	ea23 0306 	bic.w	r3, r3, r6
24000cdc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
24000ce0:	6863      	ldr	r3, [r4, #4]
24000ce2:	ea23 0306 	bic.w	r3, r3, r6
24000ce6:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
24000ce8:	6823      	ldr	r3, [r4, #0]
24000cea:	ea23 0306 	bic.w	r3, r3, r6
24000cee:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
24000cf0:	68ab      	ldr	r3, [r5, #8]
24000cf2:	ea23 0309 	bic.w	r3, r3, r9
24000cf6:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
24000cf8:	0053      	lsls	r3, r2, #1
24000cfa:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
24000cfc:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
24000cfe:	fa0b f303 	lsl.w	r3, fp, r3
24000d02:	eb00 0686 	add.w	r6, r0, r6, lsl #2
24000d06:	431d      	orrs	r5, r3
24000d08:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
24000d0a:	f002 0507 	and.w	r5, r2, #7
24000d0e:	6a37      	ldr	r7, [r6, #32]
24000d10:	00ad      	lsls	r5, r5, #2
24000d12:	fa08 f505 	lsl.w	r5, r8, r5
24000d16:	ea27 0705 	bic.w	r7, r7, r5
24000d1a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24000d1c:	68c5      	ldr	r5, [r0, #12]
24000d1e:	ea25 0503 	bic.w	r5, r5, r3
24000d22:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
24000d24:	6845      	ldr	r5, [r0, #4]
24000d26:	ea25 050c 	bic.w	r5, r5, ip
24000d2a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000d2c:	6885      	ldr	r5, [r0, #8]
24000d2e:	ea25 0303 	bic.w	r3, r5, r3
24000d32:	6083      	str	r3, [r0, #8]
    position++;
24000d34:	3201      	adds	r2, #1
24000d36:	e782      	b.n	24000c3e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
24000d38:	2300      	movs	r3, #0
24000d3a:	e7c2      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d3c:	2301      	movs	r3, #1
24000d3e:	e7c0      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d40:	2302      	movs	r3, #2
24000d42:	e7be      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d44:	2303      	movs	r3, #3
24000d46:	e7bc      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d48:	2304      	movs	r3, #4
24000d4a:	e7ba      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d4c:	2305      	movs	r3, #5
24000d4e:	e7b8      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d50:	2306      	movs	r3, #6
24000d52:	e7b6      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d54:	2307      	movs	r3, #7
24000d56:	e7b4      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d58:	2308      	movs	r3, #8
24000d5a:	e7b2      	b.n	24000cc2 <HAL_GPIO_DeInit+0x9a>
24000d5c:	58020000 	.word	0x58020000

24000d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24000d60:	b10a      	cbz	r2, 24000d66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24000d62:	6181      	str	r1, [r0, #24]
  }
}
24000d64:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24000d66:	0409      	lsls	r1, r1, #16
24000d68:	e7fb      	b.n	24000d62 <HAL_GPIO_WritePin+0x2>
	...

24000d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24000d6c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24000d6e:	4c10      	ldr	r4, [pc, #64]	@ (24000db0 <HAL_PWREx_ConfigSupply+0x44>)
24000d70:	68e3      	ldr	r3, [r4, #12]
24000d72:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24000d76:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24000d78:	d105      	bne.n	24000d86 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24000d7a:	f003 0307 	and.w	r3, r3, #7
24000d7e:	1a18      	subs	r0, r3, r0
24000d80:	bf18      	it	ne
24000d82:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24000d84:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24000d86:	f023 0307 	bic.w	r3, r3, #7
24000d8a:	4318      	orrs	r0, r3
24000d8c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
24000d8e:	f7ff fbcf 	bl	24000530 <HAL_GetTick>
24000d92:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24000d94:	6863      	ldr	r3, [r4, #4]
24000d96:	049b      	lsls	r3, r3, #18
24000d98:	d501      	bpl.n	24000d9e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
24000d9a:	2000      	movs	r0, #0
24000d9c:	e7f2      	b.n	24000d84 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24000d9e:	f7ff fbc7 	bl	24000530 <HAL_GetTick>
24000da2:	1b40      	subs	r0, r0, r5
24000da4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
24000da8:	d9f4      	bls.n	24000d94 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
24000daa:	2001      	movs	r0, #1
24000dac:	e7ea      	b.n	24000d84 <HAL_PWREx_ConfigSupply+0x18>
24000dae:	bf00      	nop
24000db0:	58024800 	.word	0x58024800

24000db4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24000db8:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
24000dba:	b136      	cbz	r6, 24000dca <QSPI_Config+0x16>
24000dbc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
24000dc0:	d003      	beq.n	24000dca <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24000dc2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
24000dc4:	6804      	ldr	r4, [r0, #0]
24000dc6:	3b01      	subs	r3, #1
24000dc8:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24000dca:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24000dce:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24000dd2:	f1ba 0f00 	cmp.w	sl, #0
24000dd6:	d04c      	beq.n	24000e72 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000dd8:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24000dda:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000ddc:	ea4f 4c84 	mov.w	ip, r4, lsl #18
24000de0:	ea4a 0406 	orr.w	r4, sl, r6
24000de4:	680b      	ldr	r3, [r1, #0]
24000de6:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
24000dea:	ea44 0a02 	orr.w	sl, r4, r2
24000dee:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24000df2:	f1be 0f00 	cmp.w	lr, #0
24000df6:	d024      	beq.n	24000e42 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24000df8:	688e      	ldr	r6, [r1, #8]
24000dfa:	ea4a 040e 	orr.w	r4, sl, lr
24000dfe:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e00:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24000e02:	b19f      	cbz	r7, 24000e2c <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e04:	433b      	orrs	r3, r7
24000e06:	4303      	orrs	r3, r0
24000e08:	68c8      	ldr	r0, [r1, #12]
24000e0a:	ea43 0309 	orr.w	r3, r3, r9
24000e0e:	ea43 0308 	orr.w	r3, r3, r8
24000e12:	4333      	orrs	r3, r6
24000e14:	4303      	orrs	r3, r0
24000e16:	ea43 030c 	orr.w	r3, r3, ip
24000e1a:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000e1c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e20:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000e22:	d001      	beq.n	24000e28 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24000e24:	684b      	ldr	r3, [r1, #4]
24000e26:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
24000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e2c:	4303      	orrs	r3, r0
24000e2e:	ea43 0309 	orr.w	r3, r3, r9
24000e32:	ea43 0308 	orr.w	r3, r3, r8
24000e36:	4333      	orrs	r3, r6
24000e38:	ea43 030c 	orr.w	r3, r3, ip
24000e3c:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e3e:	616b      	str	r3, [r5, #20]
24000e40:	e7f2      	b.n	24000e28 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24000e42:	b167      	cbz	r7, 24000e5e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e44:	433b      	orrs	r3, r7
24000e46:	4303      	orrs	r3, r0
24000e48:	68c8      	ldr	r0, [r1, #12]
24000e4a:	ea43 0309 	orr.w	r3, r3, r9
24000e4e:	ea43 0308 	orr.w	r3, r3, r8
24000e52:	4303      	orrs	r3, r0
24000e54:	ea43 030c 	orr.w	r3, r3, ip
24000e58:	ea43 030a 	orr.w	r3, r3, sl
24000e5c:	e7de      	b.n	24000e1c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e5e:	4303      	orrs	r3, r0
24000e60:	ea43 0309 	orr.w	r3, r3, r9
24000e64:	ea43 0408 	orr.w	r4, r3, r8
24000e68:	ea44 030c 	orr.w	r3, r4, ip
24000e6c:	ea43 030a 	orr.w	r3, r3, sl
24000e70:	e7e5      	b.n	24000e3e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24000e72:	f1be 0f00 	cmp.w	lr, #0
24000e76:	d02c      	beq.n	24000ed2 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24000e78:	ea46 050e 	orr.w	r5, r6, lr
24000e7c:	688b      	ldr	r3, [r1, #8]
24000e7e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e80:	694e      	ldr	r6, [r1, #20]
24000e82:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24000e84:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e86:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e8a:	04b6      	lsls	r6, r6, #18
24000e8c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e8e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24000e92:	b1a7      	cbz	r7, 24000ebe <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e94:	433b      	orrs	r3, r7
24000e96:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000e98:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000e9c:	ea43 0308 	orr.w	r3, r3, r8
24000ea0:	ea43 030e 	orr.w	r3, r3, lr
24000ea4:	ea43 030c 	orr.w	r3, r3, ip
24000ea8:	ea43 0300 	orr.w	r3, r3, r0
24000eac:	ea43 0306 	orr.w	r3, r3, r6
24000eb0:	ea43 0305 	orr.w	r3, r3, r5
24000eb4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000eb6:	d0b7      	beq.n	24000e28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24000eb8:	684b      	ldr	r3, [r1, #4]
24000eba:	61a3      	str	r3, [r4, #24]
24000ebc:	e7b4      	b.n	24000e28 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000ebe:	ea43 0308 	orr.w	r3, r3, r8
24000ec2:	ea43 030e 	orr.w	r3, r3, lr
24000ec6:	ea43 030c 	orr.w	r3, r3, ip
24000eca:	4333      	orrs	r3, r6
24000ecc:	432b      	orrs	r3, r5
24000ece:	6163      	str	r3, [r4, #20]
24000ed0:	e7aa      	b.n	24000e28 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24000ed2:	b1d7      	cbz	r7, 24000f0a <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000ed4:	ea46 0307 	orr.w	r3, r6, r7
24000ed8:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
24000eda:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000edc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000ee0:	ea43 0302 	orr.w	r3, r3, r2
24000ee4:	ea43 0304 	orr.w	r3, r3, r4
24000ee8:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
24000eea:	ea43 0304 	orr.w	r3, r3, r4
24000eee:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
24000ef0:	ea43 0304 	orr.w	r3, r3, r4
24000ef4:	68cc      	ldr	r4, [r1, #12]
24000ef6:	ea43 0304 	orr.w	r3, r3, r4
24000efa:	694c      	ldr	r4, [r1, #20]
24000efc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
24000f00:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24000f02:	d091      	beq.n	24000e28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24000f04:	684b      	ldr	r3, [r1, #4]
24000f06:	6183      	str	r3, [r0, #24]
24000f08:	e78e      	b.n	24000e28 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
24000f0a:	2e00      	cmp	r6, #0
24000f0c:	d08c      	beq.n	24000e28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24000f0e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
24000f10:	6800      	ldr	r0, [r0, #0]
24000f12:	4333      	orrs	r3, r6
24000f14:	4313      	orrs	r3, r2
24000f16:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
24000f18:	4313      	orrs	r3, r2
24000f1a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
24000f1c:	4313      	orrs	r3, r2
24000f1e:	694a      	ldr	r2, [r1, #20]
24000f20:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
24000f24:	6143      	str	r3, [r0, #20]
}
24000f26:	e77f      	b.n	24000e28 <QSPI_Config+0x74>

24000f28 <QSPI_WaitFlagStateUntilTimeout>:
{
24000f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24000f2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
24000f30:	4604      	mov	r4, r0
24000f32:	460e      	mov	r6, r1
24000f34:	4615      	mov	r5, r2
24000f36:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24000f38:	6822      	ldr	r2, [r4, #0]
24000f3a:	6893      	ldr	r3, [r2, #8]
24000f3c:	4233      	tst	r3, r6
24000f3e:	bf14      	ite	ne
24000f40:	2301      	movne	r3, #1
24000f42:	2300      	moveq	r3, #0
24000f44:	42ab      	cmp	r3, r5
24000f46:	d101      	bne.n	24000f4c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
24000f48:	2000      	movs	r0, #0
24000f4a:	e012      	b.n	24000f72 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
24000f4c:	f1b8 3fff 	cmp.w	r8, #4294967295
24000f50:	d0f3      	beq.n	24000f3a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24000f52:	f7ff faed 	bl	24000530 <HAL_GetTick>
24000f56:	1bc0      	subs	r0, r0, r7
24000f58:	4540      	cmp	r0, r8
24000f5a:	d802      	bhi.n	24000f62 <QSPI_WaitFlagStateUntilTimeout+0x3a>
24000f5c:	f1b8 0f00 	cmp.w	r8, #0
24000f60:	d1ea      	bne.n	24000f38 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24000f62:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24000f64:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24000f66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24000f6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
24000f6c:	f043 0301 	orr.w	r3, r3, #1
24000f70:	6463      	str	r3, [r4, #68]	@ 0x44
}
24000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

24000f78 <HAL_QSPI_Init>:
{
24000f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
24000f7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24000f7c:	f7ff fad8 	bl	24000530 <HAL_GetTick>
24000f80:	4605      	mov	r5, r0
  if(hqspi == NULL)
24000f82:	2c00      	cmp	r4, #0
24000f84:	d03f      	beq.n	24001006 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
24000f86:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
24000f8a:	b92b      	cbnz	r3, 24000f98 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
24000f8c:	4620      	mov	r0, r4
24000f8e:	f7ff fb87 	bl	240006a0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
24000f92:	f241 3388 	movw	r3, #5000	@ 0x1388
24000f96:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24000f98:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24000f9a:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24000f9c:	68a3      	ldr	r3, [r4, #8]
24000f9e:	680a      	ldr	r2, [r1, #0]
24000fa0:	3b01      	subs	r3, #1
24000fa2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
24000fa6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24000faa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24000fac:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24000fae:	2200      	movs	r2, #0
24000fb0:	9300      	str	r3, [sp, #0]
24000fb2:	2120      	movs	r1, #32
24000fb4:	462b      	mov	r3, r5
24000fb6:	f7ff ffb7 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
24000fba:	bb10      	cbnz	r0, 24001002 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24000fbc:	6822      	ldr	r2, [r4, #0]
24000fbe:	69e5      	ldr	r5, [r4, #28]
24000fc0:	68e3      	ldr	r3, [r4, #12]
24000fc2:	6811      	ldr	r1, [r2, #0]
24000fc4:	432b      	orrs	r3, r5
24000fc6:	6a25      	ldr	r5, [r4, #32]
24000fc8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
24000fcc:	432b      	orrs	r3, r5
24000fce:	6865      	ldr	r5, [r4, #4]
24000fd0:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
24000fd4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
24000fd8:	430b      	orrs	r3, r1
24000fda:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24000fdc:	6855      	ldr	r5, [r2, #4]
24000fde:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
24000fe2:	430b      	orrs	r3, r1
24000fe4:	6921      	ldr	r1, [r4, #16]
24000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24000fea:	4908      	ldr	r1, [pc, #32]	@ (2400100c <HAL_QSPI_Init+0x94>)
24000fec:	4029      	ands	r1, r5
24000fee:	430b      	orrs	r3, r1
24000ff0:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
24000ff2:	6813      	ldr	r3, [r2, #0]
24000ff4:	f043 0301 	orr.w	r3, r3, #1
24000ff8:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
24000ffa:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24000ffc:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
24000ffe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
24001002:	b003      	add	sp, #12
24001004:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
24001006:	2001      	movs	r0, #1
24001008:	e7fb      	b.n	24001002 <HAL_QSPI_Init+0x8a>
2400100a:	bf00      	nop
2400100c:	ffe0f8fe 	.word	0xffe0f8fe

24001010 <HAL_QSPI_DeInit>:
{
24001010:	b510      	push	{r4, lr}
  if(hqspi == NULL)
24001012:	4604      	mov	r4, r0
24001014:	b158      	cbz	r0, 2400102e <HAL_QSPI_DeInit+0x1e>
  __HAL_QSPI_DISABLE(hqspi);
24001016:	6802      	ldr	r2, [r0, #0]
24001018:	6813      	ldr	r3, [r2, #0]
2400101a:	f023 0301 	bic.w	r3, r3, #1
2400101e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
24001020:	f7ff fbf0 	bl	24000804 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001024:	2000      	movs	r0, #0
24001026:	6460      	str	r0, [r4, #68]	@ 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
24001028:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
}
2400102c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
2400102e:	2001      	movs	r0, #1
24001030:	e7fc      	b.n	2400102c <HAL_QSPI_DeInit+0x1c>

24001032 <HAL_QSPI_Command>:
{
24001032:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
24001036:	4604      	mov	r4, r0
24001038:	468a      	mov	sl, r1
2400103a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
2400103c:	f7ff fa78 	bl	24000530 <HAL_GetTick>
  __HAL_LOCK(hqspi);
24001040:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
24001044:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
24001046:	2b01      	cmp	r3, #1
24001048:	d036      	beq.n	240010b8 <HAL_QSPI_Command+0x86>
2400104a:	2301      	movs	r3, #1
2400104c:	2602      	movs	r6, #2
2400104e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
24001052:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
24001056:	2b01      	cmp	r3, #1
24001058:	fa5f f983 	uxtb.w	r9, r3
2400105c:	d128      	bne.n	240010b0 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2400105e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24001060:	4603      	mov	r3, r0
24001062:	2120      	movs	r1, #32
24001064:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001066:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
24001068:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2400106c:	f8cd 8000 	str.w	r8, [sp]
24001070:	f7ff ff5a 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
24001074:	4605      	mov	r5, r0
24001076:	b9a0      	cbnz	r0, 240010a2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24001078:	4602      	mov	r2, r0
2400107a:	4651      	mov	r1, sl
2400107c:	4620      	mov	r0, r4
2400107e:	f7ff fe99 	bl	24000db4 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
24001082:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
24001086:	b953      	cbnz	r3, 2400109e <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24001088:	463b      	mov	r3, r7
2400108a:	464a      	mov	r2, r9
2400108c:	4631      	mov	r1, r6
2400108e:	4620      	mov	r0, r4
24001090:	f8cd 8000 	str.w	r8, [sp]
24001094:	f7ff ff48 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
24001098:	b960      	cbnz	r0, 240010b4 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2400109a:	6823      	ldr	r3, [r4, #0]
2400109c:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
2400109e:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
240010a2:	2300      	movs	r3, #0
240010a4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
240010a8:	4628      	mov	r0, r5
240010aa:	b002      	add	sp, #8
240010ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
240010b0:	4635      	mov	r5, r6
240010b2:	e7f6      	b.n	240010a2 <HAL_QSPI_Command+0x70>
240010b4:	4605      	mov	r5, r0
240010b6:	e7f4      	b.n	240010a2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
240010b8:	2502      	movs	r5, #2
240010ba:	e7f5      	b.n	240010a8 <HAL_QSPI_Command+0x76>

240010bc <HAL_QSPI_Transmit>:
{
240010bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
240010c0:	4604      	mov	r4, r0
240010c2:	4688      	mov	r8, r1
240010c4:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
240010c6:	f7ff fa33 	bl	24000530 <HAL_GetTick>
  __HAL_LOCK(hqspi);
240010ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
240010ce:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
240010d0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
240010d2:	2b01      	cmp	r3, #1
240010d4:	d04c      	beq.n	24001170 <HAL_QSPI_Transmit+0xb4>
240010d6:	2301      	movs	r3, #1
240010d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
240010dc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
240010e0:	2b01      	cmp	r3, #1
240010e2:	b2d8      	uxtb	r0, r3
240010e4:	d142      	bne.n	2400116c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240010e6:	2300      	movs	r3, #0
240010e8:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
240010ea:	f1b8 0f00 	cmp.w	r8, #0
240010ee:	d038      	beq.n	24001162 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
240010f0:	2312      	movs	r3, #18
240010f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
240010f6:	692b      	ldr	r3, [r5, #16]
240010f8:	3301      	adds	r3, #1
240010fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
240010fc:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
240010fe:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24001102:	3301      	adds	r3, #1
24001104:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24001106:	696b      	ldr	r3, [r5, #20]
24001108:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
2400110c:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
2400110e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001110:	b99b      	cbnz	r3, 2400113a <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24001112:	4633      	mov	r3, r6
24001114:	2201      	movs	r2, #1
24001116:	2102      	movs	r1, #2
24001118:	4620      	mov	r0, r4
2400111a:	9700      	str	r7, [sp, #0]
2400111c:	f7ff ff04 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
24001120:	b910      	cbnz	r0, 24001128 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24001122:	6823      	ldr	r3, [r4, #0]
24001124:	2202      	movs	r2, #2
24001126:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
24001128:	2301      	movs	r3, #1
2400112a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
2400112e:	2300      	movs	r3, #0
24001130:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
24001134:	b002      	add	sp, #8
24001136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
2400113a:	4633      	mov	r3, r6
2400113c:	2201      	movs	r2, #1
2400113e:	2104      	movs	r1, #4
24001140:	4620      	mov	r0, r4
24001142:	9700      	str	r7, [sp, #0]
24001144:	f7ff fef0 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
24001148:	2800      	cmp	r0, #0
2400114a:	d1ed      	bne.n	24001128 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
2400114c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
2400114e:	781b      	ldrb	r3, [r3, #0]
24001150:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
24001154:	6a63      	ldr	r3, [r4, #36]	@ 0x24
24001156:	3301      	adds	r3, #1
24001158:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
2400115a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
2400115c:	3b01      	subs	r3, #1
2400115e:	62e3      	str	r3, [r4, #44]	@ 0x2c
24001160:	e7d5      	b.n	2400110e <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24001162:	6c63      	ldr	r3, [r4, #68]	@ 0x44
24001164:	f043 0308 	orr.w	r3, r3, #8
24001168:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
2400116a:	e7e0      	b.n	2400112e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
2400116c:	2002      	movs	r0, #2
2400116e:	e7de      	b.n	2400112e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
24001170:	2002      	movs	r0, #2
24001172:	e7df      	b.n	24001134 <HAL_QSPI_Transmit+0x78>

24001174 <HAL_QSPI_AutoPolling>:
{
24001174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24001178:	4604      	mov	r4, r0
2400117a:	461f      	mov	r7, r3
2400117c:	4689      	mov	r9, r1
2400117e:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
24001180:	f7ff f9d6 	bl	24000530 <HAL_GetTick>
  __HAL_LOCK(hqspi);
24001184:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
24001188:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
2400118a:	2b01      	cmp	r3, #1
2400118c:	d041      	beq.n	24001212 <HAL_QSPI_AutoPolling+0x9e>
2400118e:	2301      	movs	r3, #1
24001190:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
24001194:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
24001198:	2b01      	cmp	r3, #1
2400119a:	fa5f f883 	uxtb.w	r8, r3
2400119e:	d136      	bne.n	2400120e <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
240011a0:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240011a2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
240011a4:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240011a6:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
240011a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
240011ac:	4603      	mov	r3, r0
240011ae:	9700      	str	r7, [sp, #0]
240011b0:	4620      	mov	r0, r4
240011b2:	f7ff feb9 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
240011b6:	bb20      	cbnz	r0, 24001202 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
240011b8:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240011ba:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
240011bc:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240011be:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
240011c0:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
240011c2:	686b      	ldr	r3, [r5, #4]
240011c4:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
240011c6:	68ab      	ldr	r3, [r5, #8]
240011c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240011ca:	6813      	ldr	r3, [r2, #0]
240011cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
240011d0:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240011d2:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240011d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
240011d8:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240011da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
240011de:	68eb      	ldr	r3, [r5, #12]
240011e0:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240011e4:	f7ff fde6 	bl	24000db4 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
240011e8:	4633      	mov	r3, r6
240011ea:	4642      	mov	r2, r8
240011ec:	2108      	movs	r1, #8
240011ee:	4620      	mov	r0, r4
240011f0:	9700      	str	r7, [sp, #0]
240011f2:	f7ff fe99 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
240011f6:	b920      	cbnz	r0, 24001202 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
240011f8:	6823      	ldr	r3, [r4, #0]
240011fa:	2208      	movs	r2, #8
240011fc:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
240011fe:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
24001202:	2300      	movs	r3, #0
24001204:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
24001208:	b003      	add	sp, #12
2400120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
2400120e:	2002      	movs	r0, #2
24001210:	e7f7      	b.n	24001202 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
24001212:	2002      	movs	r0, #2
24001214:	e7f8      	b.n	24001208 <HAL_QSPI_AutoPolling+0x94>

24001216 <HAL_QSPI_MemoryMapped>:
{
24001216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
24001218:	4604      	mov	r4, r0
2400121a:	4616      	mov	r6, r2
2400121c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
2400121e:	f7ff f987 	bl	24000530 <HAL_GetTick>
  __HAL_LOCK(hqspi);
24001222:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
24001226:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
24001228:	2a01      	cmp	r2, #1
2400122a:	d033      	beq.n	24001294 <HAL_QSPI_MemoryMapped+0x7e>
2400122c:	2201      	movs	r2, #1
2400122e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
24001232:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
24001236:	2a01      	cmp	r2, #1
24001238:	d12a      	bne.n	24001290 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2400123a:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2400123c:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2400123e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001240:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
24001242:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24001246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
24001248:	9100      	str	r1, [sp, #0]
2400124a:	2120      	movs	r1, #32
2400124c:	f7ff fe6c 	bl	24000f28 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
24001250:	4605      	mov	r5, r0
24001252:	b9b8      	cbnz	r0, 24001284 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
24001254:	6823      	ldr	r3, [r4, #0]
24001256:	6872      	ldr	r2, [r6, #4]
24001258:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
2400125a:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2400125c:	f020 0008 	bic.w	r0, r0, #8
24001260:	ea40 0002 	orr.w	r0, r0, r2
24001264:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
24001266:	d107      	bne.n	24001278 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
24001268:	6832      	ldr	r2, [r6, #0]
2400126a:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
2400126c:	2210      	movs	r2, #16
2400126e:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
24001270:	681a      	ldr	r2, [r3, #0]
24001272:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
24001276:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
24001278:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
2400127c:	4639      	mov	r1, r7
2400127e:	4620      	mov	r0, r4
24001280:	f7ff fd98 	bl	24000db4 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
24001284:	2300      	movs	r3, #0
24001286:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
2400128a:	4628      	mov	r0, r5
2400128c:	b003      	add	sp, #12
2400128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
24001290:	2502      	movs	r5, #2
24001292:	e7f7      	b.n	24001284 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
24001294:	2502      	movs	r5, #2
24001296:	e7f8      	b.n	2400128a <HAL_QSPI_MemoryMapped+0x74>

24001298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2400129a:	4604      	mov	r4, r0
2400129c:	2800      	cmp	r0, #0
2400129e:	d074      	beq.n	2400138a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240012a0:	6803      	ldr	r3, [r0, #0]
240012a2:	07d8      	lsls	r0, r3, #31
240012a4:	d45e      	bmi.n	24001364 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240012a6:	6823      	ldr	r3, [r4, #0]
240012a8:	0799      	lsls	r1, r3, #30
240012aa:	f100 80ad 	bmi.w	24001408 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240012ae:	6823      	ldr	r3, [r4, #0]
240012b0:	06da      	lsls	r2, r3, #27
240012b2:	d527      	bpl.n	24001304 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240012b4:	4a9c      	ldr	r2, [pc, #624]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
240012b6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240012b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240012ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240012be:	2b08      	cmp	r3, #8
240012c0:	d007      	beq.n	240012d2 <HAL_RCC_OscConfig+0x3a>
240012c2:	2b18      	cmp	r3, #24
240012c4:	f040 8103 	bne.w	240014ce <HAL_RCC_OscConfig+0x236>
240012c8:	f001 0303 	and.w	r3, r1, #3
240012cc:	2b01      	cmp	r3, #1
240012ce:	f040 80fe 	bne.w	240014ce <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240012d2:	6813      	ldr	r3, [r2, #0]
240012d4:	05db      	lsls	r3, r3, #23
240012d6:	d502      	bpl.n	240012de <HAL_RCC_OscConfig+0x46>
240012d8:	69e3      	ldr	r3, [r4, #28]
240012da:	2b80      	cmp	r3, #128	@ 0x80
240012dc:	d155      	bne.n	2400138a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240012de:	f7ff fba3 	bl	24000a28 <HAL_GetREVID>
240012e2:	f241 0303 	movw	r3, #4099	@ 0x1003
240012e6:	6a21      	ldr	r1, [r4, #32]
240012e8:	4298      	cmp	r0, r3
240012ea:	4b8f      	ldr	r3, [pc, #572]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
240012ec:	f200 80e8 	bhi.w	240014c0 <HAL_RCC_OscConfig+0x228>
240012f0:	685a      	ldr	r2, [r3, #4]
240012f2:	2920      	cmp	r1, #32
240012f4:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
240012f8:	bf0c      	ite	eq
240012fa:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
240012fe:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
24001302:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24001304:	6823      	ldr	r3, [r4, #0]
24001306:	0719      	lsls	r1, r3, #28
24001308:	f100 8123 	bmi.w	24001552 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2400130c:	6823      	ldr	r3, [r4, #0]
2400130e:	069a      	lsls	r2, r3, #26
24001310:	f100 8144 	bmi.w	2400159c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24001314:	6823      	ldr	r3, [r4, #0]
24001316:	075d      	lsls	r5, r3, #29
24001318:	d51e      	bpl.n	24001358 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2400131a:	4d84      	ldr	r5, [pc, #528]	@ (2400152c <HAL_RCC_OscConfig+0x294>)
2400131c:	682b      	ldr	r3, [r5, #0]
2400131e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24001322:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24001324:	f7ff f904 	bl	24000530 <HAL_GetTick>
24001328:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400132a:	682b      	ldr	r3, [r5, #0]
2400132c:	05da      	lsls	r2, r3, #23
2400132e:	f140 815a 	bpl.w	240015e6 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24001332:	68a3      	ldr	r3, [r4, #8]
24001334:	4d7c      	ldr	r5, [pc, #496]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
24001336:	2b01      	cmp	r3, #1
24001338:	f040 815c 	bne.w	240015f4 <HAL_RCC_OscConfig+0x35c>
2400133c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
2400133e:	f043 0301 	orr.w	r3, r3, #1
24001342:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24001344:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
24001348:	f7ff f8f2 	bl	24000530 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400134c:	4e76      	ldr	r6, [pc, #472]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
2400134e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24001350:	6f33      	ldr	r3, [r6, #112]	@ 0x70
24001352:	079b      	lsls	r3, r3, #30
24001354:	f140 8174 	bpl.w	24001640 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24001358:	6a61      	ldr	r1, [r4, #36]	@ 0x24
2400135a:	2900      	cmp	r1, #0
2400135c:	f040 8177 	bne.w	2400164e <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
24001360:	2000      	movs	r0, #0
24001362:	e02b      	b.n	240013bc <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24001364:	4a70      	ldr	r2, [pc, #448]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
24001366:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24001368:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400136a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2400136e:	2b10      	cmp	r3, #16
24001370:	d005      	beq.n	2400137e <HAL_RCC_OscConfig+0xe6>
24001372:	2b18      	cmp	r3, #24
24001374:	d10b      	bne.n	2400138e <HAL_RCC_OscConfig+0xf6>
24001376:	f001 0303 	and.w	r3, r1, #3
2400137a:	2b02      	cmp	r3, #2
2400137c:	d107      	bne.n	2400138e <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2400137e:	6813      	ldr	r3, [r2, #0]
24001380:	039a      	lsls	r2, r3, #14
24001382:	d590      	bpl.n	240012a6 <HAL_RCC_OscConfig+0xe>
24001384:	6863      	ldr	r3, [r4, #4]
24001386:	2b00      	cmp	r3, #0
24001388:	d18d      	bne.n	240012a6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
2400138a:	2001      	movs	r0, #1
2400138c:	e016      	b.n	240013bc <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400138e:	6863      	ldr	r3, [r4, #4]
24001390:	4d65      	ldr	r5, [pc, #404]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
24001392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24001396:	d112      	bne.n	240013be <HAL_RCC_OscConfig+0x126>
24001398:	682b      	ldr	r3, [r5, #0]
2400139a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2400139e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240013a0:	f7ff f8c6 	bl	24000530 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240013a4:	4e60      	ldr	r6, [pc, #384]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
240013a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240013a8:	6833      	ldr	r3, [r6, #0]
240013aa:	039b      	lsls	r3, r3, #14
240013ac:	f53f af7b 	bmi.w	240012a6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240013b0:	f7ff f8be 	bl	24000530 <HAL_GetTick>
240013b4:	1b40      	subs	r0, r0, r5
240013b6:	2864      	cmp	r0, #100	@ 0x64
240013b8:	d9f6      	bls.n	240013a8 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
240013ba:	2003      	movs	r0, #3
}
240013bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240013be:	b9a3      	cbnz	r3, 240013ea <HAL_RCC_OscConfig+0x152>
240013c0:	682b      	ldr	r3, [r5, #0]
240013c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240013c6:	602b      	str	r3, [r5, #0]
240013c8:	682b      	ldr	r3, [r5, #0]
240013ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
240013ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240013d0:	f7ff f8ae 	bl	24000530 <HAL_GetTick>
240013d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240013d6:	682b      	ldr	r3, [r5, #0]
240013d8:	039f      	lsls	r7, r3, #14
240013da:	f57f af64 	bpl.w	240012a6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240013de:	f7ff f8a7 	bl	24000530 <HAL_GetTick>
240013e2:	1b80      	subs	r0, r0, r6
240013e4:	2864      	cmp	r0, #100	@ 0x64
240013e6:	d9f6      	bls.n	240013d6 <HAL_RCC_OscConfig+0x13e>
240013e8:	e7e7      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240013ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
240013ee:	682b      	ldr	r3, [r5, #0]
240013f0:	d103      	bne.n	240013fa <HAL_RCC_OscConfig+0x162>
240013f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
240013f6:	602b      	str	r3, [r5, #0]
240013f8:	e7ce      	b.n	24001398 <HAL_RCC_OscConfig+0x100>
240013fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240013fe:	602b      	str	r3, [r5, #0]
24001400:	682b      	ldr	r3, [r5, #0]
24001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
24001406:	e7ca      	b.n	2400139e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24001408:	4947      	ldr	r1, [pc, #284]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
2400140a:	68e2      	ldr	r2, [r4, #12]
2400140c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400140e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24001410:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
24001414:	d003      	beq.n	2400141e <HAL_RCC_OscConfig+0x186>
24001416:	2b18      	cmp	r3, #24
24001418:	d12a      	bne.n	24001470 <HAL_RCC_OscConfig+0x1d8>
2400141a:	0780      	lsls	r0, r0, #30
2400141c:	d128      	bne.n	24001470 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400141e:	680b      	ldr	r3, [r1, #0]
24001420:	075b      	lsls	r3, r3, #29
24001422:	d501      	bpl.n	24001428 <HAL_RCC_OscConfig+0x190>
24001424:	2a00      	cmp	r2, #0
24001426:	d0b0      	beq.n	2400138a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24001428:	4d3f      	ldr	r5, [pc, #252]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
2400142a:	682b      	ldr	r3, [r5, #0]
2400142c:	f023 0319 	bic.w	r3, r3, #25
24001430:	4313      	orrs	r3, r2
24001432:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24001434:	f7ff f87c 	bl	24000530 <HAL_GetTick>
24001438:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400143a:	682b      	ldr	r3, [r5, #0]
2400143c:	075f      	lsls	r7, r3, #29
2400143e:	d511      	bpl.n	24001464 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24001440:	f7ff faf2 	bl	24000a28 <HAL_GetREVID>
24001444:	f241 0303 	movw	r3, #4099	@ 0x1003
24001448:	6922      	ldr	r2, [r4, #16]
2400144a:	4298      	cmp	r0, r3
2400144c:	686b      	ldr	r3, [r5, #4]
2400144e:	d822      	bhi.n	24001496 <HAL_RCC_OscConfig+0x1fe>
24001450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
24001454:	2a40      	cmp	r2, #64	@ 0x40
24001456:	bf0c      	ite	eq
24001458:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
2400145c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24001460:	606b      	str	r3, [r5, #4]
24001462:	e724      	b.n	240012ae <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24001464:	f7ff f864 	bl	24000530 <HAL_GetTick>
24001468:	1b80      	subs	r0, r0, r6
2400146a:	2802      	cmp	r0, #2
2400146c:	d9e5      	bls.n	2400143a <HAL_RCC_OscConfig+0x1a2>
2400146e:	e7a4      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24001470:	4d2d      	ldr	r5, [pc, #180]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24001472:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24001474:	b1a2      	cbz	r2, 240014a0 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24001476:	f023 0319 	bic.w	r3, r3, #25
2400147a:	4313      	orrs	r3, r2
2400147c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400147e:	f7ff f857 	bl	24000530 <HAL_GetTick>
24001482:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24001484:	682b      	ldr	r3, [r5, #0]
24001486:	0758      	lsls	r0, r3, #29
24001488:	d4da      	bmi.n	24001440 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400148a:	f7ff f851 	bl	24000530 <HAL_GetTick>
2400148e:	1b80      	subs	r0, r0, r6
24001490:	2802      	cmp	r0, #2
24001492:	d9f7      	bls.n	24001484 <HAL_RCC_OscConfig+0x1ec>
24001494:	e791      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24001496:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
2400149a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400149e:	e7df      	b.n	24001460 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
240014a0:	f023 0301 	bic.w	r3, r3, #1
240014a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240014a6:	f7ff f843 	bl	24000530 <HAL_GetTick>
240014aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240014ac:	682b      	ldr	r3, [r5, #0]
240014ae:	0759      	lsls	r1, r3, #29
240014b0:	f57f aefd 	bpl.w	240012ae <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240014b4:	f7ff f83c 	bl	24000530 <HAL_GetTick>
240014b8:	1b80      	subs	r0, r0, r6
240014ba:	2802      	cmp	r0, #2
240014bc:	d9f6      	bls.n	240014ac <HAL_RCC_OscConfig+0x214>
240014be:	e77c      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240014c0:	68da      	ldr	r2, [r3, #12]
240014c2:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
240014c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
240014ca:	60da      	str	r2, [r3, #12]
240014cc:	e71a      	b.n	24001304 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
240014ce:	69e3      	ldr	r3, [r4, #28]
240014d0:	4d15      	ldr	r5, [pc, #84]	@ (24001528 <HAL_RCC_OscConfig+0x290>)
240014d2:	b36b      	cbz	r3, 24001530 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
240014d4:	682b      	ldr	r3, [r5, #0]
240014d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
240014da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240014dc:	f7ff f828 	bl	24000530 <HAL_GetTick>
240014e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240014e2:	682b      	ldr	r3, [r5, #0]
240014e4:	05df      	lsls	r7, r3, #23
240014e6:	d511      	bpl.n	2400150c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240014e8:	f7ff fa9e 	bl	24000a28 <HAL_GetREVID>
240014ec:	f241 0303 	movw	r3, #4099	@ 0x1003
240014f0:	6a22      	ldr	r2, [r4, #32]
240014f2:	4298      	cmp	r0, r3
240014f4:	d810      	bhi.n	24001518 <HAL_RCC_OscConfig+0x280>
240014f6:	686b      	ldr	r3, [r5, #4]
240014f8:	2a20      	cmp	r2, #32
240014fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
240014fe:	bf0c      	ite	eq
24001500:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
24001504:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24001508:	606b      	str	r3, [r5, #4]
2400150a:	e6fb      	b.n	24001304 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400150c:	f7ff f810 	bl	24000530 <HAL_GetTick>
24001510:	1b80      	subs	r0, r0, r6
24001512:	2802      	cmp	r0, #2
24001514:	d9e5      	bls.n	240014e2 <HAL_RCC_OscConfig+0x24a>
24001516:	e750      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24001518:	68eb      	ldr	r3, [r5, #12]
2400151a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
2400151e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24001522:	60eb      	str	r3, [r5, #12]
24001524:	e6ee      	b.n	24001304 <HAL_RCC_OscConfig+0x6c>
24001526:	bf00      	nop
24001528:	58024400 	.word	0x58024400
2400152c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
24001530:	682b      	ldr	r3, [r5, #0]
24001532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
24001536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24001538:	f7fe fffa 	bl	24000530 <HAL_GetTick>
2400153c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2400153e:	682b      	ldr	r3, [r5, #0]
24001540:	05d8      	lsls	r0, r3, #23
24001542:	f57f aedf 	bpl.w	24001304 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24001546:	f7fe fff3 	bl	24000530 <HAL_GetTick>
2400154a:	1b80      	subs	r0, r0, r6
2400154c:	2802      	cmp	r0, #2
2400154e:	d9f6      	bls.n	2400153e <HAL_RCC_OscConfig+0x2a6>
24001550:	e733      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24001552:	6963      	ldr	r3, [r4, #20]
24001554:	4da5      	ldr	r5, [pc, #660]	@ (240017ec <HAL_RCC_OscConfig+0x554>)
24001556:	b183      	cbz	r3, 2400157a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
24001558:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
2400155a:	f043 0301 	orr.w	r3, r3, #1
2400155e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
24001560:	f7fe ffe6 	bl	24000530 <HAL_GetTick>
24001564:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24001566:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
24001568:	079b      	lsls	r3, r3, #30
2400156a:	f53f aecf 	bmi.w	2400130c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2400156e:	f7fe ffdf 	bl	24000530 <HAL_GetTick>
24001572:	1b80      	subs	r0, r0, r6
24001574:	2802      	cmp	r0, #2
24001576:	d9f6      	bls.n	24001566 <HAL_RCC_OscConfig+0x2ce>
24001578:	e71f      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
2400157a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
2400157c:	f023 0301 	bic.w	r3, r3, #1
24001580:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
24001582:	f7fe ffd5 	bl	24000530 <HAL_GetTick>
24001586:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24001588:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
2400158a:	079f      	lsls	r7, r3, #30
2400158c:	f57f aebe 	bpl.w	2400130c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24001590:	f7fe ffce 	bl	24000530 <HAL_GetTick>
24001594:	1b80      	subs	r0, r0, r6
24001596:	2802      	cmp	r0, #2
24001598:	d9f6      	bls.n	24001588 <HAL_RCC_OscConfig+0x2f0>
2400159a:	e70e      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400159c:	69a3      	ldr	r3, [r4, #24]
2400159e:	4d93      	ldr	r5, [pc, #588]	@ (240017ec <HAL_RCC_OscConfig+0x554>)
240015a0:	b183      	cbz	r3, 240015c4 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
240015a2:	682b      	ldr	r3, [r5, #0]
240015a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
240015a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240015aa:	f7fe ffc1 	bl	24000530 <HAL_GetTick>
240015ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240015b0:	682b      	ldr	r3, [r5, #0]
240015b2:	0498      	lsls	r0, r3, #18
240015b4:	f53f aeae 	bmi.w	24001314 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240015b8:	f7fe ffba 	bl	24000530 <HAL_GetTick>
240015bc:	1b80      	subs	r0, r0, r6
240015be:	2802      	cmp	r0, #2
240015c0:	d9f6      	bls.n	240015b0 <HAL_RCC_OscConfig+0x318>
240015c2:	e6fa      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
240015c4:	682b      	ldr	r3, [r5, #0]
240015c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
240015ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240015cc:	f7fe ffb0 	bl	24000530 <HAL_GetTick>
240015d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240015d2:	682b      	ldr	r3, [r5, #0]
240015d4:	0499      	lsls	r1, r3, #18
240015d6:	f57f ae9d 	bpl.w	24001314 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240015da:	f7fe ffa9 	bl	24000530 <HAL_GetTick>
240015de:	1b80      	subs	r0, r0, r6
240015e0:	2802      	cmp	r0, #2
240015e2:	d9f6      	bls.n	240015d2 <HAL_RCC_OscConfig+0x33a>
240015e4:	e6e9      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240015e6:	f7fe ffa3 	bl	24000530 <HAL_GetTick>
240015ea:	1b80      	subs	r0, r0, r6
240015ec:	2864      	cmp	r0, #100	@ 0x64
240015ee:	f67f ae9c 	bls.w	2400132a <HAL_RCC_OscConfig+0x92>
240015f2:	e6e2      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240015f4:	b9b3      	cbnz	r3, 24001624 <HAL_RCC_OscConfig+0x38c>
240015f6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240015f8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240015fc:	f023 0301 	bic.w	r3, r3, #1
24001600:	672b      	str	r3, [r5, #112]	@ 0x70
24001602:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
24001604:	f023 0304 	bic.w	r3, r3, #4
24001608:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
2400160a:	f7fe ff91 	bl	24000530 <HAL_GetTick>
2400160e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24001610:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
24001612:	0798      	lsls	r0, r3, #30
24001614:	f57f aea0 	bpl.w	24001358 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24001618:	f7fe ff8a 	bl	24000530 <HAL_GetTick>
2400161c:	1b80      	subs	r0, r0, r6
2400161e:	42b8      	cmp	r0, r7
24001620:	d9f6      	bls.n	24001610 <HAL_RCC_OscConfig+0x378>
24001622:	e6ca      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24001624:	2b05      	cmp	r3, #5
24001626:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
24001628:	d103      	bne.n	24001632 <HAL_RCC_OscConfig+0x39a>
2400162a:	f043 0304 	orr.w	r3, r3, #4
2400162e:	672b      	str	r3, [r5, #112]	@ 0x70
24001630:	e684      	b.n	2400133c <HAL_RCC_OscConfig+0xa4>
24001632:	f023 0301 	bic.w	r3, r3, #1
24001636:	672b      	str	r3, [r5, #112]	@ 0x70
24001638:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
2400163a:	f023 0304 	bic.w	r3, r3, #4
2400163e:	e680      	b.n	24001342 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24001640:	f7fe ff76 	bl	24000530 <HAL_GetTick>
24001644:	1b40      	subs	r0, r0, r5
24001646:	42b8      	cmp	r0, r7
24001648:	f67f ae82 	bls.w	24001350 <HAL_RCC_OscConfig+0xb8>
2400164c:	e6b5      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2400164e:	4d67      	ldr	r5, [pc, #412]	@ (240017ec <HAL_RCC_OscConfig+0x554>)
24001650:	692b      	ldr	r3, [r5, #16]
24001652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
24001656:	2b18      	cmp	r3, #24
24001658:	d07a      	beq.n	24001750 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
2400165a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400165c:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
2400165e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
24001662:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24001664:	d167      	bne.n	24001736 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
24001666:	f7fe ff63 	bl	24000530 <HAL_GetTick>
2400166a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400166c:	682b      	ldr	r3, [r5, #0]
2400166e:	0199      	lsls	r1, r3, #6
24001670:	d45b      	bmi.n	2400172a <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24001672:	6aab      	ldr	r3, [r5, #40]	@ 0x28
24001674:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
24001676:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
2400167a:	f023 0303 	bic.w	r3, r3, #3
2400167e:	4313      	orrs	r3, r2
24001680:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
24001682:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24001686:	62ab      	str	r3, [r5, #40]	@ 0x28
24001688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2400168a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
2400168c:	3b01      	subs	r3, #1
2400168e:	3a01      	subs	r2, #1
24001690:	025b      	lsls	r3, r3, #9
24001692:	0412      	lsls	r2, r2, #16
24001694:	b29b      	uxth	r3, r3
24001696:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
2400169a:	4313      	orrs	r3, r2
2400169c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
2400169e:	3a01      	subs	r2, #1
240016a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
240016a4:	4313      	orrs	r3, r2
240016a6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
240016a8:	3a01      	subs	r2, #1
240016aa:	0612      	lsls	r2, r2, #24
240016ac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
240016b0:	4313      	orrs	r3, r2
240016b2:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
240016b4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016b6:	f023 0301 	bic.w	r3, r3, #1
240016ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240016bc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
240016be:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
240016c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
240016c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
240016c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240016cc:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
240016ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
240016d2:	f023 030c 	bic.w	r3, r3, #12
240016d6:	4313      	orrs	r3, r2
240016d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
240016da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
240016de:	f023 0302 	bic.w	r3, r3, #2
240016e2:	4313      	orrs	r3, r2
240016e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
240016e6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
240016ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240016ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240016f4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240016f6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240016f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
240016fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
240016fe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
24001700:	f043 0301 	orr.w	r3, r3, #1
24001704:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
24001706:	682b      	ldr	r3, [r5, #0]
24001708:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
2400170c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400170e:	f7fe ff0f 	bl	24000530 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24001712:	4d36      	ldr	r5, [pc, #216]	@ (240017ec <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
24001714:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24001716:	682b      	ldr	r3, [r5, #0]
24001718:	019a      	lsls	r2, r3, #6
2400171a:	f53f ae21 	bmi.w	24001360 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400171e:	f7fe ff07 	bl	24000530 <HAL_GetTick>
24001722:	1b00      	subs	r0, r0, r4
24001724:	2802      	cmp	r0, #2
24001726:	d9f6      	bls.n	24001716 <HAL_RCC_OscConfig+0x47e>
24001728:	e647      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400172a:	f7fe ff01 	bl	24000530 <HAL_GetTick>
2400172e:	1b80      	subs	r0, r0, r6
24001730:	2802      	cmp	r0, #2
24001732:	d99b      	bls.n	2400166c <HAL_RCC_OscConfig+0x3d4>
24001734:	e641      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
24001736:	f7fe fefb 	bl	24000530 <HAL_GetTick>
2400173a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400173c:	682b      	ldr	r3, [r5, #0]
2400173e:	019b      	lsls	r3, r3, #6
24001740:	f57f ae0e 	bpl.w	24001360 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24001744:	f7fe fef4 	bl	24000530 <HAL_GetTick>
24001748:	1b00      	subs	r0, r0, r4
2400174a:	2802      	cmp	r0, #2
2400174c:	d9f6      	bls.n	2400173c <HAL_RCC_OscConfig+0x4a4>
2400174e:	e634      	b.n	240013ba <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24001750:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
24001752:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24001754:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24001756:	f43f ae18 	beq.w	2400138a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400175a:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400175e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
24001760:	4281      	cmp	r1, r0
24001762:	f47f ae12 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24001766:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400176a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
2400176c:	428a      	cmp	r2, r1
2400176e:	f47f ae0c 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24001772:	6b22      	ldr	r2, [r4, #48]	@ 0x30
24001774:	f3c3 0108 	ubfx	r1, r3, #0, #9
24001778:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400177a:	4291      	cmp	r1, r2
2400177c:	f47f ae05 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24001780:	6b62      	ldr	r2, [r4, #52]	@ 0x34
24001782:	f3c3 2146 	ubfx	r1, r3, #9, #7
24001786:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24001788:	4291      	cmp	r1, r2
2400178a:	f47f adfe 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400178e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
24001790:	f3c3 4106 	ubfx	r1, r3, #16, #7
24001794:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24001796:	4291      	cmp	r1, r2
24001798:	f47f adf7 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2400179c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
2400179e:	f3c3 6306 	ubfx	r3, r3, #24, #7
240017a2:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240017a4:	4293      	cmp	r3, r2
240017a6:	f47f adf0 	bne.w	2400138a <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240017aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240017ac:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240017ae:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240017b2:	429a      	cmp	r2, r3
240017b4:	f43f add4 	beq.w	24001360 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
240017b8:	4d0c      	ldr	r5, [pc, #48]	@ (240017ec <HAL_RCC_OscConfig+0x554>)
240017ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240017bc:	f023 0301 	bic.w	r3, r3, #1
240017c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
240017c2:	f7fe feb5 	bl	24000530 <HAL_GetTick>
240017c6:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
240017c8:	f7fe feb2 	bl	24000530 <HAL_GetTick>
240017cc:	42b0      	cmp	r0, r6
240017ce:	d0fb      	beq.n	240017c8 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240017d0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
240017d2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
240017d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
240017d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
240017dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240017e0:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
240017e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
240017e4:	f043 0301 	orr.w	r3, r3, #1
240017e8:	62eb      	str	r3, [r5, #44]	@ 0x2c
240017ea:	e5b9      	b.n	24001360 <HAL_RCC_OscConfig+0xc8>
240017ec:	58024400 	.word	0x58024400

240017f0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
240017f0:	4b49      	ldr	r3, [pc, #292]	@ (24001918 <HAL_RCC_GetSysClockFreq+0x128>)
240017f2:	691a      	ldr	r2, [r3, #16]
240017f4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
240017f8:	2a10      	cmp	r2, #16
{
240017fa:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240017fc:	f000 8088 	beq.w	24001910 <HAL_RCC_GetSysClockFreq+0x120>
24001800:	2a18      	cmp	r2, #24
24001802:	d00c      	beq.n	2400181e <HAL_RCC_GetSysClockFreq+0x2e>
24001804:	2a00      	cmp	r2, #0
24001806:	f040 8085 	bne.w	24001914 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400180a:	681a      	ldr	r2, [r3, #0]
2400180c:	4843      	ldr	r0, [pc, #268]	@ (2400191c <HAL_RCC_GetSysClockFreq+0x12c>)
2400180e:	f012 0f20 	tst.w	r2, #32
24001812:	d003      	beq.n	2400181c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24001814:	681b      	ldr	r3, [r3, #0]
24001816:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400181a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
2400181c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400181e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24001820:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24001822:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
24001824:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24001828:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400182c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
2400182e:	d0f5      	beq.n	2400181c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24001830:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24001834:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24001838:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400183c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24001840:	4362      	muls	r2, r4
24001842:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
24001846:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400184c:	ee06 2a90 	vmov	s13, r2
24001850:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
24001854:	d04e      	beq.n	240018f4 <HAL_RCC_GetSysClockFreq+0x104>
24001856:	2902      	cmp	r1, #2
24001858:	d03e      	beq.n	240018d8 <HAL_RCC_GetSysClockFreq+0xe8>
2400185a:	2900      	cmp	r1, #0
2400185c:	d14a      	bne.n	240018f4 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400185e:	681a      	ldr	r2, [r3, #0]
24001860:	0692      	lsls	r2, r2, #26
24001862:	d527      	bpl.n	240018b4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24001864:	6819      	ldr	r1, [r3, #0]
24001866:	4a2d      	ldr	r2, [pc, #180]	@ (2400191c <HAL_RCC_GetSysClockFreq+0x12c>)
24001868:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400186e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24001870:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001874:	ee07 2a90 	vmov	s15, r2
24001878:	eef8 5ae7 	vcvt.f32.s32	s11, s15
2400187c:	eec5 7a87 	vdiv.f32	s15, s11, s14
24001880:	ee07 3a10 	vmov	s14, r3
24001884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24001888:	ee37 7a26 	vadd.f32	s14, s14, s13
2400188c:	ee37 7a06 	vadd.f32	s14, s14, s12
24001890:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24001894:	4b20      	ldr	r3, [pc, #128]	@ (24001918 <HAL_RCC_GetSysClockFreq+0x128>)
24001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24001898:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400189c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400189e:	ee07 3a10 	vmov	s14, r3
240018a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
240018a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
240018aa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240018ae:	ee17 0a90 	vmov	r0, s15
240018b2:	e7b3      	b.n	2400181c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240018b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240018ba:	ee07 3a90 	vmov	s15, r3
240018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240018c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240018c6:	ee77 7a86 	vadd.f32	s15, s15, s12
240018ca:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 24001920 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240018ce:	eec6 6a07 	vdiv.f32	s13, s12, s14
240018d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
240018d6:	e7dd      	b.n	24001894 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240018da:	f3c3 0308 	ubfx	r3, r3, #0, #9
240018de:	ee07 3a90 	vmov	s15, r3
240018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240018e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240018ea:	ee77 7a86 	vadd.f32	s15, s15, s12
240018ee:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 24001924 <HAL_RCC_GetSysClockFreq+0x134>
240018f2:	e7ec      	b.n	240018ce <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240018f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240018fa:	ee07 3a90 	vmov	s15, r3
240018fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24001902:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001906:	ee77 7a86 	vadd.f32	s15, s15, s12
2400190a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 24001928 <HAL_RCC_GetSysClockFreq+0x138>
2400190e:	e7de      	b.n	240018ce <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
24001910:	4806      	ldr	r0, [pc, #24]	@ (2400192c <HAL_RCC_GetSysClockFreq+0x13c>)
24001912:	e783      	b.n	2400181c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
24001914:	4806      	ldr	r0, [pc, #24]	@ (24001930 <HAL_RCC_GetSysClockFreq+0x140>)
24001916:	e781      	b.n	2400181c <HAL_RCC_GetSysClockFreq+0x2c>
24001918:	58024400 	.word	0x58024400
2400191c:	03d09000 	.word	0x03d09000
24001920:	4c742400 	.word	0x4c742400
24001924:	4bbebc20 	.word	0x4bbebc20
24001928:	4a742400 	.word	0x4a742400
2400192c:	017d7840 	.word	0x017d7840
24001930:	003d0900 	.word	0x003d0900

24001934 <HAL_RCC_ClockConfig>:
{
24001934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24001938:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
2400193a:	4604      	mov	r4, r0
2400193c:	b910      	cbnz	r0, 24001944 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
2400193e:	2001      	movs	r0, #1
}
24001940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24001944:	4a88      	ldr	r2, [pc, #544]	@ (24001b68 <HAL_RCC_ClockConfig+0x234>)
24001946:	6813      	ldr	r3, [r2, #0]
24001948:	f003 030f 	and.w	r3, r3, #15
2400194c:	428b      	cmp	r3, r1
2400194e:	f0c0 8093 	bcc.w	24001a78 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24001952:	6823      	ldr	r3, [r4, #0]
24001954:	075f      	lsls	r7, r3, #29
24001956:	f100 809b 	bmi.w	24001a90 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400195a:	071e      	lsls	r6, r3, #28
2400195c:	d50b      	bpl.n	24001976 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400195e:	4983      	ldr	r1, [pc, #524]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001960:	6960      	ldr	r0, [r4, #20]
24001962:	69ca      	ldr	r2, [r1, #28]
24001964:	f002 0270 	and.w	r2, r2, #112	@ 0x70
24001968:	4290      	cmp	r0, r2
2400196a:	d904      	bls.n	24001976 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400196c:	69ca      	ldr	r2, [r1, #28]
2400196e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
24001972:	4302      	orrs	r2, r0
24001974:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24001976:	06d8      	lsls	r0, r3, #27
24001978:	d50b      	bpl.n	24001992 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400197a:	497c      	ldr	r1, [pc, #496]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
2400197c:	69a0      	ldr	r0, [r4, #24]
2400197e:	69ca      	ldr	r2, [r1, #28]
24001980:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
24001984:	4290      	cmp	r0, r2
24001986:	d904      	bls.n	24001992 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24001988:	69ca      	ldr	r2, [r1, #28]
2400198a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
2400198e:	4302      	orrs	r2, r0
24001990:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24001992:	0699      	lsls	r1, r3, #26
24001994:	d50b      	bpl.n	240019ae <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24001996:	4975      	ldr	r1, [pc, #468]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001998:	69e0      	ldr	r0, [r4, #28]
2400199a:	6a0a      	ldr	r2, [r1, #32]
2400199c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
240019a0:	4290      	cmp	r0, r2
240019a2:	d904      	bls.n	240019ae <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240019a4:	6a0a      	ldr	r2, [r1, #32]
240019a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
240019aa:	4302      	orrs	r2, r0
240019ac:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240019ae:	079a      	lsls	r2, r3, #30
240019b0:	d50b      	bpl.n	240019ca <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240019b2:	496e      	ldr	r1, [pc, #440]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
240019b4:	68e0      	ldr	r0, [r4, #12]
240019b6:	698a      	ldr	r2, [r1, #24]
240019b8:	f002 020f 	and.w	r2, r2, #15
240019bc:	4290      	cmp	r0, r2
240019be:	d904      	bls.n	240019ca <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240019c0:	698a      	ldr	r2, [r1, #24]
240019c2:	f022 020f 	bic.w	r2, r2, #15
240019c6:	4302      	orrs	r2, r0
240019c8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240019ca:	07df      	lsls	r7, r3, #31
240019cc:	d46e      	bmi.n	24001aac <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240019ce:	6823      	ldr	r3, [r4, #0]
240019d0:	079e      	lsls	r6, r3, #30
240019d2:	f100 80a1 	bmi.w	24001b18 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
240019d6:	4964      	ldr	r1, [pc, #400]	@ (24001b68 <HAL_RCC_ClockConfig+0x234>)
240019d8:	680a      	ldr	r2, [r1, #0]
240019da:	f002 020f 	and.w	r2, r2, #15
240019de:	42aa      	cmp	r2, r5
240019e0:	f200 80a8 	bhi.w	24001b34 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
240019e4:	0758      	lsls	r0, r3, #29
240019e6:	f100 80b1 	bmi.w	24001b4c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
240019ea:	0719      	lsls	r1, r3, #28
240019ec:	d50b      	bpl.n	24001a06 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240019ee:	495f      	ldr	r1, [pc, #380]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
240019f0:	6960      	ldr	r0, [r4, #20]
240019f2:	69ca      	ldr	r2, [r1, #28]
240019f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
240019f8:	4290      	cmp	r0, r2
240019fa:	d204      	bcs.n	24001a06 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240019fc:	69ca      	ldr	r2, [r1, #28]
240019fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
24001a02:	4302      	orrs	r2, r0
24001a04:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24001a06:	06da      	lsls	r2, r3, #27
24001a08:	d50b      	bpl.n	24001a22 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24001a0a:	4958      	ldr	r1, [pc, #352]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001a0c:	69a0      	ldr	r0, [r4, #24]
24001a0e:	69ca      	ldr	r2, [r1, #28]
24001a10:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
24001a14:	4290      	cmp	r0, r2
24001a16:	d204      	bcs.n	24001a22 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24001a18:	69ca      	ldr	r2, [r1, #28]
24001a1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
24001a1e:	4302      	orrs	r2, r0
24001a20:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24001a22:	069b      	lsls	r3, r3, #26
24001a24:	d50b      	bpl.n	24001a3e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24001a26:	4a51      	ldr	r2, [pc, #324]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001a28:	69e1      	ldr	r1, [r4, #28]
24001a2a:	6a13      	ldr	r3, [r2, #32]
24001a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
24001a30:	4299      	cmp	r1, r3
24001a32:	d204      	bcs.n	24001a3e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24001a34:	6a13      	ldr	r3, [r2, #32]
24001a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
24001a3a:	430b      	orrs	r3, r1
24001a3c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24001a3e:	f7ff fed7 	bl	240017f0 <HAL_RCC_GetSysClockFreq>
24001a42:	494a      	ldr	r1, [pc, #296]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001a44:	4a4a      	ldr	r2, [pc, #296]	@ (24001b70 <HAL_RCC_ClockConfig+0x23c>)
24001a46:	698b      	ldr	r3, [r1, #24]
24001a48:	f3c3 2303 	ubfx	r3, r3, #8, #4
24001a4c:	5cd3      	ldrb	r3, [r2, r3]
24001a4e:	f003 031f 	and.w	r3, r3, #31
24001a52:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001a54:	698b      	ldr	r3, [r1, #24]
24001a56:	f003 030f 	and.w	r3, r3, #15
24001a5a:	5cd3      	ldrb	r3, [r2, r3]
24001a5c:	4a45      	ldr	r2, [pc, #276]	@ (24001b74 <HAL_RCC_ClockConfig+0x240>)
24001a5e:	f003 031f 	and.w	r3, r3, #31
24001a62:	fa20 f303 	lsr.w	r3, r0, r3
24001a66:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
24001a68:	4b43      	ldr	r3, [pc, #268]	@ (24001b78 <HAL_RCC_ClockConfig+0x244>)
24001a6a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
24001a6c:	4b43      	ldr	r3, [pc, #268]	@ (24001b7c <HAL_RCC_ClockConfig+0x248>)
}
24001a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24001a72:	6818      	ldr	r0, [r3, #0]
24001a74:	f7fe bd5a 	b.w	2400052c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
24001a78:	6813      	ldr	r3, [r2, #0]
24001a7a:	f023 030f 	bic.w	r3, r3, #15
24001a7e:	430b      	orrs	r3, r1
24001a80:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24001a82:	6813      	ldr	r3, [r2, #0]
24001a84:	f003 030f 	and.w	r3, r3, #15
24001a88:	428b      	cmp	r3, r1
24001a8a:	f47f af58 	bne.w	2400193e <HAL_RCC_ClockConfig+0xa>
24001a8e:	e760      	b.n	24001952 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24001a90:	4936      	ldr	r1, [pc, #216]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001a92:	6920      	ldr	r0, [r4, #16]
24001a94:	698a      	ldr	r2, [r1, #24]
24001a96:	f002 0270 	and.w	r2, r2, #112	@ 0x70
24001a9a:	4290      	cmp	r0, r2
24001a9c:	f67f af5d 	bls.w	2400195a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24001aa0:	698a      	ldr	r2, [r1, #24]
24001aa2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
24001aa6:	4302      	orrs	r2, r0
24001aa8:	618a      	str	r2, [r1, #24]
24001aaa:	e756      	b.n	2400195a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24001aac:	4b2f      	ldr	r3, [pc, #188]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001aae:	68a1      	ldr	r1, [r4, #8]
24001ab0:	699a      	ldr	r2, [r3, #24]
24001ab2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
24001ab6:	430a      	orrs	r2, r1
24001ab8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24001aba:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24001abc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24001abe:	2902      	cmp	r1, #2
24001ac0:	d11d      	bne.n	24001afe <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24001ac2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24001ac6:	f43f af3a 	beq.w	2400193e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24001aca:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24001acc:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24001ad0:	4f26      	ldr	r7, [pc, #152]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24001ad2:	f022 0207 	bic.w	r2, r2, #7
24001ad6:	430a      	orrs	r2, r1
24001ad8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
24001ada:	f7fe fd29 	bl	24000530 <HAL_GetTick>
24001ade:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24001ae0:	693b      	ldr	r3, [r7, #16]
24001ae2:	6862      	ldr	r2, [r4, #4]
24001ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
24001ae8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24001aec:	f43f af6f 	beq.w	240019ce <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24001af0:	f7fe fd1e 	bl	24000530 <HAL_GetTick>
24001af4:	1b80      	subs	r0, r0, r6
24001af6:	4540      	cmp	r0, r8
24001af8:	d9f2      	bls.n	24001ae0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
24001afa:	2003      	movs	r0, #3
24001afc:	e720      	b.n	24001940 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24001afe:	2903      	cmp	r1, #3
24001b00:	d102      	bne.n	24001b08 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24001b02:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
24001b06:	e7de      	b.n	24001ac6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24001b08:	2901      	cmp	r1, #1
24001b0a:	d102      	bne.n	24001b12 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24001b0c:	f412 7f80 	tst.w	r2, #256	@ 0x100
24001b10:	e7d9      	b.n	24001ac6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24001b12:	f012 0f04 	tst.w	r2, #4
24001b16:	e7d6      	b.n	24001ac6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24001b18:	4914      	ldr	r1, [pc, #80]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001b1a:	68e0      	ldr	r0, [r4, #12]
24001b1c:	698a      	ldr	r2, [r1, #24]
24001b1e:	f002 020f 	and.w	r2, r2, #15
24001b22:	4290      	cmp	r0, r2
24001b24:	f4bf af57 	bcs.w	240019d6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24001b28:	698a      	ldr	r2, [r1, #24]
24001b2a:	f022 020f 	bic.w	r2, r2, #15
24001b2e:	4302      	orrs	r2, r0
24001b30:	618a      	str	r2, [r1, #24]
24001b32:	e750      	b.n	240019d6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
24001b34:	680a      	ldr	r2, [r1, #0]
24001b36:	f022 020f 	bic.w	r2, r2, #15
24001b3a:	432a      	orrs	r2, r5
24001b3c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24001b3e:	680a      	ldr	r2, [r1, #0]
24001b40:	f002 020f 	and.w	r2, r2, #15
24001b44:	42aa      	cmp	r2, r5
24001b46:	f47f aefa 	bne.w	2400193e <HAL_RCC_ClockConfig+0xa>
24001b4a:	e74b      	b.n	240019e4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24001b4c:	4907      	ldr	r1, [pc, #28]	@ (24001b6c <HAL_RCC_ClockConfig+0x238>)
24001b4e:	6920      	ldr	r0, [r4, #16]
24001b50:	698a      	ldr	r2, [r1, #24]
24001b52:	f002 0270 	and.w	r2, r2, #112	@ 0x70
24001b56:	4290      	cmp	r0, r2
24001b58:	f4bf af47 	bcs.w	240019ea <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24001b5c:	698a      	ldr	r2, [r1, #24]
24001b5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
24001b62:	4302      	orrs	r2, r0
24001b64:	618a      	str	r2, [r1, #24]
24001b66:	e740      	b.n	240019ea <HAL_RCC_ClockConfig+0xb6>
24001b68:	52002000 	.word	0x52002000
24001b6c:	58024400 	.word	0x58024400
24001b70:	24002758 	.word	0x24002758
24001b74:	24002770 	.word	0x24002770
24001b78:	24002774 	.word	0x24002774
24001b7c:	24002778 	.word	0x24002778

24001b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24001b82:	4c3a      	ldr	r4, [pc, #232]	@ (24001c6c <RCCEx_PLL2_Config+0xec>)
{
24001b84:	4606      	mov	r6, r0
24001b86:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24001b88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
24001b8a:	f003 0303 	and.w	r3, r3, #3
24001b8e:	2b03      	cmp	r3, #3
24001b90:	d069      	beq.n	24001c66 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24001b92:	6823      	ldr	r3, [r4, #0]
24001b94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
24001b98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24001b9a:	f7fe fcc9 	bl	24000530 <HAL_GetTick>
24001b9e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24001ba0:	6823      	ldr	r3, [r4, #0]
24001ba2:	011a      	lsls	r2, r3, #4
24001ba4:	d44b      	bmi.n	24001c3e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24001ba6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
24001ba8:	6832      	ldr	r2, [r6, #0]
24001baa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
24001bae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24001bb2:	62a3      	str	r3, [r4, #40]	@ 0x28
24001bb4:	68b3      	ldr	r3, [r6, #8]
24001bb6:	68f2      	ldr	r2, [r6, #12]
24001bb8:	3b01      	subs	r3, #1
24001bba:	3a01      	subs	r2, #1
24001bbc:	025b      	lsls	r3, r3, #9
24001bbe:	0412      	lsls	r2, r2, #16
24001bc0:	b29b      	uxth	r3, r3
24001bc2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
24001bc6:	4313      	orrs	r3, r2
24001bc8:	6872      	ldr	r2, [r6, #4]
24001bca:	3a01      	subs	r2, #1
24001bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
24001bd0:	4313      	orrs	r3, r2
24001bd2:	6932      	ldr	r2, [r6, #16]
24001bd4:	3a01      	subs	r2, #1
24001bd6:	0612      	lsls	r2, r2, #24
24001bd8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
24001bdc:	4313      	orrs	r3, r2
24001bde:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24001be0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001be2:	6972      	ldr	r2, [r6, #20]
24001be4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
24001be8:	4313      	orrs	r3, r2
24001bea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24001bec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001bee:	69b2      	ldr	r2, [r6, #24]
24001bf0:	f023 0320 	bic.w	r3, r3, #32
24001bf4:	4313      	orrs	r3, r2
24001bf6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24001bf8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001bfa:	f023 0310 	bic.w	r3, r3, #16
24001bfe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24001c00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
24001c02:	69f2      	ldr	r2, [r6, #28]
24001c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
24001c08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
24001c0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24001c10:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24001c12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001c14:	f043 0310 	orr.w	r3, r3, #16
24001c18:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24001c1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24001c1c:	b9b5      	cbnz	r5, 24001c4c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24001c1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24001c22:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24001c24:	4c11      	ldr	r4, [pc, #68]	@ (24001c6c <RCCEx_PLL2_Config+0xec>)
24001c26:	6823      	ldr	r3, [r4, #0]
24001c28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
24001c2c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24001c2e:	f7fe fc7f 	bl	24000530 <HAL_GetTick>
24001c32:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24001c34:	6823      	ldr	r3, [r4, #0]
24001c36:	011b      	lsls	r3, r3, #4
24001c38:	d50f      	bpl.n	24001c5a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
24001c3a:	2000      	movs	r0, #0
24001c3c:	e005      	b.n	24001c4a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24001c3e:	f7fe fc77 	bl	24000530 <HAL_GetTick>
24001c42:	1bc0      	subs	r0, r0, r7
24001c44:	2802      	cmp	r0, #2
24001c46:	d9ab      	bls.n	24001ba0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
24001c48:	2003      	movs	r0, #3
}
24001c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
24001c4c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24001c4e:	bf0c      	ite	eq
24001c50:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24001c54:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
24001c58:	e7e3      	b.n	24001c22 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24001c5a:	f7fe fc69 	bl	24000530 <HAL_GetTick>
24001c5e:	1b40      	subs	r0, r0, r5
24001c60:	2802      	cmp	r0, #2
24001c62:	d9e7      	bls.n	24001c34 <RCCEx_PLL2_Config+0xb4>
24001c64:	e7f0      	b.n	24001c48 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
24001c66:	2001      	movs	r0, #1
24001c68:	e7ef      	b.n	24001c4a <RCCEx_PLL2_Config+0xca>
24001c6a:	bf00      	nop
24001c6c:	58024400 	.word	0x58024400

24001c70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24001c72:	4c3a      	ldr	r4, [pc, #232]	@ (24001d5c <RCCEx_PLL3_Config+0xec>)
{
24001c74:	4606      	mov	r6, r0
24001c76:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24001c78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
24001c7a:	f003 0303 	and.w	r3, r3, #3
24001c7e:	2b03      	cmp	r3, #3
24001c80:	d069      	beq.n	24001d56 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24001c82:	6823      	ldr	r3, [r4, #0]
24001c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
24001c88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24001c8a:	f7fe fc51 	bl	24000530 <HAL_GetTick>
24001c8e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24001c90:	6823      	ldr	r3, [r4, #0]
24001c92:	009a      	lsls	r2, r3, #2
24001c94:	d44b      	bmi.n	24001d2e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24001c96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
24001c98:	6832      	ldr	r2, [r6, #0]
24001c9a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
24001c9e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24001ca2:	62a3      	str	r3, [r4, #40]	@ 0x28
24001ca4:	68b3      	ldr	r3, [r6, #8]
24001ca6:	68f2      	ldr	r2, [r6, #12]
24001ca8:	3b01      	subs	r3, #1
24001caa:	3a01      	subs	r2, #1
24001cac:	025b      	lsls	r3, r3, #9
24001cae:	0412      	lsls	r2, r2, #16
24001cb0:	b29b      	uxth	r3, r3
24001cb2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
24001cb6:	4313      	orrs	r3, r2
24001cb8:	6872      	ldr	r2, [r6, #4]
24001cba:	3a01      	subs	r2, #1
24001cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
24001cc0:	4313      	orrs	r3, r2
24001cc2:	6932      	ldr	r2, [r6, #16]
24001cc4:	3a01      	subs	r2, #1
24001cc6:	0612      	lsls	r2, r2, #24
24001cc8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
24001ccc:	4313      	orrs	r3, r2
24001cce:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24001cd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001cd2:	6972      	ldr	r2, [r6, #20]
24001cd4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
24001cd8:	4313      	orrs	r3, r2
24001cda:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24001cdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001cde:	69b2      	ldr	r2, [r6, #24]
24001ce0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
24001ce4:	4313      	orrs	r3, r2
24001ce6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24001ce8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
24001cee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24001cf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
24001cf2:	69f2      	ldr	r2, [r6, #28]
24001cf4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
24001cf8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
24001cfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24001d00:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24001d02:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
24001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24001d08:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24001d0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24001d0c:	b9b5      	cbnz	r5, 24001d3c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24001d0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24001d12:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24001d14:	4c11      	ldr	r4, [pc, #68]	@ (24001d5c <RCCEx_PLL3_Config+0xec>)
24001d16:	6823      	ldr	r3, [r4, #0]
24001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
24001d1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24001d1e:	f7fe fc07 	bl	24000530 <HAL_GetTick>
24001d22:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24001d24:	6823      	ldr	r3, [r4, #0]
24001d26:	009b      	lsls	r3, r3, #2
24001d28:	d50f      	bpl.n	24001d4a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
24001d2a:	2000      	movs	r0, #0
24001d2c:	e005      	b.n	24001d3a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24001d2e:	f7fe fbff 	bl	24000530 <HAL_GetTick>
24001d32:	1bc0      	subs	r0, r0, r7
24001d34:	2802      	cmp	r0, #2
24001d36:	d9ab      	bls.n	24001c90 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
24001d38:	2003      	movs	r0, #3
}
24001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
24001d3c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24001d3e:	bf0c      	ite	eq
24001d40:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24001d44:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
24001d48:	e7e3      	b.n	24001d12 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24001d4a:	f7fe fbf1 	bl	24000530 <HAL_GetTick>
24001d4e:	1b40      	subs	r0, r0, r5
24001d50:	2802      	cmp	r0, #2
24001d52:	d9e7      	bls.n	24001d24 <RCCEx_PLL3_Config+0xb4>
24001d54:	e7f0      	b.n	24001d38 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
24001d56:	2001      	movs	r0, #1
24001d58:	e7ef      	b.n	24001d3a <RCCEx_PLL3_Config+0xca>
24001d5a:	bf00      	nop
24001d5c:	58024400 	.word	0x58024400

24001d60 <HAL_RCCEx_PeriphCLKConfig>:
{
24001d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24001d64:	6803      	ldr	r3, [r0, #0]
{
24001d66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24001d68:	0118      	lsls	r0, r3, #4
24001d6a:	d51e      	bpl.n	24001daa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
24001d6c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
24001d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24001d72:	d02b      	beq.n	24001dcc <HAL_RCCEx_PeriphCLKConfig+0x6c>
24001d74:	d80f      	bhi.n	24001d96 <HAL_RCCEx_PeriphCLKConfig+0x36>
24001d76:	b1d3      	cbz	r3, 24001dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
24001d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24001d7c:	d01d      	beq.n	24001dba <HAL_RCCEx_PeriphCLKConfig+0x5a>
24001d7e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24001d80:	682b      	ldr	r3, [r5, #0]
24001d82:	05d9      	lsls	r1, r3, #23
24001d84:	d551      	bpl.n	24001e2a <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
24001d86:	6dab      	ldr	r3, [r5, #88]	@ 0x58
24001d88:	2b04      	cmp	r3, #4
24001d8a:	d84d      	bhi.n	24001e28 <HAL_RCCEx_PeriphCLKConfig+0xc8>
24001d8c:	e8df f003 	tbb	[pc, r3]
24001d90:	29463f24 	.word	0x29463f24
24001d94:	29          	.byte	0x29
24001d95:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
24001d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24001d9a:	d1f0      	bne.n	24001d7e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24001d9c:	4a85      	ldr	r2, [pc, #532]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001d9e:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
24001da0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
24001da2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
24001da6:	430b      	orrs	r3, r1
24001da8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24001daa:	2600      	movs	r6, #0
24001dac:	e7e8      	b.n	24001d80 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001dae:	4a81      	ldr	r2, [pc, #516]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001db0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
24001db8:	e7f0      	b.n	24001d9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24001dba:	2102      	movs	r1, #2
24001dbc:	f105 0008 	add.w	r0, r5, #8
24001dc0:	f7ff fede 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24001dc4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24001dc6:	2800      	cmp	r0, #0
24001dc8:	d1da      	bne.n	24001d80 <HAL_RCCEx_PeriphCLKConfig+0x20>
24001dca:	e7e7      	b.n	24001d9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24001dcc:	2102      	movs	r1, #2
24001dce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24001dd2:	f7ff ff4d 	bl	24001c70 <RCCEx_PLL3_Config>
24001dd6:	e7f5      	b.n	24001dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001dd8:	4a76      	ldr	r2, [pc, #472]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001dda:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
24001de2:	4634      	mov	r4, r6
    if (ret == HAL_OK)
24001de4:	bb1c      	cbnz	r4, 24001e2e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24001de6:	4a73      	ldr	r2, [pc, #460]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001de8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
24001dea:	6d13      	ldr	r3, [r2, #80]	@ 0x50
24001dec:	f023 0307 	bic.w	r3, r3, #7
24001df0:	430b      	orrs	r3, r1
24001df2:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24001df4:	682b      	ldr	r3, [r5, #0]
24001df6:	059a      	lsls	r2, r3, #22
24001df8:	d528      	bpl.n	24001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
24001dfa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
24001dfc:	2b80      	cmp	r3, #128	@ 0x80
24001dfe:	d043      	beq.n	24001e88 <HAL_RCCEx_PeriphCLKConfig+0x128>
24001e00:	d817      	bhi.n	24001e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
24001e02:	b3a3      	cbz	r3, 24001e6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
24001e04:	2b40      	cmp	r3, #64	@ 0x40
24001e06:	d038      	beq.n	24001e7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
24001e08:	2601      	movs	r6, #1
24001e0a:	4634      	mov	r4, r6
24001e0c:	e01e      	b.n	24001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24001e0e:	2100      	movs	r1, #0
24001e10:	f105 0008 	add.w	r0, r5, #8
24001e14:	f7ff feb4 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001e18:	4604      	mov	r4, r0
        break;
24001e1a:	e7e3      	b.n	24001de4 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001e1c:	2100      	movs	r1, #0
24001e1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24001e22:	f7ff ff25 	bl	24001c70 <RCCEx_PLL3_Config>
24001e26:	e7f7      	b.n	24001e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
24001e28:	2601      	movs	r6, #1
24001e2a:	4634      	mov	r4, r6
24001e2c:	e7e2      	b.n	24001df4 <HAL_RCCEx_PeriphCLKConfig+0x94>
24001e2e:	4626      	mov	r6, r4
24001e30:	e7e0      	b.n	24001df4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
24001e32:	2bc0      	cmp	r3, #192	@ 0xc0
24001e34:	d002      	beq.n	24001e3c <HAL_RCCEx_PeriphCLKConfig+0xdc>
24001e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24001e3a:	d1e5      	bne.n	24001e08 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
24001e3c:	bb54      	cbnz	r4, 24001e94 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24001e3e:	4a5d      	ldr	r2, [pc, #372]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001e40:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
24001e42:	6d13      	ldr	r3, [r2, #80]	@ 0x50
24001e44:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
24001e48:	430b      	orrs	r3, r1
24001e4a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24001e4c:	682b      	ldr	r3, [r5, #0]
24001e4e:	055b      	lsls	r3, r3, #21
24001e50:	d531      	bpl.n	24001eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
24001e52:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
24001e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24001e5a:	d049      	beq.n	24001ef0 <HAL_RCCEx_PeriphCLKConfig+0x190>
24001e5c:	d81c      	bhi.n	24001e98 <HAL_RCCEx_PeriphCLKConfig+0x138>
24001e5e:	2b00      	cmp	r3, #0
24001e60:	d039      	beq.n	24001ed6 <HAL_RCCEx_PeriphCLKConfig+0x176>
24001e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24001e66:	d03c      	beq.n	24001ee2 <HAL_RCCEx_PeriphCLKConfig+0x182>
24001e68:	2601      	movs	r6, #1
24001e6a:	4634      	mov	r4, r6
24001e6c:	e023      	b.n	24001eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001e6e:	4a51      	ldr	r2, [pc, #324]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001e70:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
24001e78:	e7e0      	b.n	24001e3c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24001e7a:	2100      	movs	r1, #0
24001e7c:	f105 0008 	add.w	r0, r5, #8
24001e80:	f7ff fe7e 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001e84:	4604      	mov	r4, r0
        break;
24001e86:	e7d9      	b.n	24001e3c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001e88:	2100      	movs	r1, #0
24001e8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24001e8e:	f7ff feef 	bl	24001c70 <RCCEx_PLL3_Config>
24001e92:	e7f7      	b.n	24001e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
24001e94:	4626      	mov	r6, r4
24001e96:	e7d9      	b.n	24001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
24001e98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
24001e9c:	d002      	beq.n	24001ea4 <HAL_RCCEx_PeriphCLKConfig+0x144>
24001e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24001ea2:	d1e1      	bne.n	24001e68 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
24001ea4:	bb54      	cbnz	r4, 24001efc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24001ea6:	4a43      	ldr	r2, [pc, #268]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001ea8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
24001eac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
24001eae:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
24001eb2:	430b      	orrs	r3, r1
24001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24001eb6:	682b      	ldr	r3, [r5, #0]
24001eb8:	051f      	lsls	r7, r3, #20
24001eba:	d530      	bpl.n	24001f1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
24001ebc:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
24001ec0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24001ec4:	d045      	beq.n	24001f52 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24001ec6:	d81b      	bhi.n	24001f00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
24001ec8:	b3b3      	cbz	r3, 24001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
24001eca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
24001ece:	d039      	beq.n	24001f44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
24001ed0:	2601      	movs	r6, #1
24001ed2:	4634      	mov	r4, r6
24001ed4:	e023      	b.n	24001f1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001ed6:	4a37      	ldr	r2, [pc, #220]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001ed8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
24001ee0:	e7e0      	b.n	24001ea4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24001ee2:	2100      	movs	r1, #0
24001ee4:	f105 0008 	add.w	r0, r5, #8
24001ee8:	f7ff fe4a 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001eec:	4604      	mov	r4, r0
        break;
24001eee:	e7d9      	b.n	24001ea4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001ef0:	2100      	movs	r1, #0
24001ef2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24001ef6:	f7ff febb 	bl	24001c70 <RCCEx_PLL3_Config>
24001efa:	e7f7      	b.n	24001eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
24001efc:	4626      	mov	r6, r4
24001efe:	e7da      	b.n	24001eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
24001f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
24001f04:	d002      	beq.n	24001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
24001f06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24001f0a:	d1e1      	bne.n	24001ed0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
24001f0c:	bb3c      	cbnz	r4, 24001f5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24001f0e:	4a29      	ldr	r2, [pc, #164]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001f10:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
24001f14:	6d93      	ldr	r3, [r2, #88]	@ 0x58
24001f16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
24001f1a:	430b      	orrs	r3, r1
24001f1c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24001f1e:	682b      	ldr	r3, [r5, #0]
24001f20:	0198      	lsls	r0, r3, #6
24001f22:	d528      	bpl.n	24001f76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
24001f24:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
24001f26:	2b20      	cmp	r3, #32
24001f28:	d03b      	beq.n	24001fa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
24001f2a:	d81a      	bhi.n	24001f62 <HAL_RCCEx_PeriphCLKConfig+0x202>
24001f2c:	b1db      	cbz	r3, 24001f66 <HAL_RCCEx_PeriphCLKConfig+0x206>
24001f2e:	2b10      	cmp	r3, #16
24001f30:	d031      	beq.n	24001f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
24001f32:	2601      	movs	r6, #1
24001f34:	4634      	mov	r4, r6
24001f36:	e01e      	b.n	24001f76 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001f38:	4a1e      	ldr	r2, [pc, #120]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001f3a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
24001f42:	e7e3      	b.n	24001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24001f44:	2100      	movs	r1, #0
24001f46:	f105 0008 	add.w	r0, r5, #8
24001f4a:	f7ff fe19 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001f4e:	4604      	mov	r4, r0
        break;
24001f50:	e7dc      	b.n	24001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24001f52:	2100      	movs	r1, #0
24001f54:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24001f58:	f7ff fe8a 	bl	24001c70 <RCCEx_PLL3_Config>
24001f5c:	e7f7      	b.n	24001f4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
24001f5e:	4626      	mov	r6, r4
24001f60:	e7dd      	b.n	24001f1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
24001f62:	2b30      	cmp	r3, #48	@ 0x30
24001f64:	d1e5      	bne.n	24001f32 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
24001f66:	bb1c      	cbnz	r4, 24001fb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24001f68:	4a12      	ldr	r2, [pc, #72]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001f6a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
24001f6c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
24001f6e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
24001f72:	430b      	orrs	r3, r1
24001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24001f76:	682b      	ldr	r3, [r5, #0]
24001f78:	04d9      	lsls	r1, r3, #19
24001f7a:	d52c      	bpl.n	24001fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
24001f7c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
24001f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24001f82:	d076      	beq.n	24002072 <HAL_RCCEx_PeriphCLKConfig+0x312>
24001f84:	d818      	bhi.n	24001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
24001f86:	2b00      	cmp	r3, #0
24001f88:	d066      	beq.n	24002058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
24001f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24001f8e:	d069      	beq.n	24002064 <HAL_RCCEx_PeriphCLKConfig+0x304>
24001f90:	2601      	movs	r6, #1
24001f92:	4634      	mov	r4, r6
24001f94:	e01f      	b.n	24001fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001f96:	4a07      	ldr	r2, [pc, #28]	@ (24001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
24001f98:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24001f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24001f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
24001fa0:	e7e1      	b.n	24001f66 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24001fa2:	2102      	movs	r1, #2
24001fa4:	f105 0008 	add.w	r0, r5, #8
24001fa8:	f7ff fdea 	bl	24001b80 <RCCEx_PLL2_Config>
24001fac:	4604      	mov	r4, r0
        break;
24001fae:	e7da      	b.n	24001f66 <HAL_RCCEx_PeriphCLKConfig+0x206>
24001fb0:	4626      	mov	r6, r4
24001fb2:	e7e0      	b.n	24001f76 <HAL_RCCEx_PeriphCLKConfig+0x216>
24001fb4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
24001fb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
24001fbc:	d002      	beq.n	24001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
24001fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24001fc2:	d1e5      	bne.n	24001f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
24001fc4:	2c00      	cmp	r4, #0
24001fc6:	d15a      	bne.n	2400207e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24001fc8:	4a9e      	ldr	r2, [pc, #632]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24001fca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
24001fcc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
24001fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
24001fd2:	430b      	orrs	r3, r1
24001fd4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24001fd6:	682b      	ldr	r3, [r5, #0]
24001fd8:	049a      	lsls	r2, r3, #18
24001fda:	d50b      	bpl.n	24001ff4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
24001fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
24001fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24001fe2:	d066      	beq.n	240020b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
24001fe4:	d84d      	bhi.n	24002082 <HAL_RCCEx_PeriphCLKConfig+0x322>
24001fe6:	2b00      	cmp	r3, #0
24001fe8:	d053      	beq.n	24002092 <HAL_RCCEx_PeriphCLKConfig+0x332>
24001fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24001fee:	d059      	beq.n	240020a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
24001ff0:	2601      	movs	r6, #1
24001ff2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24001ff4:	682b      	ldr	r3, [r5, #0]
24001ff6:	045b      	lsls	r3, r3, #17
24001ff8:	d50c      	bpl.n	24002014 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
24001ffa:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
24001ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24002002:	d077      	beq.n	240020f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
24002004:	d85d      	bhi.n	240020c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
24002006:	2b00      	cmp	r3, #0
24002008:	d063      	beq.n	240020d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
2400200a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2400200e:	d06a      	beq.n	240020e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
24002010:	2601      	movs	r6, #1
24002012:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24002014:	682b      	ldr	r3, [r5, #0]
24002016:	041f      	lsls	r7, r3, #16
24002018:	d511      	bpl.n	2400203e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
2400201a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
2400201c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24002020:	d070      	beq.n	24002104 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
24002022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24002026:	d073      	beq.n	24002110 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
24002028:	2b00      	cmp	r3, #0
2400202a:	d178      	bne.n	2400211e <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
2400202c:	2c00      	cmp	r4, #0
2400202e:	d179      	bne.n	24002124 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24002030:	4a84      	ldr	r2, [pc, #528]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002032:	6f29      	ldr	r1, [r5, #112]	@ 0x70
24002034:	6d13      	ldr	r3, [r2, #80]	@ 0x50
24002036:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
2400203a:	430b      	orrs	r3, r1
2400203c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400203e:	682b      	ldr	r3, [r5, #0]
24002040:	01d8      	lsls	r0, r3, #7
24002042:	d57f      	bpl.n	24002144 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
24002044:	6cab      	ldr	r3, [r5, #72]	@ 0x48
24002046:	2b03      	cmp	r3, #3
24002048:	f200 80d8 	bhi.w	240021fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
2400204c:	e8df f013 	tbh	[pc, r3, lsl #1]
24002050:	006c0071 	.word	0x006c0071
24002054:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002058:	4a7a      	ldr	r2, [pc, #488]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
2400205a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
2400205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24002060:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
24002062:	e7af      	b.n	24001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002064:	2100      	movs	r1, #0
24002066:	f105 0008 	add.w	r0, r5, #8
2400206a:	f7ff fd89 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400206e:	4604      	mov	r4, r0
        break;
24002070:	e7a8      	b.n	24001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24002072:	2100      	movs	r1, #0
24002074:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002078:	f7ff fdfa 	bl	24001c70 <RCCEx_PLL3_Config>
2400207c:	e7f7      	b.n	2400206e <HAL_RCCEx_PeriphCLKConfig+0x30e>
2400207e:	4626      	mov	r6, r4
24002080:	e7a9      	b.n	24001fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
24002082:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
24002086:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
2400208a:	d002      	beq.n	24002092 <HAL_RCCEx_PeriphCLKConfig+0x332>
2400208c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24002090:	d1ae      	bne.n	24001ff0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
24002092:	b9a4      	cbnz	r4, 240020be <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24002094:	4a6b      	ldr	r2, [pc, #428]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002096:	6e69      	ldr	r1, [r5, #100]	@ 0x64
24002098:	6d13      	ldr	r3, [r2, #80]	@ 0x50
2400209a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
2400209e:	430b      	orrs	r3, r1
240020a0:	6513      	str	r3, [r2, #80]	@ 0x50
240020a2:	e7a7      	b.n	24001ff4 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240020a4:	2101      	movs	r1, #1
240020a6:	f105 0008 	add.w	r0, r5, #8
240020aa:	f7ff fd69 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240020ae:	4604      	mov	r4, r0
        break;
240020b0:	e7ef      	b.n	24002092 <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240020b2:	2101      	movs	r1, #1
240020b4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240020b8:	f7ff fdda 	bl	24001c70 <RCCEx_PLL3_Config>
240020bc:	e7f7      	b.n	240020ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
240020be:	4626      	mov	r6, r4
240020c0:	e798      	b.n	24001ff4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
240020c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
240020c6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
240020ca:	d002      	beq.n	240020d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
240020cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
240020d0:	d19e      	bne.n	24002010 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
240020d2:	b9ac      	cbnz	r4, 24002100 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240020d4:	4a5b      	ldr	r2, [pc, #364]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
240020d6:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
240020da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
240020dc:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
240020e0:	430b      	orrs	r3, r1
240020e2:	6593      	str	r3, [r2, #88]	@ 0x58
240020e4:	e796      	b.n	24002014 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240020e6:	2101      	movs	r1, #1
240020e8:	f105 0008 	add.w	r0, r5, #8
240020ec:	f7ff fd48 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240020f0:	4604      	mov	r4, r0
        break;
240020f2:	e7ee      	b.n	240020d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240020f4:	2101      	movs	r1, #1
240020f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240020fa:	f7ff fdb9 	bl	24001c70 <RCCEx_PLL3_Config>
240020fe:	e7f7      	b.n	240020f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
24002100:	4626      	mov	r6, r4
24002102:	e787      	b.n	24002014 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002104:	4a4f      	ldr	r2, [pc, #316]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002106:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
24002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2400210c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
2400210e:	e78d      	b.n	2400202c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24002110:	2101      	movs	r1, #1
24002112:	f105 0008 	add.w	r0, r5, #8
24002116:	f7ff fd33 	bl	24001b80 <RCCEx_PLL2_Config>
2400211a:	4604      	mov	r4, r0
        break;
2400211c:	e786      	b.n	2400202c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
2400211e:	2601      	movs	r6, #1
24002120:	4634      	mov	r4, r6
24002122:	e78c      	b.n	2400203e <HAL_RCCEx_PeriphCLKConfig+0x2de>
24002124:	4626      	mov	r6, r4
24002126:	e78a      	b.n	2400203e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002128:	4a46      	ldr	r2, [pc, #280]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
2400212a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
2400212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24002130:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
24002132:	2c00      	cmp	r4, #0
24002134:	d165      	bne.n	24002202 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24002136:	4a43      	ldr	r2, [pc, #268]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002138:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
2400213a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
2400213c:	f023 0303 	bic.w	r3, r3, #3
24002140:	430b      	orrs	r3, r1
24002142:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24002144:	682b      	ldr	r3, [r5, #0]
24002146:	0259      	lsls	r1, r3, #9
24002148:	d539      	bpl.n	240021be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400214a:	4f3f      	ldr	r7, [pc, #252]	@ (24002248 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
2400214c:	683b      	ldr	r3, [r7, #0]
2400214e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24002152:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24002154:	f7fe f9ec 	bl	24000530 <HAL_GetTick>
24002158:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400215a:	683b      	ldr	r3, [r7, #0]
2400215c:	05da      	lsls	r2, r3, #23
2400215e:	d552      	bpl.n	24002206 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
24002160:	2c00      	cmp	r4, #0
24002162:	d175      	bne.n	24002250 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24002164:	4b37      	ldr	r3, [pc, #220]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002166:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
2400216a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
2400216c:	4042      	eors	r2, r0
2400216e:	f412 7f40 	tst.w	r2, #768	@ 0x300
24002172:	d00b      	beq.n	2400218c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24002174:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24002176:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24002178:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
2400217c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
24002180:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24002182:	6f19      	ldr	r1, [r3, #112]	@ 0x70
24002184:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
24002188:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
2400218a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2400218c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
24002190:	d042      	beq.n	24002218 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24002192:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
24002196:	492b      	ldr	r1, [pc, #172]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
24002198:	f403 7240 	and.w	r2, r3, #768	@ 0x300
2400219c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
240021a0:	d14b      	bne.n	2400223a <HAL_RCCEx_PeriphCLKConfig+0x4da>
240021a2:	6908      	ldr	r0, [r1, #16]
240021a4:	4a29      	ldr	r2, [pc, #164]	@ (2400224c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
240021a6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
240021aa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
240021ae:	4302      	orrs	r2, r0
240021b0:	610a      	str	r2, [r1, #16]
240021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
240021b6:	4a23      	ldr	r2, [pc, #140]	@ (24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
240021b8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
240021ba:	430b      	orrs	r3, r1
240021bc:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240021be:	682b      	ldr	r3, [r5, #0]
240021c0:	07d8      	lsls	r0, r3, #31
240021c2:	d509      	bpl.n	240021d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
240021c4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
240021c6:	2b10      	cmp	r3, #16
240021c8:	d05a      	beq.n	24002280 <HAL_RCCEx_PeriphCLKConfig+0x520>
240021ca:	d843      	bhi.n	24002254 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
240021cc:	2b00      	cmp	r3, #0
240021ce:	d047      	beq.n	24002260 <HAL_RCCEx_PeriphCLKConfig+0x500>
240021d0:	2b08      	cmp	r3, #8
240021d2:	d04e      	beq.n	24002272 <HAL_RCCEx_PeriphCLKConfig+0x512>
240021d4:	2601      	movs	r6, #1
240021d6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240021d8:	682b      	ldr	r3, [r5, #0]
240021da:	0799      	lsls	r1, r3, #30
240021dc:	d566      	bpl.n	240022ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
240021de:	6fab      	ldr	r3, [r5, #120]	@ 0x78
240021e0:	2b05      	cmp	r3, #5
240021e2:	d879      	bhi.n	240022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
240021e4:	e8df f003 	tbb	[pc, r3]
240021e8:	5a72545a 	.word	0x5a72545a
240021ec:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240021ee:	2102      	movs	r1, #2
240021f0:	f105 0008 	add.w	r0, r5, #8
240021f4:	f7ff fcc4 	bl	24001b80 <RCCEx_PLL2_Config>
240021f8:	4604      	mov	r4, r0
        break;
240021fa:	e79a      	b.n	24002132 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
240021fc:	2601      	movs	r6, #1
240021fe:	4634      	mov	r4, r6
24002200:	e7a0      	b.n	24002144 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
24002202:	4626      	mov	r6, r4
24002204:	e79e      	b.n	24002144 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24002206:	f7fe f993 	bl	24000530 <HAL_GetTick>
2400220a:	eba0 0008 	sub.w	r0, r0, r8
2400220e:	2864      	cmp	r0, #100	@ 0x64
24002210:	d9a3      	bls.n	2400215a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
24002212:	2603      	movs	r6, #3
24002214:	4634      	mov	r4, r6
24002216:	e7d2      	b.n	240021be <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
24002218:	f7fe f98a 	bl	24000530 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400221c:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 24002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
24002220:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24002222:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24002226:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
2400222a:	079b      	lsls	r3, r3, #30
2400222c:	d4b1      	bmi.n	24002192 <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400222e:	f7fe f97f 	bl	24000530 <HAL_GetTick>
24002232:	1bc0      	subs	r0, r0, r7
24002234:	4548      	cmp	r0, r9
24002236:	d9f6      	bls.n	24002226 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
24002238:	e7eb      	b.n	24002212 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400223a:	690a      	ldr	r2, [r1, #16]
2400223c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
24002240:	e7b6      	b.n	240021b0 <HAL_RCCEx_PeriphCLKConfig+0x450>
24002242:	bf00      	nop
24002244:	58024400 	.word	0x58024400
24002248:	58024800 	.word	0x58024800
2400224c:	00ffffcf 	.word	0x00ffffcf
24002250:	4626      	mov	r6, r4
24002252:	e7b4      	b.n	240021be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
24002254:	f023 0208 	bic.w	r2, r3, #8
24002258:	2a20      	cmp	r2, #32
2400225a:	d001      	beq.n	24002260 <HAL_RCCEx_PeriphCLKConfig+0x500>
2400225c:	2b18      	cmp	r3, #24
2400225e:	d1b9      	bne.n	240021d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
24002260:	b9a4      	cbnz	r4, 2400228c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24002262:	4a20      	ldr	r2, [pc, #128]	@ (240022e4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
24002264:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
24002266:	6d53      	ldr	r3, [r2, #84]	@ 0x54
24002268:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
2400226c:	430b      	orrs	r3, r1
2400226e:	6553      	str	r3, [r2, #84]	@ 0x54
24002270:	e7b2      	b.n	240021d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24002272:	2101      	movs	r1, #1
24002274:	f105 0008 	add.w	r0, r5, #8
24002278:	f7ff fc82 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400227c:	4604      	mov	r4, r0
        break;
2400227e:	e7ef      	b.n	24002260 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24002280:	2101      	movs	r1, #1
24002282:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002286:	f7ff fcf3 	bl	24001c70 <RCCEx_PLL3_Config>
2400228a:	e7f7      	b.n	2400227c <HAL_RCCEx_PeriphCLKConfig+0x51c>
2400228c:	4626      	mov	r6, r4
2400228e:	e7a3      	b.n	240021d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24002290:	2101      	movs	r1, #1
24002292:	f105 0008 	add.w	r0, r5, #8
24002296:	f7ff fc73 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400229a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
2400229c:	b9fc      	cbnz	r4, 240022de <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2400229e:	4a11      	ldr	r2, [pc, #68]	@ (240022e4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
240022a0:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
240022a2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
240022a4:	f023 0307 	bic.w	r3, r3, #7
240022a8:	430b      	orrs	r3, r1
240022aa:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240022ac:	682b      	ldr	r3, [r5, #0]
240022ae:	075a      	lsls	r2, r3, #29
240022b0:	d52b      	bpl.n	2400230a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
240022b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
240022b6:	2b05      	cmp	r3, #5
240022b8:	f200 816e 	bhi.w	24002598 <HAL_RCCEx_PeriphCLKConfig+0x838>
240022bc:	e8df f013 	tbh	[pc, r3, lsl #1]
240022c0:	0014001a 	.word	0x0014001a
240022c4:	001a0166 	.word	0x001a0166
240022c8:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240022cc:	2101      	movs	r1, #1
240022ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240022d2:	f7ff fccd 	bl	24001c70 <RCCEx_PLL3_Config>
240022d6:	e7e0      	b.n	2400229a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
240022d8:	2601      	movs	r6, #1
240022da:	4634      	mov	r4, r6
240022dc:	e7e6      	b.n	240022ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
240022de:	4626      	mov	r6, r4
240022e0:	e7e4      	b.n	240022ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
240022e2:	bf00      	nop
240022e4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240022e8:	2101      	movs	r1, #1
240022ea:	f105 0008 	add.w	r0, r5, #8
240022ee:	f7ff fc47 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240022f2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
240022f4:	2c00      	cmp	r4, #0
240022f6:	f040 8152 	bne.w	2400259e <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240022fa:	4aaa      	ldr	r2, [pc, #680]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240022fc:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
24002300:	6d93      	ldr	r3, [r2, #88]	@ 0x58
24002302:	f023 0307 	bic.w	r3, r3, #7
24002306:	430b      	orrs	r3, r1
24002308:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400230a:	682b      	ldr	r3, [r5, #0]
2400230c:	069b      	lsls	r3, r3, #26
2400230e:	d510      	bpl.n	24002332 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
24002310:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
24002314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24002318:	f000 8160 	beq.w	240025dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
2400231c:	f200 8144 	bhi.w	240025a8 <HAL_RCCEx_PeriphCLKConfig+0x848>
24002320:	2b00      	cmp	r3, #0
24002322:	f000 814a 	beq.w	240025ba <HAL_RCCEx_PeriphCLKConfig+0x85a>
24002326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2400232a:	f000 8150 	beq.w	240025ce <HAL_RCCEx_PeriphCLKConfig+0x86e>
2400232e:	2601      	movs	r6, #1
24002330:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24002332:	682b      	ldr	r3, [r5, #0]
24002334:	065f      	lsls	r7, r3, #25
24002336:	d510      	bpl.n	2400235a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
24002338:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
2400233c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
24002340:	f000 816e 	beq.w	24002620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
24002344:	f200 8152 	bhi.w	240025ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
24002348:	2b00      	cmp	r3, #0
2400234a:	f000 8158 	beq.w	240025fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
2400234e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
24002352:	f000 815e 	beq.w	24002612 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
24002356:	2601      	movs	r6, #1
24002358:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400235a:	682b      	ldr	r3, [r5, #0]
2400235c:	0618      	lsls	r0, r3, #24
2400235e:	d510      	bpl.n	24002382 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
24002360:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
24002364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24002368:	f000 817c 	beq.w	24002664 <HAL_RCCEx_PeriphCLKConfig+0x904>
2400236c:	f200 8160 	bhi.w	24002630 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
24002370:	2b00      	cmp	r3, #0
24002372:	f000 8166 	beq.w	24002642 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
24002376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2400237a:	f000 816c 	beq.w	24002656 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
2400237e:	2601      	movs	r6, #1
24002380:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24002382:	682b      	ldr	r3, [r5, #0]
24002384:	0719      	lsls	r1, r3, #28
24002386:	d514      	bpl.n	240023b2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24002388:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
2400238c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24002390:	d107      	bne.n	240023a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24002392:	2102      	movs	r1, #2
24002394:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002398:	f7ff fc6a 	bl	24001c70 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
2400239c:	2800      	cmp	r0, #0
2400239e:	bf18      	it	ne
240023a0:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240023a2:	4a80      	ldr	r2, [pc, #512]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240023a4:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
240023a8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
240023aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
240023ae:	430b      	orrs	r3, r1
240023b0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
240023b2:	682b      	ldr	r3, [r5, #0]
240023b4:	06da      	lsls	r2, r3, #27
240023b6:	d514      	bpl.n	240023e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
240023b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
240023bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240023c0:	d107      	bne.n	240023d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240023c2:	2102      	movs	r1, #2
240023c4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240023c8:	f7ff fc52 	bl	24001c70 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
240023cc:	2800      	cmp	r0, #0
240023ce:	bf18      	it	ne
240023d0:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240023d2:	4a74      	ldr	r2, [pc, #464]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240023d4:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
240023d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
240023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
240023de:	430b      	orrs	r3, r1
240023e0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240023e2:	682b      	ldr	r3, [r5, #0]
240023e4:	031b      	lsls	r3, r3, #12
240023e6:	d51b      	bpl.n	24002420 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
240023e8:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
240023ec:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
240023f0:	f000 8140 	beq.w	24002674 <HAL_RCCEx_PeriphCLKConfig+0x914>
240023f4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
240023f8:	d007      	beq.n	2400240a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
240023fa:	2900      	cmp	r1, #0
240023fc:	f040 8140 	bne.w	24002680 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002400:	f105 0008 	add.w	r0, r5, #8
24002404:	f7ff fbbc 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002408:	4604      	mov	r4, r0
    if (ret == HAL_OK)
2400240a:	2c00      	cmp	r4, #0
2400240c:	f040 813b 	bne.w	24002686 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24002410:	4a64      	ldr	r2, [pc, #400]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
24002412:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
24002416:	6d93      	ldr	r3, [r2, #88]	@ 0x58
24002418:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
2400241c:	430b      	orrs	r3, r1
2400241e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24002420:	682b      	ldr	r3, [r5, #0]
24002422:	035f      	lsls	r7, r3, #13
24002424:	d50f      	bpl.n	24002446 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
24002426:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
2400242a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2400242e:	f000 813b 	beq.w	240026a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
24002432:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24002436:	f000 812d 	beq.w	24002694 <HAL_RCCEx_PeriphCLKConfig+0x934>
2400243a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2400243e:	f000 8124 	beq.w	2400268a <HAL_RCCEx_PeriphCLKConfig+0x92a>
24002442:	2601      	movs	r6, #1
24002444:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24002446:	682b      	ldr	r3, [r5, #0]
24002448:	03d8      	lsls	r0, r3, #15
2400244a:	d509      	bpl.n	24002460 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
2400244c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
2400244e:	2b00      	cmp	r3, #0
24002450:	f000 8133 	beq.w	240026ba <HAL_RCCEx_PeriphCLKConfig+0x95a>
24002454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24002458:	f000 813d 	beq.w	240026d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
2400245c:	2601      	movs	r6, #1
2400245e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24002460:	682b      	ldr	r3, [r5, #0]
24002462:	0099      	lsls	r1, r3, #2
24002464:	d507      	bpl.n	24002476 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24002466:	2102      	movs	r1, #2
24002468:	f105 0028 	add.w	r0, r5, #40	@ 0x28
2400246c:	f7ff fc00 	bl	24001c70 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
24002470:	2800      	cmp	r0, #0
24002472:	bf18      	it	ne
24002474:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24002476:	e9d5 3100 	ldrd	r3, r1, [r5]
2400247a:	039a      	lsls	r2, r3, #14
2400247c:	f140 8143 	bpl.w	24002706 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
24002480:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
24002484:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
24002488:	f000 813f 	beq.w	2400270a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
2400248c:	f200 812c 	bhi.w	240026e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
24002490:	2800      	cmp	r0, #0
24002492:	f000 812f 	beq.w	240026f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
24002496:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24002498:	02df      	lsls	r7, r3, #11
2400249a:	d506      	bpl.n	240024aa <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2400249c:	4841      	ldr	r0, [pc, #260]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
2400249e:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
240024a0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
240024a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
240024a6:	4332      	orrs	r2, r6
240024a8:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
240024aa:	00de      	lsls	r6, r3, #3
240024ac:	d507      	bpl.n	240024be <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
240024ae:	483d      	ldr	r0, [pc, #244]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240024b0:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
240024b4:	6902      	ldr	r2, [r0, #16]
240024b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
240024ba:	4332      	orrs	r2, r6
240024bc:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240024be:	0298      	lsls	r0, r3, #10
240024c0:	d506      	bpl.n	240024d0 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240024c2:	4838      	ldr	r0, [pc, #224]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240024c4:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
240024c6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
240024c8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
240024cc:	4332      	orrs	r2, r6
240024ce:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240024d0:	005a      	lsls	r2, r3, #1
240024d2:	d509      	bpl.n	240024e8 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240024d4:	4a33      	ldr	r2, [pc, #204]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240024d6:	6910      	ldr	r0, [r2, #16]
240024d8:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
240024dc:	6110      	str	r0, [r2, #16]
240024de:	6910      	ldr	r0, [r2, #16]
240024e0:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
240024e4:	4330      	orrs	r0, r6
240024e6:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240024e8:	2b00      	cmp	r3, #0
240024ea:	da06      	bge.n	240024fa <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240024ec:	482d      	ldr	r0, [pc, #180]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
240024ee:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
240024f0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
240024f2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
240024f6:	4332      	orrs	r2, r6
240024f8:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
240024fa:	021f      	lsls	r7, r3, #8
240024fc:	d507      	bpl.n	2400250e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
240024fe:	4a29      	ldr	r2, [pc, #164]	@ (240025a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
24002500:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
24002504:	6d53      	ldr	r3, [r2, #84]	@ 0x54
24002506:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
2400250a:	4303      	orrs	r3, r0
2400250c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2400250e:	07ce      	lsls	r6, r1, #31
24002510:	d506      	bpl.n	24002520 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002512:	2100      	movs	r1, #0
24002514:	f105 0008 	add.w	r0, r5, #8
24002518:	f7ff fb32 	bl	24001b80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
2400251c:	4607      	mov	r7, r0
2400251e:	b900      	cbnz	r0, 24002522 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
24002520:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24002522:	686b      	ldr	r3, [r5, #4]
24002524:	079c      	lsls	r4, r3, #30
24002526:	d506      	bpl.n	24002536 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24002528:	2101      	movs	r1, #1
2400252a:	f105 0008 	add.w	r0, r5, #8
2400252e:	f7ff fb27 	bl	24001b80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
24002532:	4606      	mov	r6, r0
24002534:	b900      	cbnz	r0, 24002538 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
24002536:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24002538:	686b      	ldr	r3, [r5, #4]
2400253a:	0758      	lsls	r0, r3, #29
2400253c:	d506      	bpl.n	2400254c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400253e:	2102      	movs	r1, #2
24002540:	f105 0008 	add.w	r0, r5, #8
24002544:	f7ff fb1c 	bl	24001b80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
24002548:	4604      	mov	r4, r0
2400254a:	b900      	cbnz	r0, 2400254e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
2400254c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400254e:	686b      	ldr	r3, [r5, #4]
24002550:	0719      	lsls	r1, r3, #28
24002552:	d506      	bpl.n	24002562 <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24002554:	2100      	movs	r1, #0
24002556:	f105 0028 	add.w	r0, r5, #40	@ 0x28
2400255a:	f7ff fb89 	bl	24001c70 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400255e:	4606      	mov	r6, r0
24002560:	b900      	cbnz	r0, 24002564 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
24002562:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24002564:	686b      	ldr	r3, [r5, #4]
24002566:	06da      	lsls	r2, r3, #27
24002568:	d506      	bpl.n	24002578 <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400256a:	2101      	movs	r1, #1
2400256c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002570:	f7ff fb7e 	bl	24001c70 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24002574:	4604      	mov	r4, r0
24002576:	b900      	cbnz	r0, 2400257a <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
24002578:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400257a:	686b      	ldr	r3, [r5, #4]
2400257c:	069b      	lsls	r3, r3, #26
2400257e:	f100 80ca 	bmi.w	24002716 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
24002582:	1e20      	subs	r0, r4, #0
24002584:	bf18      	it	ne
24002586:	2001      	movne	r0, #1
}
24002588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400258c:	2101      	movs	r1, #1
2400258e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002592:	f7ff fb6d 	bl	24001c70 <RCCEx_PLL3_Config>
24002596:	e6ac      	b.n	240022f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24002598:	2601      	movs	r6, #1
2400259a:	4634      	mov	r4, r6
2400259c:	e6b5      	b.n	2400230a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
2400259e:	4626      	mov	r6, r4
240025a0:	e6b3      	b.n	2400230a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
240025a2:	bf00      	nop
240025a4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
240025a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
240025ac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
240025b0:	d003      	beq.n	240025ba <HAL_RCCEx_PeriphCLKConfig+0x85a>
240025b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
240025b6:	f47f aeba 	bne.w	2400232e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
240025ba:	b9ac      	cbnz	r4, 240025e8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
240025bc:	4a5b      	ldr	r2, [pc, #364]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
240025be:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
240025c2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
240025c4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
240025c8:	430b      	orrs	r3, r1
240025ca:	6553      	str	r3, [r2, #84]	@ 0x54
240025cc:	e6b1      	b.n	24002332 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240025ce:	2100      	movs	r1, #0
240025d0:	f105 0008 	add.w	r0, r5, #8
240025d4:	f7ff fad4 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240025d8:	4604      	mov	r4, r0
        break;
240025da:	e7ee      	b.n	240025ba <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240025dc:	2102      	movs	r1, #2
240025de:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240025e2:	f7ff fb45 	bl	24001c70 <RCCEx_PLL3_Config>
240025e6:	e7f7      	b.n	240025d8 <HAL_RCCEx_PeriphCLKConfig+0x878>
240025e8:	4626      	mov	r6, r4
240025ea:	e6a2      	b.n	24002332 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
240025ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
240025f0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
240025f4:	d003      	beq.n	240025fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
240025f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
240025fa:	f47f aeac 	bne.w	24002356 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
240025fe:	b9ac      	cbnz	r4, 2400262c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24002600:	4a4a      	ldr	r2, [pc, #296]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
24002602:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
24002606:	6d93      	ldr	r3, [r2, #88]	@ 0x58
24002608:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
2400260c:	430b      	orrs	r3, r1
2400260e:	6593      	str	r3, [r2, #88]	@ 0x58
24002610:	e6a3      	b.n	2400235a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002612:	2100      	movs	r1, #0
24002614:	f105 0008 	add.w	r0, r5, #8
24002618:	f7ff fab2 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400261c:	4604      	mov	r4, r0
        break;
2400261e:	e7ee      	b.n	240025fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002620:	2102      	movs	r1, #2
24002622:	f105 0028 	add.w	r0, r5, #40	@ 0x28
24002626:	f7ff fb23 	bl	24001c70 <RCCEx_PLL3_Config>
2400262a:	e7f7      	b.n	2400261c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
2400262c:	4626      	mov	r6, r4
2400262e:	e694      	b.n	2400235a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
24002630:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
24002634:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
24002638:	d003      	beq.n	24002642 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
2400263a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
2400263e:	f47f ae9e 	bne.w	2400237e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
24002642:	b9ac      	cbnz	r4, 24002670 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24002644:	4a39      	ldr	r2, [pc, #228]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
24002646:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
2400264a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
2400264c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
24002650:	430b      	orrs	r3, r1
24002652:	6593      	str	r3, [r2, #88]	@ 0x58
24002654:	e695      	b.n	24002382 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002656:	2100      	movs	r1, #0
24002658:	f105 0008 	add.w	r0, r5, #8
2400265c:	f7ff fa90 	bl	24001b80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002660:	4604      	mov	r4, r0
        break;
24002662:	e7ee      	b.n	24002642 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002664:	2102      	movs	r1, #2
24002666:	f105 0028 	add.w	r0, r5, #40	@ 0x28
2400266a:	f7ff fb01 	bl	24001c70 <RCCEx_PLL3_Config>
2400266e:	e7f7      	b.n	24002660 <HAL_RCCEx_PeriphCLKConfig+0x900>
24002670:	4626      	mov	r6, r4
24002672:	e686      	b.n	24002382 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002674:	2102      	movs	r1, #2
24002676:	f105 0028 	add.w	r0, r5, #40	@ 0x28
2400267a:	f7ff faf9 	bl	24001c70 <RCCEx_PLL3_Config>
2400267e:	e6c3      	b.n	24002408 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
24002680:	2601      	movs	r6, #1
24002682:	4634      	mov	r4, r6
24002684:	e6cc      	b.n	24002420 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
24002686:	4626      	mov	r6, r4
24002688:	e6ca      	b.n	24002420 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400268a:	4a28      	ldr	r2, [pc, #160]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
2400268c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
2400268e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24002692:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
24002694:	b97c      	cbnz	r4, 240026b6 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24002696:	4a25      	ldr	r2, [pc, #148]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
24002698:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
2400269c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
2400269e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
240026a2:	430b      	orrs	r3, r1
240026a4:	6553      	str	r3, [r2, #84]	@ 0x54
240026a6:	e6ce      	b.n	24002446 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240026a8:	2101      	movs	r1, #1
240026aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
240026ae:	f7ff fadf 	bl	24001c70 <RCCEx_PLL3_Config>
240026b2:	4604      	mov	r4, r0
        break;
240026b4:	e7ee      	b.n	24002694 <HAL_RCCEx_PeriphCLKConfig+0x934>
240026b6:	4626      	mov	r6, r4
240026b8:	e6c5      	b.n	24002446 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240026ba:	4a1c      	ldr	r2, [pc, #112]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
240026bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
240026be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240026c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
240026c4:	b974      	cbnz	r4, 240026e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
240026c6:	4a19      	ldr	r2, [pc, #100]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
240026c8:	6d29      	ldr	r1, [r5, #80]	@ 0x50
240026ca:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
240026cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240026d0:	430b      	orrs	r3, r1
240026d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
240026d4:	e6c4      	b.n	24002460 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240026d6:	2102      	movs	r1, #2
240026d8:	f105 0008 	add.w	r0, r5, #8
240026dc:	f7ff fa50 	bl	24001b80 <RCCEx_PLL2_Config>
240026e0:	4604      	mov	r4, r0
        break;
240026e2:	e7ef      	b.n	240026c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
240026e4:	4626      	mov	r6, r4
240026e6:	e6bb      	b.n	24002460 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
240026e8:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
240026ec:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
240026f0:	f47f aed1 	bne.w	24002496 <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
240026f4:	2c00      	cmp	r4, #0
240026f6:	f47f aecf 	bne.w	24002498 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
240026fa:	4c0c      	ldr	r4, [pc, #48]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
240026fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
240026fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
24002702:	4302      	orrs	r2, r0
24002704:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
24002706:	4634      	mov	r4, r6
24002708:	e6c6      	b.n	24002498 <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400270a:	4f08      	ldr	r7, [pc, #32]	@ (2400272c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
2400270c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2400270e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24002712:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
24002714:	e7ee      	b.n	240026f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002716:	2102      	movs	r1, #2
24002718:	f105 0028 	add.w	r0, r5, #40	@ 0x28
2400271c:	f7ff faa8 	bl	24001c70 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24002720:	2800      	cmp	r0, #0
24002722:	f43f af2e 	beq.w	24002582 <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
24002726:	2001      	movs	r0, #1
24002728:	e72e      	b.n	24002588 <HAL_RCCEx_PeriphCLKConfig+0x828>
2400272a:	bf00      	nop
2400272c:	58024400 	.word	0x58024400

24002730 <memset>:
24002730:	4402      	add	r2, r0
24002732:	4603      	mov	r3, r0
24002734:	4293      	cmp	r3, r2
24002736:	d100      	bne.n	2400273a <memset+0xa>
24002738:	4770      	bx	lr
2400273a:	f803 1b01 	strb.w	r1, [r3], #1
2400273e:	e7f9      	b.n	24002734 <memset+0x4>

24002740 <_init>:
24002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24002742:	bf00      	nop
24002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
24002746:	bc08      	pop	{r3}
24002748:	469e      	mov	lr, r3
2400274a:	4770      	bx	lr

2400274c <_fini>:
2400274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400274e:	bf00      	nop
24002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
24002752:	bc08      	pop	{r3}
24002754:	469e      	mov	lr, r3
24002756:	4770      	bx	lr
