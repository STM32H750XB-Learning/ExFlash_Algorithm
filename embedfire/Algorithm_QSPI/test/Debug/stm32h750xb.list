
stm32h750xb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001fc  24000004  24000004  00010004  2**0
                  ALLOC
  1 .init_array   00000004  24000200  24000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fini_array   00000004  24000204  24000204  00010204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000010  24000208  24000208  00010208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000070  24000218  24000218  00010218  2**2
                  ALLOC
  5 .text         00002324  24000288  24000288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .Dev_info     000000c8  240025ac  240025ac  000225ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata       00000010  24002674  24002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 ._user_heap_stack 00000600  24002684  24002684  00012684  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022674  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000226a2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a6d6  00000000  00000000  000226e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000019da  00000000  00000000  0002cdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000007a0  00000000  00000000  0002e795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003634e  00000000  00000000  0002ef35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000a492  00000000  00000000  00065283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001588a0  00000000  00000000  0006f715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000059d  00000000  00000000  001c7fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001db8  00000000  00000000  001c8554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000288 <__do_global_dtors_aux>:
24000288:	b510      	push	{r4, lr}
2400028a:	4c05      	ldr	r4, [pc, #20]	; (240002a0 <__do_global_dtors_aux+0x18>)
2400028c:	7823      	ldrb	r3, [r4, #0]
2400028e:	b933      	cbnz	r3, 2400029e <__do_global_dtors_aux+0x16>
24000290:	4b04      	ldr	r3, [pc, #16]	; (240002a4 <__do_global_dtors_aux+0x1c>)
24000292:	b113      	cbz	r3, 2400029a <__do_global_dtors_aux+0x12>
24000294:	4804      	ldr	r0, [pc, #16]	; (240002a8 <__do_global_dtors_aux+0x20>)
24000296:	f3af 8000 	nop.w
2400029a:	2301      	movs	r3, #1
2400029c:	7023      	strb	r3, [r4, #0]
2400029e:	bd10      	pop	{r4, pc}
240002a0:	24000218 	.word	0x24000218
240002a4:	00000000 	.word	0x00000000
240002a8:	24002594 	.word	0x24002594

240002ac <frame_dummy>:
240002ac:	b508      	push	{r3, lr}
240002ae:	4b03      	ldr	r3, [pc, #12]	; (240002bc <frame_dummy+0x10>)
240002b0:	b11b      	cbz	r3, 240002ba <frame_dummy+0xe>
240002b2:	4903      	ldr	r1, [pc, #12]	; (240002c0 <frame_dummy+0x14>)
240002b4:	4803      	ldr	r0, [pc, #12]	; (240002c4 <frame_dummy+0x18>)
240002b6:	f3af 8000 	nop.w
240002ba:	bd08      	pop	{r3, pc}
240002bc:	00000000 	.word	0x00000000
240002c0:	2400021c 	.word	0x2400021c
240002c4:	24002594 	.word	0x24002594

240002c8 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
240002c8:	b580      	push	{r7, lr}
240002ca:	b084      	sub	sp, #16
240002cc:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
240002ce:	4b1b      	ldr	r3, [pc, #108]	; (2400033c <Init+0x74>)
240002d0:	4a1b      	ldr	r2, [pc, #108]	; (24000340 <Init+0x78>)
240002d2:	601a      	str	r2, [r3, #0]


    SystemInit();
240002d4:	f000 f970 	bl	240005b8 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
240002d8:	4b1a      	ldr	r3, [pc, #104]	; (24000344 <Init+0x7c>)
240002da:	4a1b      	ldr	r2, [pc, #108]	; (24000348 <Init+0x80>)
240002dc:	609a      	str	r2, [r3, #8]
240002de:	2300      	movs	r3, #0
240002e0:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240002e2:	687b      	ldr	r3, [r7, #4]
240002e4:	f383 8810 	msr	PRIMASK, r3
}
240002e8:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
240002ea:	f000 fc49 	bl	24000b80 <HAL_Init>

    SystemClock_Config();
240002ee:	f000 f895 	bl	2400041c <SystemClock_Config>

    MX_GPIO_Init();
240002f2:	f000 f82d 	bl	24000350 <MX_GPIO_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
240002f6:	4b15      	ldr	r3, [pc, #84]	; (2400034c <Init+0x84>)
240002f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
240002fa:	4a14      	ldr	r2, [pc, #80]	; (2400034c <Init+0x84>)
240002fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24000300:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
24000302:	4b12      	ldr	r3, [pc, #72]	; (2400034c <Init+0x84>)
24000304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000306:	4a11      	ldr	r2, [pc, #68]	; (2400034c <Init+0x84>)
24000308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400030c:	67d3      	str	r3, [r2, #124]	; 0x7c

    W25QXX_Init();
2400030e:	f000 fbf5 	bl	24000afc <W25QXX_Init>

    W25QXX_MemoryMapped();
24000312:	f000 fbff 	bl	24000b14 <W25QXX_MemoryMapped>

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
24000316:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
2400031a:	681b      	ldr	r3, [r3, #0]
2400031c:	60fb      	str	r3, [r7, #12]
    a++;
2400031e:	68fb      	ldr	r3, [r7, #12]
24000320:	3301      	adds	r3, #1
24000322:	60fb      	str	r3, [r7, #12]
24000324:	2301      	movs	r3, #1
24000326:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000328:	68bb      	ldr	r3, [r7, #8]
2400032a:	f383 8810 	msr	PRIMASK, r3
}
2400032e:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24000330:	2301      	movs	r3, #1
}
24000332:	4618      	mov	r0, r3
24000334:	3710      	adds	r7, #16
24000336:	46bd      	mov	sp, r7
24000338:	bd80      	pop	{r7, pc}
2400033a:	bf00      	nop
2400033c:	e000edf0 	.word	0xe000edf0
24000340:	a05f0000 	.word	0xa05f0000
24000344:	e000ed00 	.word	0xe000ed00
24000348:	24000200 	.word	0x24000200
2400034c:	58024400 	.word	0x58024400

24000350 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
24000350:	b480      	push	{r7}
24000352:	b087      	sub	sp, #28
24000354:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000356:	4b30      	ldr	r3, [pc, #192]	; (24000418 <MX_GPIO_Init+0xc8>)
24000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400035c:	4a2e      	ldr	r2, [pc, #184]	; (24000418 <MX_GPIO_Init+0xc8>)
2400035e:	f043 0304 	orr.w	r3, r3, #4
24000362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000366:	4b2c      	ldr	r3, [pc, #176]	; (24000418 <MX_GPIO_Init+0xc8>)
24000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400036c:	f003 0304 	and.w	r3, r3, #4
24000370:	617b      	str	r3, [r7, #20]
24000372:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000374:	4b28      	ldr	r3, [pc, #160]	; (24000418 <MX_GPIO_Init+0xc8>)
24000376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400037a:	4a27      	ldr	r2, [pc, #156]	; (24000418 <MX_GPIO_Init+0xc8>)
2400037c:	f043 0301 	orr.w	r3, r3, #1
24000380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000384:	4b24      	ldr	r3, [pc, #144]	; (24000418 <MX_GPIO_Init+0xc8>)
24000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400038a:	f003 0301 	and.w	r3, r3, #1
2400038e:	613b      	str	r3, [r7, #16]
24000390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24000392:	4b21      	ldr	r3, [pc, #132]	; (24000418 <MX_GPIO_Init+0xc8>)
24000394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000398:	4a1f      	ldr	r2, [pc, #124]	; (24000418 <MX_GPIO_Init+0xc8>)
2400039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400039e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240003a2:	4b1d      	ldr	r3, [pc, #116]	; (24000418 <MX_GPIO_Init+0xc8>)
240003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240003ac:	60fb      	str	r3, [r7, #12]
240003ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
240003b0:	4b19      	ldr	r3, [pc, #100]	; (24000418 <MX_GPIO_Init+0xc8>)
240003b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003b6:	4a18      	ldr	r2, [pc, #96]	; (24000418 <MX_GPIO_Init+0xc8>)
240003b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240003bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240003c0:	4b15      	ldr	r3, [pc, #84]	; (24000418 <MX_GPIO_Init+0xc8>)
240003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
240003ca:	60bb      	str	r3, [r7, #8]
240003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
240003ce:	4b12      	ldr	r3, [pc, #72]	; (24000418 <MX_GPIO_Init+0xc8>)
240003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003d4:	4a10      	ldr	r2, [pc, #64]	; (24000418 <MX_GPIO_Init+0xc8>)
240003d6:	f043 0320 	orr.w	r3, r3, #32
240003da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240003de:	4b0e      	ldr	r3, [pc, #56]	; (24000418 <MX_GPIO_Init+0xc8>)
240003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003e4:	f003 0320 	and.w	r3, r3, #32
240003e8:	607b      	str	r3, [r7, #4]
240003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
240003ec:	4b0a      	ldr	r3, [pc, #40]	; (24000418 <MX_GPIO_Init+0xc8>)
240003ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240003f2:	4a09      	ldr	r2, [pc, #36]	; (24000418 <MX_GPIO_Init+0xc8>)
240003f4:	f043 0302 	orr.w	r3, r3, #2
240003f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240003fc:	4b06      	ldr	r3, [pc, #24]	; (24000418 <MX_GPIO_Init+0xc8>)
240003fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000402:	f003 0302 	and.w	r3, r3, #2
24000406:	603b      	str	r3, [r7, #0]
24000408:	683b      	ldr	r3, [r7, #0]

}
2400040a:	bf00      	nop
2400040c:	371c      	adds	r7, #28
2400040e:	46bd      	mov	sp, r7
24000410:	f85d 7b04 	ldr.w	r7, [sp], #4
24000414:	4770      	bx	lr
24000416:	bf00      	nop
24000418:	58024400 	.word	0x58024400

2400041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2400041c:	b580      	push	{r7, lr}
2400041e:	b09e      	sub	sp, #120	; 0x78
24000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24000422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24000426:	224c      	movs	r2, #76	; 0x4c
24000428:	2100      	movs	r1, #0
2400042a:	4618      	mov	r0, r3
2400042c:	f002 f8aa 	bl	24002584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24000430:	f107 030c 	add.w	r3, r7, #12
24000434:	2220      	movs	r2, #32
24000436:	2100      	movs	r1, #0
24000438:	4618      	mov	r0, r3
2400043a:	f002 f8a3 	bl	24002584 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
2400043e:	2002      	movs	r0, #2
24000440:	f000 fd30 	bl	24000ea4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24000444:	2300      	movs	r3, #0
24000446:	60bb      	str	r3, [r7, #8]
24000448:	4b48      	ldr	r3, [pc, #288]	; (2400056c <SystemClock_Config+0x150>)
2400044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400044c:	4a47      	ldr	r2, [pc, #284]	; (2400056c <SystemClock_Config+0x150>)
2400044e:	f023 0301 	bic.w	r3, r3, #1
24000452:	62d3      	str	r3, [r2, #44]	; 0x2c
24000454:	4b45      	ldr	r3, [pc, #276]	; (2400056c <SystemClock_Config+0x150>)
24000456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000458:	f003 0301 	and.w	r3, r3, #1
2400045c:	60bb      	str	r3, [r7, #8]
2400045e:	4b44      	ldr	r3, [pc, #272]	; (24000570 <SystemClock_Config+0x154>)
24000460:	699b      	ldr	r3, [r3, #24]
24000462:	4a43      	ldr	r2, [pc, #268]	; (24000570 <SystemClock_Config+0x154>)
24000464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000468:	6193      	str	r3, [r2, #24]
2400046a:	4b41      	ldr	r3, [pc, #260]	; (24000570 <SystemClock_Config+0x154>)
2400046c:	699b      	ldr	r3, [r3, #24]
2400046e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000472:	60bb      	str	r3, [r7, #8]
24000474:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24000476:	bf00      	nop
24000478:	4b3d      	ldr	r3, [pc, #244]	; (24000570 <SystemClock_Config+0x154>)
2400047a:	699b      	ldr	r3, [r3, #24]
2400047c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000484:	d1f8      	bne.n	24000478 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000486:	4b3b      	ldr	r3, [pc, #236]	; (24000574 <SystemClock_Config+0x158>)
24000488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400048c:	4a39      	ldr	r2, [pc, #228]	; (24000574 <SystemClock_Config+0x158>)
2400048e:	f043 0302 	orr.w	r3, r3, #2
24000492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24000496:	4b37      	ldr	r3, [pc, #220]	; (24000574 <SystemClock_Config+0x158>)
24000498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400049c:	f003 0302 	and.w	r3, r3, #2
240004a0:	607b      	str	r3, [r7, #4]
240004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240004a4:	2300      	movs	r3, #0
240004a6:	603b      	str	r3, [r7, #0]
240004a8:	4b31      	ldr	r3, [pc, #196]	; (24000570 <SystemClock_Config+0x154>)
240004aa:	699b      	ldr	r3, [r3, #24]
240004ac:	4a30      	ldr	r2, [pc, #192]	; (24000570 <SystemClock_Config+0x154>)
240004ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240004b2:	6193      	str	r3, [r2, #24]
240004b4:	4b2e      	ldr	r3, [pc, #184]	; (24000570 <SystemClock_Config+0x154>)
240004b6:	699b      	ldr	r3, [r3, #24]
240004b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240004bc:	603b      	str	r3, [r7, #0]
240004be:	4b2b      	ldr	r3, [pc, #172]	; (2400056c <SystemClock_Config+0x150>)
240004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240004c2:	4a2a      	ldr	r2, [pc, #168]	; (2400056c <SystemClock_Config+0x150>)
240004c4:	f043 0301 	orr.w	r3, r3, #1
240004c8:	62d3      	str	r3, [r2, #44]	; 0x2c
240004ca:	4b28      	ldr	r3, [pc, #160]	; (2400056c <SystemClock_Config+0x150>)
240004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240004ce:	f003 0301 	and.w	r3, r3, #1
240004d2:	603b      	str	r3, [r7, #0]
240004d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240004d6:	bf00      	nop
240004d8:	4b25      	ldr	r3, [pc, #148]	; (24000570 <SystemClock_Config+0x154>)
240004da:	699b      	ldr	r3, [r3, #24]
240004dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240004e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240004e4:	d1f8      	bne.n	240004d8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
240004e6:	2301      	movs	r3, #1
240004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
240004ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
240004ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240004f0:	2302      	movs	r3, #2
240004f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240004f4:	2302      	movs	r3, #2
240004f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
240004f8:	2305      	movs	r3, #5
240004fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
240004fc:	23c0      	movs	r3, #192	; 0xc0
240004fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
24000500:	2302      	movs	r3, #2
24000502:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
24000504:	2302      	movs	r3, #2
24000506:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
24000508:	2302      	movs	r3, #2
2400050a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
2400050c:	2308      	movs	r3, #8
2400050e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000510:	2300      	movs	r3, #0
24000512:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000514:	2300      	movs	r3, #0
24000516:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
2400051c:	4618      	mov	r0, r3
2400051e:	f001 f8a7 	bl	24001670 <HAL_RCC_OscConfig>
24000522:	4603      	mov	r3, r0
24000524:	2b00      	cmp	r3, #0
24000526:	d001      	beq.n	2400052c <SystemClock_Config+0x110>
  {
    Error_Handler();
24000528:	f000 f826 	bl	24000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400052c:	233f      	movs	r3, #63	; 0x3f
2400052e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000530:	2303      	movs	r3, #3
24000532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000534:	2300      	movs	r3, #0
24000536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000538:	2308      	movs	r3, #8
2400053a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400053c:	2340      	movs	r3, #64	; 0x40
2400053e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000540:	2340      	movs	r3, #64	; 0x40
24000542:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000544:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2400054a:	2340      	movs	r3, #64	; 0x40
2400054c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400054e:	f107 030c 	add.w	r3, r7, #12
24000552:	2104      	movs	r1, #4
24000554:	4618      	mov	r0, r3
24000556:	f001 fce5 	bl	24001f24 <HAL_RCC_ClockConfig>
2400055a:	4603      	mov	r3, r0
2400055c:	2b00      	cmp	r3, #0
2400055e:	d001      	beq.n	24000564 <SystemClock_Config+0x148>
  {
    Error_Handler();
24000560:	f000 f80a 	bl	24000578 <Error_Handler>
  }
}
24000564:	bf00      	nop
24000566:	3778      	adds	r7, #120	; 0x78
24000568:	46bd      	mov	sp, r7
2400056a:	bd80      	pop	{r7, pc}
2400056c:	58000400 	.word	0x58000400
24000570:	58024800 	.word	0x58024800
24000574:	58024400 	.word	0x58024400

24000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24000578:	b480      	push	{r7}
2400057a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
2400057c:	b672      	cpsid	i
}
2400057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
24000580:	e7fe      	b.n	24000580 <Error_Handler+0x8>
	...

24000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24000584:	b480      	push	{r7}
24000586:	b083      	sub	sp, #12
24000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400058a:	4b0a      	ldr	r3, [pc, #40]	; (240005b4 <HAL_MspInit+0x30>)
2400058c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000590:	4a08      	ldr	r2, [pc, #32]	; (240005b4 <HAL_MspInit+0x30>)
24000592:	f043 0302 	orr.w	r3, r3, #2
24000596:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400059a:	4b06      	ldr	r3, [pc, #24]	; (240005b4 <HAL_MspInit+0x30>)
2400059c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240005a0:	f003 0302 	and.w	r3, r3, #2
240005a4:	607b      	str	r3, [r7, #4]
240005a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
240005a8:	bf00      	nop
240005aa:	370c      	adds	r7, #12
240005ac:	46bd      	mov	sp, r7
240005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240005b2:	4770      	bx	lr
240005b4:	58024400 	.word	0x58024400

240005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
240005b8:	b480      	push	{r7}
240005ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240005bc:	4b37      	ldr	r3, [pc, #220]	; (2400069c <SystemInit+0xe4>)
240005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240005c2:	4a36      	ldr	r2, [pc, #216]	; (2400069c <SystemInit+0xe4>)
240005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
240005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240005cc:	4b34      	ldr	r3, [pc, #208]	; (240006a0 <SystemInit+0xe8>)
240005ce:	681b      	ldr	r3, [r3, #0]
240005d0:	f003 030f 	and.w	r3, r3, #15
240005d4:	2b06      	cmp	r3, #6
240005d6:	d807      	bhi.n	240005e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240005d8:	4b31      	ldr	r3, [pc, #196]	; (240006a0 <SystemInit+0xe8>)
240005da:	681b      	ldr	r3, [r3, #0]
240005dc:	f023 030f 	bic.w	r3, r3, #15
240005e0:	4a2f      	ldr	r2, [pc, #188]	; (240006a0 <SystemInit+0xe8>)
240005e2:	f043 0307 	orr.w	r3, r3, #7
240005e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
240005e8:	4b2e      	ldr	r3, [pc, #184]	; (240006a4 <SystemInit+0xec>)
240005ea:	681b      	ldr	r3, [r3, #0]
240005ec:	4a2d      	ldr	r2, [pc, #180]	; (240006a4 <SystemInit+0xec>)
240005ee:	f043 0301 	orr.w	r3, r3, #1
240005f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
240005f4:	4b2b      	ldr	r3, [pc, #172]	; (240006a4 <SystemInit+0xec>)
240005f6:	2200      	movs	r2, #0
240005f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
240005fa:	4b2a      	ldr	r3, [pc, #168]	; (240006a4 <SystemInit+0xec>)
240005fc:	681a      	ldr	r2, [r3, #0]
240005fe:	4929      	ldr	r1, [pc, #164]	; (240006a4 <SystemInit+0xec>)
24000600:	4b29      	ldr	r3, [pc, #164]	; (240006a8 <SystemInit+0xf0>)
24000602:	4013      	ands	r3, r2
24000604:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000606:	4b26      	ldr	r3, [pc, #152]	; (240006a0 <SystemInit+0xe8>)
24000608:	681b      	ldr	r3, [r3, #0]
2400060a:	f003 0308 	and.w	r3, r3, #8
2400060e:	2b00      	cmp	r3, #0
24000610:	d007      	beq.n	24000622 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24000612:	4b23      	ldr	r3, [pc, #140]	; (240006a0 <SystemInit+0xe8>)
24000614:	681b      	ldr	r3, [r3, #0]
24000616:	f023 030f 	bic.w	r3, r3, #15
2400061a:	4a21      	ldr	r2, [pc, #132]	; (240006a0 <SystemInit+0xe8>)
2400061c:	f043 0307 	orr.w	r3, r3, #7
24000620:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24000622:	4b20      	ldr	r3, [pc, #128]	; (240006a4 <SystemInit+0xec>)
24000624:	2200      	movs	r2, #0
24000626:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24000628:	4b1e      	ldr	r3, [pc, #120]	; (240006a4 <SystemInit+0xec>)
2400062a:	2200      	movs	r2, #0
2400062c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
2400062e:	4b1d      	ldr	r3, [pc, #116]	; (240006a4 <SystemInit+0xec>)
24000630:	2200      	movs	r2, #0
24000632:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24000634:	4b1b      	ldr	r3, [pc, #108]	; (240006a4 <SystemInit+0xec>)
24000636:	4a1d      	ldr	r2, [pc, #116]	; (240006ac <SystemInit+0xf4>)
24000638:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
2400063a:	4b1a      	ldr	r3, [pc, #104]	; (240006a4 <SystemInit+0xec>)
2400063c:	4a1c      	ldr	r2, [pc, #112]	; (240006b0 <SystemInit+0xf8>)
2400063e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24000640:	4b18      	ldr	r3, [pc, #96]	; (240006a4 <SystemInit+0xec>)
24000642:	4a1c      	ldr	r2, [pc, #112]	; (240006b4 <SystemInit+0xfc>)
24000644:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24000646:	4b17      	ldr	r3, [pc, #92]	; (240006a4 <SystemInit+0xec>)
24000648:	2200      	movs	r2, #0
2400064a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
2400064c:	4b15      	ldr	r3, [pc, #84]	; (240006a4 <SystemInit+0xec>)
2400064e:	4a19      	ldr	r2, [pc, #100]	; (240006b4 <SystemInit+0xfc>)
24000650:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24000652:	4b14      	ldr	r3, [pc, #80]	; (240006a4 <SystemInit+0xec>)
24000654:	2200      	movs	r2, #0
24000656:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24000658:	4b12      	ldr	r3, [pc, #72]	; (240006a4 <SystemInit+0xec>)
2400065a:	4a16      	ldr	r2, [pc, #88]	; (240006b4 <SystemInit+0xfc>)
2400065c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2400065e:	4b11      	ldr	r3, [pc, #68]	; (240006a4 <SystemInit+0xec>)
24000660:	2200      	movs	r2, #0
24000662:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24000664:	4b0f      	ldr	r3, [pc, #60]	; (240006a4 <SystemInit+0xec>)
24000666:	681b      	ldr	r3, [r3, #0]
24000668:	4a0e      	ldr	r2, [pc, #56]	; (240006a4 <SystemInit+0xec>)
2400066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2400066e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24000670:	4b0c      	ldr	r3, [pc, #48]	; (240006a4 <SystemInit+0xec>)
24000672:	2200      	movs	r2, #0
24000674:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24000676:	4b10      	ldr	r3, [pc, #64]	; (240006b8 <SystemInit+0x100>)
24000678:	681a      	ldr	r2, [r3, #0]
2400067a:	4b10      	ldr	r3, [pc, #64]	; (240006bc <SystemInit+0x104>)
2400067c:	4013      	ands	r3, r2
2400067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24000682:	d202      	bcs.n	2400068a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24000684:	4b0e      	ldr	r3, [pc, #56]	; (240006c0 <SystemInit+0x108>)
24000686:	2201      	movs	r2, #1
24000688:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400068a:	4b0e      	ldr	r3, [pc, #56]	; (240006c4 <SystemInit+0x10c>)
2400068c:	f243 02d2 	movw	r2, #12498	; 0x30d2
24000690:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24000692:	bf00      	nop
24000694:	46bd      	mov	sp, r7
24000696:	f85d 7b04 	ldr.w	r7, [sp], #4
2400069a:	4770      	bx	lr
2400069c:	e000ed00 	.word	0xe000ed00
240006a0:	52002000 	.word	0x52002000
240006a4:	58024400 	.word	0x58024400
240006a8:	eaf6ed7f 	.word	0xeaf6ed7f
240006ac:	02020200 	.word	0x02020200
240006b0:	01ff0000 	.word	0x01ff0000
240006b4:	01010280 	.word	0x01010280
240006b8:	5c001000 	.word	0x5c001000
240006bc:	ffff0000 	.word	0xffff0000
240006c0:	51008108 	.word	0x51008108
240006c4:	52004000 	.word	0x52004000

240006c8 <W25QXX_WriteEnable>:
#define W25QXX_MODE_QPI		1
static uint8_t w25q256_mode = W25QXX_MODE_SPI;	// 0-spi, 1-qpi
static uint8_t w25qxx_buf[4096];

static void W25QXX_WriteEnable(void)
{
240006c8:	b580      	push	{r7, lr}
240006ca:	b08e      	sub	sp, #56	; 0x38
240006cc:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef cmd;

	if(w25q256_mode == W25QXX_MODE_SPI)
240006ce:	4b17      	ldr	r3, [pc, #92]	; (2400072c <W25QXX_WriteEnable+0x64>)
240006d0:	781b      	ldrb	r3, [r3, #0]
240006d2:	2b00      	cmp	r3, #0
240006d4:	d103      	bne.n	240006de <W25QXX_WriteEnable+0x16>
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
240006da:	61bb      	str	r3, [r7, #24]
240006dc:	e002      	b.n	240006e4 <W25QXX_WriteEnable+0x1c>
	else cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
240006de:	f44f 7340 	mov.w	r3, #768	; 0x300
240006e2:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = CMD_WRITE_ENABLE;
240006e4:	2306      	movs	r3, #6
240006e6:	603b      	str	r3, [r7, #0]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
240006e8:	2300      	movs	r3, #0
240006ea:	61fb      	str	r3, [r7, #28]
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
240006ec:	2300      	movs	r3, #0
240006ee:	60fb      	str	r3, [r7, #12]
    cmd.Address = 0x00;
240006f0:	2300      	movs	r3, #0
240006f2:	607b      	str	r3, [r7, #4]

    cmd.DataMode = QSPI_DATA_NONE;
240006f4:	2300      	movs	r3, #0
240006f6:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.NbData = 0;
240006f8:	2300      	movs	r3, #0
240006fa:	62bb      	str	r3, [r7, #40]	; 0x28

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240006fc:	2300      	movs	r3, #0
240006fe:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesSize = 0;
24000700:	2300      	movs	r3, #0
24000702:	613b      	str	r3, [r7, #16]
    cmd.AlternateBytes = 0x00;
24000704:	2300      	movs	r3, #0
24000706:	60bb      	str	r3, [r7, #8]

    cmd.DummyCycles = 0;
24000708:	2300      	movs	r3, #0
2400070a:	617b      	str	r3, [r7, #20]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
2400070c:	2300      	movs	r3, #0
2400070e:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000710:	2300      	movs	r3, #0
24000712:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24000714:	2300      	movs	r3, #0
24000716:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_QSPI_Command(&hqspi, &cmd, 100);
24000718:	463b      	mov	r3, r7
2400071a:	2264      	movs	r2, #100	; 0x64
2400071c:	4619      	mov	r1, r3
2400071e:	4804      	ldr	r0, [pc, #16]	; (24000730 <W25QXX_WriteEnable+0x68>)
24000720:	f000 fbfa 	bl	24000f18 <HAL_QSPI_Command>
}
24000724:	bf00      	nop
24000726:	3738      	adds	r7, #56	; 0x38
24000728:	46bd      	mov	sp, r7
2400072a:	bd80      	pop	{r7, pc}
2400072c:	24000280 	.word	0x24000280
24000730:	24000234 	.word	0x24000234

24000734 <W25QXX_ReadSR>:

uint8_t W25QXX_ReadSR(uint8_t srx)
{
24000734:	b580      	push	{r7, lr}
24000736:	b092      	sub	sp, #72	; 0x48
24000738:	af00      	add	r7, sp, #0
2400073a:	4603      	mov	r3, r0
2400073c:	71fb      	strb	r3, [r7, #7]
	uint8_t dat = 0;
2400073e:	2300      	movs	r3, #0
24000740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	QSPI_CommandTypeDef cmd;
	
	if(w25q256_mode == W25QXX_MODE_SPI)
24000744:	4b29      	ldr	r3, [pc, #164]	; (240007ec <W25QXX_ReadSR+0xb8>)
24000746:	781b      	ldrb	r3, [r3, #0]
24000748:	2b00      	cmp	r3, #0
2400074a:	d106      	bne.n	2400075a <W25QXX_ReadSR+0x26>
	{
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400074c:	f44f 7380 	mov.w	r3, #256	; 0x100
24000750:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.DataMode = QSPI_DATA_1_LINE;
24000752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24000756:	633b      	str	r3, [r7, #48]	; 0x30
24000758:	e005      	b.n	24000766 <W25QXX_ReadSR+0x32>
	}
	else 
	{
		cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
2400075a:	f44f 7340 	mov.w	r3, #768	; 0x300
2400075e:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.DataMode = QSPI_DATA_4_LINES;
24000760:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24000764:	633b      	str	r3, [r7, #48]	; 0x30
	}
	
    switch (srx)
24000766:	79fb      	ldrb	r3, [r7, #7]
24000768:	2b03      	cmp	r3, #3
2400076a:	d00c      	beq.n	24000786 <W25QXX_ReadSR+0x52>
2400076c:	2b03      	cmp	r3, #3
2400076e:	dc0d      	bgt.n	2400078c <W25QXX_ReadSR+0x58>
24000770:	2b01      	cmp	r3, #1
24000772:	d002      	beq.n	2400077a <W25QXX_ReadSR+0x46>
24000774:	2b02      	cmp	r3, #2
24000776:	d003      	beq.n	24000780 <W25QXX_ReadSR+0x4c>
24000778:	e008      	b.n	2400078c <W25QXX_ReadSR+0x58>
	{
    case 1:		cmd.Instruction = CMD_ReadStatusReg1;	break;
2400077a:	2305      	movs	r3, #5
2400077c:	60fb      	str	r3, [r7, #12]
2400077e:	e008      	b.n	24000792 <W25QXX_ReadSR+0x5e>
    case 2:		cmd.Instruction = CMD_ReadStatusReg2;	break;
24000780:	2335      	movs	r3, #53	; 0x35
24000782:	60fb      	str	r3, [r7, #12]
24000784:	e005      	b.n	24000792 <W25QXX_ReadSR+0x5e>
    case 3:		cmd.Instruction = CMD_ReadStatusReg3;	break;
24000786:	2315      	movs	r3, #21
24000788:	60fb      	str	r3, [r7, #12]
2400078a:	e002      	b.n	24000792 <W25QXX_ReadSR+0x5e>
    default:	cmd.Instruction = CMD_ReadStatusReg1;	break;
2400078c:	2305      	movs	r3, #5
2400078e:	60fb      	str	r3, [r7, #12]
24000790:	bf00      	nop
	}
	
	cmd.AddressMode = QSPI_ADDRESS_NONE;
24000792:	2300      	movs	r3, #0
24000794:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
24000796:	2300      	movs	r3, #0
24000798:	61bb      	str	r3, [r7, #24]
    cmd.Address = 0x00;
2400079a:	2300      	movs	r3, #0
2400079c:	613b      	str	r3, [r7, #16]

    cmd.NbData = 1;
2400079e:	2301      	movs	r3, #1
240007a0:	637b      	str	r3, [r7, #52]	; 0x34

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240007a2:	2300      	movs	r3, #0
240007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.AlternateBytesSize = 0;
240007a6:	2300      	movs	r3, #0
240007a8:	61fb      	str	r3, [r7, #28]
    cmd.AlternateBytes = 0x00;
240007aa:	2300      	movs	r3, #0
240007ac:	617b      	str	r3, [r7, #20]

    cmd.DummyCycles = 0;
240007ae:	2300      	movs	r3, #0
240007b0:	623b      	str	r3, [r7, #32]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
240007b2:	2300      	movs	r3, #0
240007b4:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240007b6:	2300      	movs	r3, #0
240007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240007ba:	2300      	movs	r3, #0
240007bc:	643b      	str	r3, [r7, #64]	; 0x40
	
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
240007be:	f107 030c 	add.w	r3, r7, #12
240007c2:	2264      	movs	r2, #100	; 0x64
240007c4:	4619      	mov	r1, r3
240007c6:	480a      	ldr	r0, [pc, #40]	; (240007f0 <W25QXX_ReadSR+0xbc>)
240007c8:	f000 fba6 	bl	24000f18 <HAL_QSPI_Command>
240007cc:	4603      	mov	r3, r0
240007ce:	2b00      	cmp	r3, #0
240007d0:	d106      	bne.n	240007e0 <W25QXX_ReadSR+0xac>
    {
        HAL_QSPI_Receive(&hqspi, &dat, 100);
240007d2:	f107 0347 	add.w	r3, r7, #71	; 0x47
240007d6:	2264      	movs	r2, #100	; 0x64
240007d8:	4619      	mov	r1, r3
240007da:	4805      	ldr	r0, [pc, #20]	; (240007f0 <W25QXX_ReadSR+0xbc>)
240007dc:	f000 fc8c 	bl	240010f8 <HAL_QSPI_Receive>
    }

    return dat;
240007e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
240007e4:	4618      	mov	r0, r3
240007e6:	3748      	adds	r7, #72	; 0x48
240007e8:	46bd      	mov	sp, r7
240007ea:	bd80      	pop	{r7, pc}
240007ec:	24000280 	.word	0x24000280
240007f0:	24000234 	.word	0x24000234

240007f4 <W25QXX_WriteSR>:

static void W25QXX_WriteSR(uint8_t srx, uint8_t dat)
{
240007f4:	b580      	push	{r7, lr}
240007f6:	b090      	sub	sp, #64	; 0x40
240007f8:	af00      	add	r7, sp, #0
240007fa:	4603      	mov	r3, r0
240007fc:	460a      	mov	r2, r1
240007fe:	71fb      	strb	r3, [r7, #7]
24000800:	4613      	mov	r3, r2
24000802:	71bb      	strb	r3, [r7, #6]
	QSPI_CommandTypeDef cmd;
	
	if(w25q256_mode == W25QXX_MODE_SPI)
24000804:	4b28      	ldr	r3, [pc, #160]	; (240008a8 <W25QXX_WriteSR+0xb4>)
24000806:	781b      	ldrb	r3, [r3, #0]
24000808:	2b00      	cmp	r3, #0
2400080a:	d106      	bne.n	2400081a <W25QXX_WriteSR+0x26>
	{
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400080c:	f44f 7380 	mov.w	r3, #256	; 0x100
24000810:	623b      	str	r3, [r7, #32]
		cmd.DataMode = QSPI_DATA_1_LINE;
24000812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24000816:	62fb      	str	r3, [r7, #44]	; 0x2c
24000818:	e005      	b.n	24000826 <W25QXX_WriteSR+0x32>
	}
	else 
	{
		cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
2400081a:	f44f 7340 	mov.w	r3, #768	; 0x300
2400081e:	623b      	str	r3, [r7, #32]
		cmd.DataMode = QSPI_DATA_4_LINES;
24000820:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24000824:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	
	switch (srx)
24000826:	79fb      	ldrb	r3, [r7, #7]
24000828:	2b03      	cmp	r3, #3
2400082a:	d00c      	beq.n	24000846 <W25QXX_WriteSR+0x52>
2400082c:	2b03      	cmp	r3, #3
2400082e:	dc0d      	bgt.n	2400084c <W25QXX_WriteSR+0x58>
24000830:	2b01      	cmp	r3, #1
24000832:	d002      	beq.n	2400083a <W25QXX_WriteSR+0x46>
24000834:	2b02      	cmp	r3, #2
24000836:	d003      	beq.n	24000840 <W25QXX_WriteSR+0x4c>
24000838:	e008      	b.n	2400084c <W25QXX_WriteSR+0x58>
    {
    case 1:		cmd.Instruction = CMD_WriteStatusReg1;	break;
2400083a:	2301      	movs	r3, #1
2400083c:	60bb      	str	r3, [r7, #8]
2400083e:	e008      	b.n	24000852 <W25QXX_WriteSR+0x5e>
    case 2:		cmd.Instruction = CMD_WriteStatusReg2;	break;
24000840:	2331      	movs	r3, #49	; 0x31
24000842:	60bb      	str	r3, [r7, #8]
24000844:	e005      	b.n	24000852 <W25QXX_WriteSR+0x5e>
    case 3:		cmd.Instruction = CMD_WriteStatusReg3;	break;
24000846:	2311      	movs	r3, #17
24000848:	60bb      	str	r3, [r7, #8]
2400084a:	e002      	b.n	24000852 <W25QXX_WriteSR+0x5e>
    default:	cmd.Instruction = CMD_WriteStatusReg1;	break;
2400084c:	2301      	movs	r3, #1
2400084e:	60bb      	str	r3, [r7, #8]
24000850:	bf00      	nop
    }
	
	cmd.AddressMode = QSPI_ADDRESS_NONE;
24000852:	2300      	movs	r3, #0
24000854:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
24000856:	2300      	movs	r3, #0
24000858:	617b      	str	r3, [r7, #20]
    cmd.Address = 0x00;
2400085a:	2300      	movs	r3, #0
2400085c:	60fb      	str	r3, [r7, #12]

    cmd.NbData = 1;
2400085e:	2301      	movs	r3, #1
24000860:	633b      	str	r3, [r7, #48]	; 0x30

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24000862:	2300      	movs	r3, #0
24000864:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.AlternateBytesSize = 0;
24000866:	2300      	movs	r3, #0
24000868:	61bb      	str	r3, [r7, #24]
    cmd.AlternateBytes = 0x00;
2400086a:	2300      	movs	r3, #0
2400086c:	613b      	str	r3, [r7, #16]

    cmd.DummyCycles = 0;
2400086e:	2300      	movs	r3, #0
24000870:	61fb      	str	r3, [r7, #28]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
24000872:	2300      	movs	r3, #0
24000874:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000876:	2300      	movs	r3, #0
24000878:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400087a:	2300      	movs	r3, #0
2400087c:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
2400087e:	f107 0308 	add.w	r3, r7, #8
24000882:	2264      	movs	r2, #100	; 0x64
24000884:	4619      	mov	r1, r3
24000886:	4809      	ldr	r0, [pc, #36]	; (240008ac <W25QXX_WriteSR+0xb8>)
24000888:	f000 fb46 	bl	24000f18 <HAL_QSPI_Command>
2400088c:	4603      	mov	r3, r0
2400088e:	2b00      	cmp	r3, #0
24000890:	d106      	bne.n	240008a0 <W25QXX_WriteSR+0xac>
    {
        HAL_QSPI_Transmit(&hqspi, &dat, 1000);
24000892:	1dbb      	adds	r3, r7, #6
24000894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24000898:	4619      	mov	r1, r3
2400089a:	4804      	ldr	r0, [pc, #16]	; (240008ac <W25QXX_WriteSR+0xb8>)
2400089c:	f000 fb9a 	bl	24000fd4 <HAL_QSPI_Transmit>
    }
}
240008a0:	bf00      	nop
240008a2:	3740      	adds	r7, #64	; 0x40
240008a4:	46bd      	mov	sp, r7
240008a6:	bd80      	pop	{r7, pc}
240008a8:	24000280 	.word	0x24000280
240008ac:	24000234 	.word	0x24000234

240008b0 <W25QXX_ExitQPIMode>:
//	cfg.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
//	HAL_QSPI_AutoPolling(&hqspi, &cmd, &cfg, 10000);
}

static void W25QXX_ExitQPIMode(void)
{
240008b0:	b580      	push	{r7, lr}
240008b2:	b08e      	sub	sp, #56	; 0x38
240008b4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef cmd;

    cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
240008b6:	f44f 7340 	mov.w	r3, #768	; 0x300
240008ba:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = CMD_ExitQPIMode;
240008bc:	23ff      	movs	r3, #255	; 0xff
240008be:	603b      	str	r3, [r7, #0]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
240008c0:	2300      	movs	r3, #0
240008c2:	61fb      	str	r3, [r7, #28]
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
240008c4:	2300      	movs	r3, #0
240008c6:	60fb      	str	r3, [r7, #12]
    cmd.Address = 0x00;
240008c8:	2300      	movs	r3, #0
240008ca:	607b      	str	r3, [r7, #4]

    cmd.DataMode = QSPI_DATA_NONE;
240008cc:	2300      	movs	r3, #0
240008ce:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.NbData = 0;
240008d0:	2300      	movs	r3, #0
240008d2:	62bb      	str	r3, [r7, #40]	; 0x28

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240008d4:	2300      	movs	r3, #0
240008d6:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesSize = 0;
240008d8:	2300      	movs	r3, #0
240008da:	613b      	str	r3, [r7, #16]
    cmd.AlternateBytes = 0x00;
240008dc:	2300      	movs	r3, #0
240008de:	60bb      	str	r3, [r7, #8]

    cmd.DummyCycles = 0;
240008e0:	2300      	movs	r3, #0
240008e2:	617b      	str	r3, [r7, #20]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
240008e4:	2300      	movs	r3, #0
240008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240008e8:	2300      	movs	r3, #0
240008ea:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240008ec:	2300      	movs	r3, #0
240008ee:	637b      	str	r3, [r7, #52]	; 0x34

    HAL_QSPI_Command(&hqspi, &cmd, 100);
240008f0:	463b      	mov	r3, r7
240008f2:	2264      	movs	r2, #100	; 0x64
240008f4:	4619      	mov	r1, r3
240008f6:	4805      	ldr	r0, [pc, #20]	; (2400090c <W25QXX_ExitQPIMode+0x5c>)
240008f8:	f000 fb0e 	bl	24000f18 <HAL_QSPI_Command>
	w25q256_mode = W25QXX_MODE_SPI;
240008fc:	4b04      	ldr	r3, [pc, #16]	; (24000910 <W25QXX_ExitQPIMode+0x60>)
240008fe:	2200      	movs	r2, #0
24000900:	701a      	strb	r2, [r3, #0]
}
24000902:	bf00      	nop
24000904:	3738      	adds	r7, #56	; 0x38
24000906:	46bd      	mov	sp, r7
24000908:	bd80      	pop	{r7, pc}
2400090a:	bf00      	nop
2400090c:	24000234 	.word	0x24000234
24000910:	24000280 	.word	0x24000280

24000914 <W25QXX_EnterQPIMode>:

static void W25QXX_EnterQPIMode(void)
{
24000914:	b580      	push	{r7, lr}
24000916:	b090      	sub	sp, #64	; 0x40
24000918:	af00      	add	r7, sp, #0
	uint8_t dat;
    QSPI_CommandTypeDef cmd;

    dat = W25QXX_ReadSR(2);
2400091a:	2002      	movs	r0, #2
2400091c:	f7ff ff0a 	bl	24000734 <W25QXX_ReadSR>
24000920:	4603      	mov	r3, r0
24000922:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if ((dat & 0x02) == 0x00)
24000926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
2400092a:	f003 0302 	and.w	r3, r3, #2
2400092e:	2b00      	cmp	r3, #0
24000930:	d10e      	bne.n	24000950 <W25QXX_EnterQPIMode+0x3c>
    {
        W25QXX_WriteEnable();
24000932:	f7ff fec9 	bl	240006c8 <W25QXX_WriteEnable>
        dat |= 0x02;
24000936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
2400093a:	f043 0302 	orr.w	r3, r3, #2
2400093e:	b2db      	uxtb	r3, r3
24000940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        W25QXX_WriteSR(2, dat);
24000944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
24000948:	4619      	mov	r1, r3
2400094a:	2002      	movs	r0, #2
2400094c:	f7ff ff52 	bl	240007f4 <W25QXX_WriteSR>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000950:	f44f 7380 	mov.w	r3, #256	; 0x100
24000954:	61fb      	str	r3, [r7, #28]
    cmd.Instruction = CMD_EnterQPIMode;
24000956:	2338      	movs	r3, #56	; 0x38
24000958:	607b      	str	r3, [r7, #4]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
2400095a:	2300      	movs	r3, #0
2400095c:	623b      	str	r3, [r7, #32]
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
2400095e:	2300      	movs	r3, #0
24000960:	613b      	str	r3, [r7, #16]
    cmd.Address = 0x00;
24000962:	2300      	movs	r3, #0
24000964:	60bb      	str	r3, [r7, #8]

    cmd.DataMode = QSPI_DATA_NONE;
24000966:	2300      	movs	r3, #0
24000968:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.NbData = 0;
2400096a:	2300      	movs	r3, #0
2400096c:	62fb      	str	r3, [r7, #44]	; 0x2c

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400096e:	2300      	movs	r3, #0
24000970:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AlternateBytesSize = 0;
24000972:	2300      	movs	r3, #0
24000974:	617b      	str	r3, [r7, #20]
    cmd.AlternateBytes = 0x00;
24000976:	2300      	movs	r3, #0
24000978:	60fb      	str	r3, [r7, #12]

    cmd.DummyCycles = 0;
2400097a:	2300      	movs	r3, #0
2400097c:	61bb      	str	r3, [r7, #24]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
2400097e:	2300      	movs	r3, #0
24000980:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000982:	2300      	movs	r3, #0
24000984:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24000986:	2300      	movs	r3, #0
24000988:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_QSPI_Command(&hqspi, &cmd, 100);
2400098a:	1d3b      	adds	r3, r7, #4
2400098c:	2264      	movs	r2, #100	; 0x64
2400098e:	4619      	mov	r1, r3
24000990:	4814      	ldr	r0, [pc, #80]	; (240009e4 <W25QXX_EnterQPIMode+0xd0>)
24000992:	f000 fac1 	bl	24000f18 <HAL_QSPI_Command>
	w25q256_mode = W25QXX_MODE_QPI;
24000996:	4b14      	ldr	r3, [pc, #80]	; (240009e8 <W25QXX_EnterQPIMode+0xd4>)
24000998:	2201      	movs	r2, #1
2400099a:	701a      	strb	r2, [r3, #0]

    cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
2400099c:	f44f 7340 	mov.w	r3, #768	; 0x300
240009a0:	61fb      	str	r3, [r7, #28]
    cmd.Instruction = CMD_SetReadParameters;			// set dummy clocks to 8, in 0x0B, 0xEB, 0x0C instructions
240009a2:	23c0      	movs	r3, #192	; 0xc0
240009a4:	607b      	str	r3, [r7, #4]
    cmd.DataMode = QSPI_DATA_4_LINES;
240009a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
240009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.NbData = 1;
240009ac:	2301      	movs	r3, #1
240009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dat = 0x03 << 4;
240009b0:	2330      	movs	r3, #48	; 0x30
240009b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    W25QXX_WriteEnable();
240009b6:	f7ff fe87 	bl	240006c8 <W25QXX_WriteEnable>
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
240009ba:	1d3b      	adds	r3, r7, #4
240009bc:	2264      	movs	r2, #100	; 0x64
240009be:	4619      	mov	r1, r3
240009c0:	4808      	ldr	r0, [pc, #32]	; (240009e4 <W25QXX_EnterQPIMode+0xd0>)
240009c2:	f000 faa9 	bl	24000f18 <HAL_QSPI_Command>
240009c6:	4603      	mov	r3, r0
240009c8:	2b00      	cmp	r3, #0
240009ca:	d107      	bne.n	240009dc <W25QXX_EnterQPIMode+0xc8>
    {
        HAL_QSPI_Transmit(&hqspi, &dat, 1000);
240009cc:	f107 033f 	add.w	r3, r7, #63	; 0x3f
240009d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
240009d4:	4619      	mov	r1, r3
240009d6:	4803      	ldr	r0, [pc, #12]	; (240009e4 <W25QXX_EnterQPIMode+0xd0>)
240009d8:	f000 fafc 	bl	24000fd4 <HAL_QSPI_Transmit>
    }
}
240009dc:	bf00      	nop
240009de:	3740      	adds	r7, #64	; 0x40
240009e0:	46bd      	mov	sp, r7
240009e2:	bd80      	pop	{r7, pc}
240009e4:	24000234 	.word	0x24000234
240009e8:	24000280 	.word	0x24000280

240009ec <W25QXX_Reset>:

static void W25QXX_Reset(void)
{
240009ec:	b580      	push	{r7, lr}
240009ee:	b08e      	sub	sp, #56	; 0x38
240009f0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef cmd;
	
	if(w25q256_mode == W25QXX_MODE_SPI)
240009f2:	4b1e      	ldr	r3, [pc, #120]	; (24000a6c <W25QXX_Reset+0x80>)
240009f4:	781b      	ldrb	r3, [r3, #0]
240009f6:	2b00      	cmp	r3, #0
240009f8:	d103      	bne.n	24000a02 <W25QXX_Reset+0x16>
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240009fa:	f44f 7380 	mov.w	r3, #256	; 0x100
240009fe:	61bb      	str	r3, [r7, #24]
24000a00:	e002      	b.n	24000a08 <W25QXX_Reset+0x1c>
	else cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
24000a02:	f44f 7340 	mov.w	r3, #768	; 0x300
24000a06:	61bb      	str	r3, [r7, #24]
	
    cmd.Instruction = CMD_EnableReset;
24000a08:	2366      	movs	r3, #102	; 0x66
24000a0a:	603b      	str	r3, [r7, #0]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
24000a0c:	2300      	movs	r3, #0
24000a0e:	61fb      	str	r3, [r7, #28]
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
24000a10:	2300      	movs	r3, #0
24000a12:	60fb      	str	r3, [r7, #12]
    cmd.Address = 0x00;
24000a14:	2300      	movs	r3, #0
24000a16:	607b      	str	r3, [r7, #4]

    cmd.DataMode = QSPI_DATA_NONE;
24000a18:	2300      	movs	r3, #0
24000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.NbData = 0;
24000a1c:	2300      	movs	r3, #0
24000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24000a20:	2300      	movs	r3, #0
24000a22:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesSize = 0;
24000a24:	2300      	movs	r3, #0
24000a26:	613b      	str	r3, [r7, #16]
    cmd.AlternateBytes = 0x00;
24000a28:	2300      	movs	r3, #0
24000a2a:	60bb      	str	r3, [r7, #8]

    cmd.DummyCycles = 0;
24000a2c:	2300      	movs	r3, #0
24000a2e:	617b      	str	r3, [r7, #20]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
24000a30:	2300      	movs	r3, #0
24000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000a34:	2300      	movs	r3, #0
24000a36:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24000a38:	2300      	movs	r3, #0
24000a3a:	637b      	str	r3, [r7, #52]	; 0x34

    if(HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
24000a3c:	463b      	mov	r3, r7
24000a3e:	2264      	movs	r2, #100	; 0x64
24000a40:	4619      	mov	r1, r3
24000a42:	480b      	ldr	r0, [pc, #44]	; (24000a70 <W25QXX_Reset+0x84>)
24000a44:	f000 fa68 	bl	24000f18 <HAL_QSPI_Command>
24000a48:	4603      	mov	r3, r0
24000a4a:	2b00      	cmp	r3, #0
24000a4c:	d107      	bne.n	24000a5e <W25QXX_Reset+0x72>
	{
		cmd.Instruction = CMD_ResetDevice;
24000a4e:	2399      	movs	r3, #153	; 0x99
24000a50:	603b      	str	r3, [r7, #0]
		HAL_QSPI_Command(&hqspi, &cmd, 100);
24000a52:	463b      	mov	r3, r7
24000a54:	2264      	movs	r2, #100	; 0x64
24000a56:	4619      	mov	r1, r3
24000a58:	4805      	ldr	r0, [pc, #20]	; (24000a70 <W25QXX_Reset+0x84>)
24000a5a:	f000 fa5d 	bl	24000f18 <HAL_QSPI_Command>
	}
	
	HAL_Delay(1);
24000a5e:	2001      	movs	r0, #1
24000a60:	f000 f90c 	bl	24000c7c <HAL_Delay>
}
24000a64:	bf00      	nop
24000a66:	3738      	adds	r7, #56	; 0x38
24000a68:	46bd      	mov	sp, r7
24000a6a:	bd80      	pop	{r7, pc}
24000a6c:	24000280 	.word	0x24000280
24000a70:	24000234 	.word	0x24000234

24000a74 <W25QXX_Enter4ByteAddrMode>:

void W25QXX_Enter4ByteAddrMode(void)
{
24000a74:	b580      	push	{r7, lr}
24000a76:	b090      	sub	sp, #64	; 0x40
24000a78:	af00      	add	r7, sp, #0
	uint8_t dat = W25QXX_ReadSR(3);
24000a7a:	2003      	movs	r0, #3
24000a7c:	f7ff fe5a 	bl	24000734 <W25QXX_ReadSR>
24000a80:	4603      	mov	r3, r0
24000a82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if((dat & 0x01) == 0x01)	return;
24000a86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
24000a8a:	f003 0301 	and.w	r3, r3, #1
24000a8e:	2b00      	cmp	r3, #0
24000a90:	d12b      	bne.n	24000aea <W25QXX_Enter4ByteAddrMode+0x76>
	
	QSPI_CommandTypeDef cmd;
	
	if(w25q256_mode == W25QXX_MODE_SPI)
24000a92:	4b18      	ldr	r3, [pc, #96]	; (24000af4 <W25QXX_Enter4ByteAddrMode+0x80>)
24000a94:	781b      	ldrb	r3, [r3, #0]
24000a96:	2b00      	cmp	r3, #0
24000a98:	d103      	bne.n	24000aa2 <W25QXX_Enter4ByteAddrMode+0x2e>
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
24000a9e:	61fb      	str	r3, [r7, #28]
24000aa0:	e002      	b.n	24000aa8 <W25QXX_Enter4ByteAddrMode+0x34>
	else cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
24000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
24000aa6:	61fb      	str	r3, [r7, #28]
    cmd.Instruction = CMD_Enter4ByteAddrMode;
24000aa8:	23b7      	movs	r3, #183	; 0xb7
24000aaa:	607b      	str	r3, [r7, #4]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
24000aac:	2300      	movs	r3, #0
24000aae:	623b      	str	r3, [r7, #32]
    cmd.AddressSize = QSPI_ADDRESS_8_BITS;
24000ab0:	2300      	movs	r3, #0
24000ab2:	613b      	str	r3, [r7, #16]
    cmd.Address = 0x00;
24000ab4:	2300      	movs	r3, #0
24000ab6:	60bb      	str	r3, [r7, #8]

    cmd.DataMode = QSPI_DATA_NONE;
24000ab8:	2300      	movs	r3, #0
24000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.NbData = 0;
24000abc:	2300      	movs	r3, #0
24000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24000ac0:	2300      	movs	r3, #0
24000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AlternateBytesSize = 0;
24000ac4:	2300      	movs	r3, #0
24000ac6:	617b      	str	r3, [r7, #20]
    cmd.AlternateBytes = 0x00;
24000ac8:	2300      	movs	r3, #0
24000aca:	60fb      	str	r3, [r7, #12]

    cmd.DummyCycles = 0;
24000acc:	2300      	movs	r3, #0
24000ace:	61bb      	str	r3, [r7, #24]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
24000ad0:	2300      	movs	r3, #0
24000ad2:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000ad4:	2300      	movs	r3, #0
24000ad6:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24000ad8:	2300      	movs	r3, #0
24000ada:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_QSPI_Command(&hqspi, &cmd, 100);
24000adc:	1d3b      	adds	r3, r7, #4
24000ade:	2264      	movs	r2, #100	; 0x64
24000ae0:	4619      	mov	r1, r3
24000ae2:	4805      	ldr	r0, [pc, #20]	; (24000af8 <W25QXX_Enter4ByteAddrMode+0x84>)
24000ae4:	f000 fa18 	bl	24000f18 <HAL_QSPI_Command>
24000ae8:	e000      	b.n	24000aec <W25QXX_Enter4ByteAddrMode+0x78>
	if((dat & 0x01) == 0x01)	return;
24000aea:	bf00      	nop
}
24000aec:	3740      	adds	r7, #64	; 0x40
24000aee:	46bd      	mov	sp, r7
24000af0:	bd80      	pop	{r7, pc}
24000af2:	bf00      	nop
24000af4:	24000280 	.word	0x24000280
24000af8:	24000234 	.word	0x24000234

24000afc <W25QXX_Init>:

void W25QXX_Init(void)
{
24000afc:	b580      	push	{r7, lr}
24000afe:	af00      	add	r7, sp, #0
    W25QXX_ExitQPIMode();
24000b00:	f7ff fed6 	bl	240008b0 <W25QXX_ExitQPIMode>
    W25QXX_Reset();
24000b04:	f7ff ff72 	bl	240009ec <W25QXX_Reset>
    W25QXX_EnterQPIMode();
24000b08:	f7ff ff04 	bl	24000914 <W25QXX_EnterQPIMode>
	W25QXX_Enter4ByteAddrMode();
24000b0c:	f7ff ffb2 	bl	24000a74 <W25QXX_Enter4ByteAddrMode>
}
24000b10:	bf00      	nop
24000b12:	bd80      	pop	{r7, pc}

24000b14 <W25QXX_MemoryMapped>:
        }
    }
}

void W25QXX_MemoryMapped(void)
{
24000b14:	b580      	push	{r7, lr}
24000b16:	b090      	sub	sp, #64	; 0x40
24000b18:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef cmd;
    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

    /* Configure the command for the read instruction */
    if(w25q256_mode == W25QXX_MODE_SPI)		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24000b1a:	4b17      	ldr	r3, [pc, #92]	; (24000b78 <W25QXX_MemoryMapped+0x64>)
24000b1c:	781b      	ldrb	r3, [r3, #0]
24000b1e:	2b00      	cmp	r3, #0
24000b20:	d103      	bne.n	24000b2a <W25QXX_MemoryMapped+0x16>
24000b22:	f44f 7380 	mov.w	r3, #256	; 0x100
24000b26:	623b      	str	r3, [r7, #32]
24000b28:	e002      	b.n	24000b30 <W25QXX_MemoryMapped+0x1c>
    else 	cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
24000b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
24000b2e:	623b      	str	r3, [r7, #32]
    cmd.Instruction = CMD_Fast_Read_Quad_IO;
24000b30:	23eb      	movs	r3, #235	; 0xeb
24000b32:	60bb      	str	r3, [r7, #8]
    cmd.AddressMode = QSPI_ADDRESS_4_LINES;
24000b34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24000b38:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AddressSize = QSPI_ADDRESS_32_BITS;
24000b3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
24000b3e:	617b      	str	r3, [r7, #20]
    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24000b40:	2300      	movs	r3, #0
24000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.DataMode = QSPI_DATA_4_LINES;
24000b44:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DummyCycles = 8;
24000b4a:	2308      	movs	r3, #8
24000b4c:	61fb      	str	r3, [r7, #28]
    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
24000b4e:	2300      	movs	r3, #0
24000b50:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24000b52:	2300      	movs	r3, #0
24000b54:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24000b56:	2300      	movs	r3, #0
24000b58:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Configure the memory mapped mode */
    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
24000b5a:	2300      	movs	r3, #0
24000b5c:	607b      	str	r3, [r7, #4]
    s_mem_mapped_cfg.TimeOutPeriod = 0;
24000b5e:	2300      	movs	r3, #0
24000b60:	603b      	str	r3, [r7, #0]

    if (HAL_QSPI_MemoryMapped(&hqspi, &cmd, &s_mem_mapped_cfg) != HAL_OK)
24000b62:	463a      	mov	r2, r7
24000b64:	f107 0308 	add.w	r3, r7, #8
24000b68:	4619      	mov	r1, r3
24000b6a:	4804      	ldr	r0, [pc, #16]	; (24000b7c <W25QXX_MemoryMapped+0x68>)
24000b6c:	f000 fb61 	bl	24001232 <HAL_QSPI_MemoryMapped>
    {

    }
}
24000b70:	bf00      	nop
24000b72:	3740      	adds	r7, #64	; 0x40
24000b74:	46bd      	mov	sp, r7
24000b76:	bd80      	pop	{r7, pc}
24000b78:	24000280 	.word	0x24000280
24000b7c:	24000234 	.word	0x24000234

24000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24000b80:	b580      	push	{r7, lr}
24000b82:	b082      	sub	sp, #8
24000b84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24000b86:	2003      	movs	r0, #3
24000b88:	f000 f95a 	bl	24000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24000b8c:	f001 fb80 	bl	24002290 <HAL_RCC_GetSysClockFreq>
24000b90:	4602      	mov	r2, r0
24000b92:	4b15      	ldr	r3, [pc, #84]	; (24000be8 <HAL_Init+0x68>)
24000b94:	699b      	ldr	r3, [r3, #24]
24000b96:	0a1b      	lsrs	r3, r3, #8
24000b98:	f003 030f 	and.w	r3, r3, #15
24000b9c:	4913      	ldr	r1, [pc, #76]	; (24000bec <HAL_Init+0x6c>)
24000b9e:	5ccb      	ldrb	r3, [r1, r3]
24000ba0:	f003 031f 	and.w	r3, r3, #31
24000ba4:	fa22 f303 	lsr.w	r3, r2, r3
24000ba8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24000baa:	4b0f      	ldr	r3, [pc, #60]	; (24000be8 <HAL_Init+0x68>)
24000bac:	699b      	ldr	r3, [r3, #24]
24000bae:	f003 030f 	and.w	r3, r3, #15
24000bb2:	4a0e      	ldr	r2, [pc, #56]	; (24000bec <HAL_Init+0x6c>)
24000bb4:	5cd3      	ldrb	r3, [r2, r3]
24000bb6:	f003 031f 	and.w	r3, r3, #31
24000bba:	687a      	ldr	r2, [r7, #4]
24000bbc:	fa22 f303 	lsr.w	r3, r2, r3
24000bc0:	4a0b      	ldr	r2, [pc, #44]	; (24000bf0 <HAL_Init+0x70>)
24000bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24000bc4:	4a0b      	ldr	r2, [pc, #44]	; (24000bf4 <HAL_Init+0x74>)
24000bc6:	687b      	ldr	r3, [r7, #4]
24000bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24000bca:	200f      	movs	r0, #15
24000bcc:	f000 f814 	bl	24000bf8 <HAL_InitTick>
24000bd0:	4603      	mov	r3, r0
24000bd2:	2b00      	cmp	r3, #0
24000bd4:	d001      	beq.n	24000bda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24000bd6:	2301      	movs	r3, #1
24000bd8:	e002      	b.n	24000be0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24000bda:	f7ff fcd3 	bl	24000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24000bde:	2300      	movs	r3, #0
}
24000be0:	4618      	mov	r0, r3
24000be2:	3708      	adds	r7, #8
24000be4:	46bd      	mov	sp, r7
24000be6:	bd80      	pop	{r7, pc}
24000be8:	58024400 	.word	0x58024400
24000bec:	24002674 	.word	0x24002674
24000bf0:	2400020c 	.word	0x2400020c
24000bf4:	24000208 	.word	0x24000208

24000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24000bf8:	b580      	push	{r7, lr}
24000bfa:	b082      	sub	sp, #8
24000bfc:	af00      	add	r7, sp, #0
24000bfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24000c00:	4b15      	ldr	r3, [pc, #84]	; (24000c58 <HAL_InitTick+0x60>)
24000c02:	781b      	ldrb	r3, [r3, #0]
24000c04:	2b00      	cmp	r3, #0
24000c06:	d101      	bne.n	24000c0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24000c08:	2301      	movs	r3, #1
24000c0a:	e021      	b.n	24000c50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24000c0c:	4b13      	ldr	r3, [pc, #76]	; (24000c5c <HAL_InitTick+0x64>)
24000c0e:	681a      	ldr	r2, [r3, #0]
24000c10:	4b11      	ldr	r3, [pc, #68]	; (24000c58 <HAL_InitTick+0x60>)
24000c12:	781b      	ldrb	r3, [r3, #0]
24000c14:	4619      	mov	r1, r3
24000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
24000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
24000c22:	4618      	mov	r0, r3
24000c24:	f000 f931 	bl	24000e8a <HAL_SYSTICK_Config>
24000c28:	4603      	mov	r3, r0
24000c2a:	2b00      	cmp	r3, #0
24000c2c:	d001      	beq.n	24000c32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24000c2e:	2301      	movs	r3, #1
24000c30:	e00e      	b.n	24000c50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24000c32:	687b      	ldr	r3, [r7, #4]
24000c34:	2b0f      	cmp	r3, #15
24000c36:	d80a      	bhi.n	24000c4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24000c38:	2200      	movs	r2, #0
24000c3a:	6879      	ldr	r1, [r7, #4]
24000c3c:	f04f 30ff 	mov.w	r0, #4294967295
24000c40:	f000 f909 	bl	24000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24000c44:	4a06      	ldr	r2, [pc, #24]	; (24000c60 <HAL_InitTick+0x68>)
24000c46:	687b      	ldr	r3, [r7, #4]
24000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24000c4a:	2300      	movs	r3, #0
24000c4c:	e000      	b.n	24000c50 <HAL_InitTick+0x58>
    return HAL_ERROR;
24000c4e:	2301      	movs	r3, #1
}
24000c50:	4618      	mov	r0, r3
24000c52:	3708      	adds	r7, #8
24000c54:	46bd      	mov	sp, r7
24000c56:	bd80      	pop	{r7, pc}
24000c58:	24000214 	.word	0x24000214
24000c5c:	24000208 	.word	0x24000208
24000c60:	24000210 	.word	0x24000210

24000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24000c64:	b480      	push	{r7}
24000c66:	af00      	add	r7, sp, #0
  return uwTick;
24000c68:	4b03      	ldr	r3, [pc, #12]	; (24000c78 <HAL_GetTick+0x14>)
24000c6a:	681b      	ldr	r3, [r3, #0]
}
24000c6c:	4618      	mov	r0, r3
24000c6e:	46bd      	mov	sp, r7
24000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
24000c74:	4770      	bx	lr
24000c76:	bf00      	nop
24000c78:	24000284 	.word	0x24000284

24000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24000c7c:	b580      	push	{r7, lr}
24000c7e:	b084      	sub	sp, #16
24000c80:	af00      	add	r7, sp, #0
24000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24000c84:	f7ff ffee 	bl	24000c64 <HAL_GetTick>
24000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24000c8a:	687b      	ldr	r3, [r7, #4]
24000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24000c8e:	68fb      	ldr	r3, [r7, #12]
24000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
24000c94:	d005      	beq.n	24000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24000c96:	4b0a      	ldr	r3, [pc, #40]	; (24000cc0 <HAL_Delay+0x44>)
24000c98:	781b      	ldrb	r3, [r3, #0]
24000c9a:	461a      	mov	r2, r3
24000c9c:	68fb      	ldr	r3, [r7, #12]
24000c9e:	4413      	add	r3, r2
24000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24000ca2:	bf00      	nop
24000ca4:	f7ff ffde 	bl	24000c64 <HAL_GetTick>
24000ca8:	4602      	mov	r2, r0
24000caa:	68bb      	ldr	r3, [r7, #8]
24000cac:	1ad3      	subs	r3, r2, r3
24000cae:	68fa      	ldr	r2, [r7, #12]
24000cb0:	429a      	cmp	r2, r3
24000cb2:	d8f7      	bhi.n	24000ca4 <HAL_Delay+0x28>
  {
  }
}
24000cb4:	bf00      	nop
24000cb6:	bf00      	nop
24000cb8:	3710      	adds	r7, #16
24000cba:	46bd      	mov	sp, r7
24000cbc:	bd80      	pop	{r7, pc}
24000cbe:	bf00      	nop
24000cc0:	24000214 	.word	0x24000214

24000cc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
24000cc4:	b480      	push	{r7}
24000cc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
24000cc8:	4b03      	ldr	r3, [pc, #12]	; (24000cd8 <HAL_GetREVID+0x14>)
24000cca:	681b      	ldr	r3, [r3, #0]
24000ccc:	0c1b      	lsrs	r3, r3, #16
}
24000cce:	4618      	mov	r0, r3
24000cd0:	46bd      	mov	sp, r7
24000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
24000cd6:	4770      	bx	lr
24000cd8:	5c001000 	.word	0x5c001000

24000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24000cdc:	b480      	push	{r7}
24000cde:	b085      	sub	sp, #20
24000ce0:	af00      	add	r7, sp, #0
24000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24000ce4:	687b      	ldr	r3, [r7, #4]
24000ce6:	f003 0307 	and.w	r3, r3, #7
24000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24000cec:	4b0b      	ldr	r3, [pc, #44]	; (24000d1c <__NVIC_SetPriorityGrouping+0x40>)
24000cee:	68db      	ldr	r3, [r3, #12]
24000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24000cf2:	68ba      	ldr	r2, [r7, #8]
24000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24000cf8:	4013      	ands	r3, r2
24000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24000cfc:	68fb      	ldr	r3, [r7, #12]
24000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24000d00:	68bb      	ldr	r3, [r7, #8]
24000d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24000d04:	4b06      	ldr	r3, [pc, #24]	; (24000d20 <__NVIC_SetPriorityGrouping+0x44>)
24000d06:	4313      	orrs	r3, r2
24000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24000d0a:	4a04      	ldr	r2, [pc, #16]	; (24000d1c <__NVIC_SetPriorityGrouping+0x40>)
24000d0c:	68bb      	ldr	r3, [r7, #8]
24000d0e:	60d3      	str	r3, [r2, #12]
}
24000d10:	bf00      	nop
24000d12:	3714      	adds	r7, #20
24000d14:	46bd      	mov	sp, r7
24000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d1a:	4770      	bx	lr
24000d1c:	e000ed00 	.word	0xe000ed00
24000d20:	05fa0000 	.word	0x05fa0000

24000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24000d24:	b480      	push	{r7}
24000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24000d28:	4b04      	ldr	r3, [pc, #16]	; (24000d3c <__NVIC_GetPriorityGrouping+0x18>)
24000d2a:	68db      	ldr	r3, [r3, #12]
24000d2c:	0a1b      	lsrs	r3, r3, #8
24000d2e:	f003 0307 	and.w	r3, r3, #7
}
24000d32:	4618      	mov	r0, r3
24000d34:	46bd      	mov	sp, r7
24000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d3a:	4770      	bx	lr
24000d3c:	e000ed00 	.word	0xe000ed00

24000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24000d40:	b480      	push	{r7}
24000d42:	b083      	sub	sp, #12
24000d44:	af00      	add	r7, sp, #0
24000d46:	4603      	mov	r3, r0
24000d48:	6039      	str	r1, [r7, #0]
24000d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24000d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24000d50:	2b00      	cmp	r3, #0
24000d52:	db0a      	blt.n	24000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24000d54:	683b      	ldr	r3, [r7, #0]
24000d56:	b2da      	uxtb	r2, r3
24000d58:	490c      	ldr	r1, [pc, #48]	; (24000d8c <__NVIC_SetPriority+0x4c>)
24000d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24000d5e:	0112      	lsls	r2, r2, #4
24000d60:	b2d2      	uxtb	r2, r2
24000d62:	440b      	add	r3, r1
24000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24000d68:	e00a      	b.n	24000d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24000d6a:	683b      	ldr	r3, [r7, #0]
24000d6c:	b2da      	uxtb	r2, r3
24000d6e:	4908      	ldr	r1, [pc, #32]	; (24000d90 <__NVIC_SetPriority+0x50>)
24000d70:	88fb      	ldrh	r3, [r7, #6]
24000d72:	f003 030f 	and.w	r3, r3, #15
24000d76:	3b04      	subs	r3, #4
24000d78:	0112      	lsls	r2, r2, #4
24000d7a:	b2d2      	uxtb	r2, r2
24000d7c:	440b      	add	r3, r1
24000d7e:	761a      	strb	r2, [r3, #24]
}
24000d80:	bf00      	nop
24000d82:	370c      	adds	r7, #12
24000d84:	46bd      	mov	sp, r7
24000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d8a:	4770      	bx	lr
24000d8c:	e000e100 	.word	0xe000e100
24000d90:	e000ed00 	.word	0xe000ed00

24000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24000d94:	b480      	push	{r7}
24000d96:	b089      	sub	sp, #36	; 0x24
24000d98:	af00      	add	r7, sp, #0
24000d9a:	60f8      	str	r0, [r7, #12]
24000d9c:	60b9      	str	r1, [r7, #8]
24000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24000da0:	68fb      	ldr	r3, [r7, #12]
24000da2:	f003 0307 	and.w	r3, r3, #7
24000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24000da8:	69fb      	ldr	r3, [r7, #28]
24000daa:	f1c3 0307 	rsb	r3, r3, #7
24000dae:	2b04      	cmp	r3, #4
24000db0:	bf28      	it	cs
24000db2:	2304      	movcs	r3, #4
24000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24000db6:	69fb      	ldr	r3, [r7, #28]
24000db8:	3304      	adds	r3, #4
24000dba:	2b06      	cmp	r3, #6
24000dbc:	d902      	bls.n	24000dc4 <NVIC_EncodePriority+0x30>
24000dbe:	69fb      	ldr	r3, [r7, #28]
24000dc0:	3b03      	subs	r3, #3
24000dc2:	e000      	b.n	24000dc6 <NVIC_EncodePriority+0x32>
24000dc4:	2300      	movs	r3, #0
24000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24000dc8:	f04f 32ff 	mov.w	r2, #4294967295
24000dcc:	69bb      	ldr	r3, [r7, #24]
24000dce:	fa02 f303 	lsl.w	r3, r2, r3
24000dd2:	43da      	mvns	r2, r3
24000dd4:	68bb      	ldr	r3, [r7, #8]
24000dd6:	401a      	ands	r2, r3
24000dd8:	697b      	ldr	r3, [r7, #20]
24000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24000ddc:	f04f 31ff 	mov.w	r1, #4294967295
24000de0:	697b      	ldr	r3, [r7, #20]
24000de2:	fa01 f303 	lsl.w	r3, r1, r3
24000de6:	43d9      	mvns	r1, r3
24000de8:	687b      	ldr	r3, [r7, #4]
24000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24000dec:	4313      	orrs	r3, r2
         );
}
24000dee:	4618      	mov	r0, r3
24000df0:	3724      	adds	r7, #36	; 0x24
24000df2:	46bd      	mov	sp, r7
24000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
24000df8:	4770      	bx	lr
	...

24000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24000dfc:	b580      	push	{r7, lr}
24000dfe:	b082      	sub	sp, #8
24000e00:	af00      	add	r7, sp, #0
24000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24000e04:	687b      	ldr	r3, [r7, #4]
24000e06:	3b01      	subs	r3, #1
24000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24000e0c:	d301      	bcc.n	24000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24000e0e:	2301      	movs	r3, #1
24000e10:	e00f      	b.n	24000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24000e12:	4a0a      	ldr	r2, [pc, #40]	; (24000e3c <SysTick_Config+0x40>)
24000e14:	687b      	ldr	r3, [r7, #4]
24000e16:	3b01      	subs	r3, #1
24000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24000e1a:	210f      	movs	r1, #15
24000e1c:	f04f 30ff 	mov.w	r0, #4294967295
24000e20:	f7ff ff8e 	bl	24000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24000e24:	4b05      	ldr	r3, [pc, #20]	; (24000e3c <SysTick_Config+0x40>)
24000e26:	2200      	movs	r2, #0
24000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24000e2a:	4b04      	ldr	r3, [pc, #16]	; (24000e3c <SysTick_Config+0x40>)
24000e2c:	2207      	movs	r2, #7
24000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24000e30:	2300      	movs	r3, #0
}
24000e32:	4618      	mov	r0, r3
24000e34:	3708      	adds	r7, #8
24000e36:	46bd      	mov	sp, r7
24000e38:	bd80      	pop	{r7, pc}
24000e3a:	bf00      	nop
24000e3c:	e000e010 	.word	0xe000e010

24000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24000e40:	b580      	push	{r7, lr}
24000e42:	b082      	sub	sp, #8
24000e44:	af00      	add	r7, sp, #0
24000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24000e48:	6878      	ldr	r0, [r7, #4]
24000e4a:	f7ff ff47 	bl	24000cdc <__NVIC_SetPriorityGrouping>
}
24000e4e:	bf00      	nop
24000e50:	3708      	adds	r7, #8
24000e52:	46bd      	mov	sp, r7
24000e54:	bd80      	pop	{r7, pc}

24000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24000e56:	b580      	push	{r7, lr}
24000e58:	b086      	sub	sp, #24
24000e5a:	af00      	add	r7, sp, #0
24000e5c:	4603      	mov	r3, r0
24000e5e:	60b9      	str	r1, [r7, #8]
24000e60:	607a      	str	r2, [r7, #4]
24000e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24000e64:	f7ff ff5e 	bl	24000d24 <__NVIC_GetPriorityGrouping>
24000e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24000e6a:	687a      	ldr	r2, [r7, #4]
24000e6c:	68b9      	ldr	r1, [r7, #8]
24000e6e:	6978      	ldr	r0, [r7, #20]
24000e70:	f7ff ff90 	bl	24000d94 <NVIC_EncodePriority>
24000e74:	4602      	mov	r2, r0
24000e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24000e7a:	4611      	mov	r1, r2
24000e7c:	4618      	mov	r0, r3
24000e7e:	f7ff ff5f 	bl	24000d40 <__NVIC_SetPriority>
}
24000e82:	bf00      	nop
24000e84:	3718      	adds	r7, #24
24000e86:	46bd      	mov	sp, r7
24000e88:	bd80      	pop	{r7, pc}

24000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24000e8a:	b580      	push	{r7, lr}
24000e8c:	b082      	sub	sp, #8
24000e8e:	af00      	add	r7, sp, #0
24000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24000e92:	6878      	ldr	r0, [r7, #4]
24000e94:	f7ff ffb2 	bl	24000dfc <SysTick_Config>
24000e98:	4603      	mov	r3, r0
}
24000e9a:	4618      	mov	r0, r3
24000e9c:	3708      	adds	r7, #8
24000e9e:	46bd      	mov	sp, r7
24000ea0:	bd80      	pop	{r7, pc}
	...

24000ea4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24000ea4:	b580      	push	{r7, lr}
24000ea6:	b084      	sub	sp, #16
24000ea8:	af00      	add	r7, sp, #0
24000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24000eac:	4b19      	ldr	r3, [pc, #100]	; (24000f14 <HAL_PWREx_ConfigSupply+0x70>)
24000eae:	68db      	ldr	r3, [r3, #12]
24000eb0:	f003 0304 	and.w	r3, r3, #4
24000eb4:	2b04      	cmp	r3, #4
24000eb6:	d00a      	beq.n	24000ece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24000eb8:	4b16      	ldr	r3, [pc, #88]	; (24000f14 <HAL_PWREx_ConfigSupply+0x70>)
24000eba:	68db      	ldr	r3, [r3, #12]
24000ebc:	f003 0307 	and.w	r3, r3, #7
24000ec0:	687a      	ldr	r2, [r7, #4]
24000ec2:	429a      	cmp	r2, r3
24000ec4:	d001      	beq.n	24000eca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24000ec6:	2301      	movs	r3, #1
24000ec8:	e01f      	b.n	24000f0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24000eca:	2300      	movs	r3, #0
24000ecc:	e01d      	b.n	24000f0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24000ece:	4b11      	ldr	r3, [pc, #68]	; (24000f14 <HAL_PWREx_ConfigSupply+0x70>)
24000ed0:	68db      	ldr	r3, [r3, #12]
24000ed2:	f023 0207 	bic.w	r2, r3, #7
24000ed6:	490f      	ldr	r1, [pc, #60]	; (24000f14 <HAL_PWREx_ConfigSupply+0x70>)
24000ed8:	687b      	ldr	r3, [r7, #4]
24000eda:	4313      	orrs	r3, r2
24000edc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24000ede:	f7ff fec1 	bl	24000c64 <HAL_GetTick>
24000ee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24000ee4:	e009      	b.n	24000efa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24000ee6:	f7ff febd 	bl	24000c64 <HAL_GetTick>
24000eea:	4602      	mov	r2, r0
24000eec:	68fb      	ldr	r3, [r7, #12]
24000eee:	1ad3      	subs	r3, r2, r3
24000ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24000ef4:	d901      	bls.n	24000efa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24000ef6:	2301      	movs	r3, #1
24000ef8:	e007      	b.n	24000f0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24000efa:	4b06      	ldr	r3, [pc, #24]	; (24000f14 <HAL_PWREx_ConfigSupply+0x70>)
24000efc:	685b      	ldr	r3, [r3, #4]
24000efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000f06:	d1ee      	bne.n	24000ee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24000f08:	2300      	movs	r3, #0
}
24000f0a:	4618      	mov	r0, r3
24000f0c:	3710      	adds	r7, #16
24000f0e:	46bd      	mov	sp, r7
24000f10:	bd80      	pop	{r7, pc}
24000f12:	bf00      	nop
24000f14:	58024800 	.word	0x58024800

24000f18 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
24000f18:	b580      	push	{r7, lr}
24000f1a:	b088      	sub	sp, #32
24000f1c:	af02      	add	r7, sp, #8
24000f1e:	60f8      	str	r0, [r7, #12]
24000f20:	60b9      	str	r1, [r7, #8]
24000f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24000f24:	f7ff fe9e 	bl	24000c64 <HAL_GetTick>
24000f28:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24000f2a:	68fb      	ldr	r3, [r7, #12]
24000f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24000f30:	b2db      	uxtb	r3, r3
24000f32:	2b01      	cmp	r3, #1
24000f34:	d101      	bne.n	24000f3a <HAL_QSPI_Command+0x22>
24000f36:	2302      	movs	r3, #2
24000f38:	e048      	b.n	24000fcc <HAL_QSPI_Command+0xb4>
24000f3a:	68fb      	ldr	r3, [r7, #12]
24000f3c:	2201      	movs	r2, #1
24000f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24000f42:	68fb      	ldr	r3, [r7, #12]
24000f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24000f48:	b2db      	uxtb	r3, r3
24000f4a:	2b01      	cmp	r3, #1
24000f4c:	d137      	bne.n	24000fbe <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24000f4e:	68fb      	ldr	r3, [r7, #12]
24000f50:	2200      	movs	r2, #0
24000f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24000f54:	68fb      	ldr	r3, [r7, #12]
24000f56:	2202      	movs	r2, #2
24000f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24000f5c:	687b      	ldr	r3, [r7, #4]
24000f5e:	9300      	str	r3, [sp, #0]
24000f60:	693b      	ldr	r3, [r7, #16]
24000f62:	2200      	movs	r2, #0
24000f64:	2120      	movs	r1, #32
24000f66:	68f8      	ldr	r0, [r7, #12]
24000f68:	f000 f9c5 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
24000f6c:	4603      	mov	r3, r0
24000f6e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24000f70:	7dfb      	ldrb	r3, [r7, #23]
24000f72:	2b00      	cmp	r3, #0
24000f74:	d125      	bne.n	24000fc2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24000f76:	2200      	movs	r2, #0
24000f78:	68b9      	ldr	r1, [r7, #8]
24000f7a:	68f8      	ldr	r0, [r7, #12]
24000f7c:	f000 f9f2 	bl	24001364 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24000f80:	68bb      	ldr	r3, [r7, #8]
24000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24000f84:	2b00      	cmp	r3, #0
24000f86:	d115      	bne.n	24000fb4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24000f88:	687b      	ldr	r3, [r7, #4]
24000f8a:	9300      	str	r3, [sp, #0]
24000f8c:	693b      	ldr	r3, [r7, #16]
24000f8e:	2201      	movs	r2, #1
24000f90:	2102      	movs	r1, #2
24000f92:	68f8      	ldr	r0, [r7, #12]
24000f94:	f000 f9af 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
24000f98:	4603      	mov	r3, r0
24000f9a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
24000f9c:	7dfb      	ldrb	r3, [r7, #23]
24000f9e:	2b00      	cmp	r3, #0
24000fa0:	d10f      	bne.n	24000fc2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24000fa2:	68fb      	ldr	r3, [r7, #12]
24000fa4:	681b      	ldr	r3, [r3, #0]
24000fa6:	2202      	movs	r2, #2
24000fa8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
24000faa:	68fb      	ldr	r3, [r7, #12]
24000fac:	2201      	movs	r2, #1
24000fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24000fb2:	e006      	b.n	24000fc2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24000fb4:	68fb      	ldr	r3, [r7, #12]
24000fb6:	2201      	movs	r2, #1
24000fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24000fbc:	e001      	b.n	24000fc2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24000fbe:	2302      	movs	r3, #2
24000fc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24000fc2:	68fb      	ldr	r3, [r7, #12]
24000fc4:	2200      	movs	r2, #0
24000fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24000fca:	7dfb      	ldrb	r3, [r7, #23]
}
24000fcc:	4618      	mov	r0, r3
24000fce:	3718      	adds	r7, #24
24000fd0:	46bd      	mov	sp, r7
24000fd2:	bd80      	pop	{r7, pc}

24000fd4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24000fd4:	b580      	push	{r7, lr}
24000fd6:	b08a      	sub	sp, #40	; 0x28
24000fd8:	af02      	add	r7, sp, #8
24000fda:	60f8      	str	r0, [r7, #12]
24000fdc:	60b9      	str	r1, [r7, #8]
24000fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24000fe0:	2300      	movs	r3, #0
24000fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24000fe4:	f7ff fe3e 	bl	24000c64 <HAL_GetTick>
24000fe8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24000fea:	68fb      	ldr	r3, [r7, #12]
24000fec:	681b      	ldr	r3, [r3, #0]
24000fee:	3320      	adds	r3, #32
24000ff0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
24000ff2:	68fb      	ldr	r3, [r7, #12]
24000ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24000ff8:	b2db      	uxtb	r3, r3
24000ffa:	2b01      	cmp	r3, #1
24000ffc:	d101      	bne.n	24001002 <HAL_QSPI_Transmit+0x2e>
24000ffe:	2302      	movs	r3, #2
24001000:	e076      	b.n	240010f0 <HAL_QSPI_Transmit+0x11c>
24001002:	68fb      	ldr	r3, [r7, #12]
24001004:	2201      	movs	r2, #1
24001006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2400100a:	68fb      	ldr	r3, [r7, #12]
2400100c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001010:	b2db      	uxtb	r3, r3
24001012:	2b01      	cmp	r3, #1
24001014:	d165      	bne.n	240010e2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001016:	68fb      	ldr	r3, [r7, #12]
24001018:	2200      	movs	r2, #0
2400101a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2400101c:	68bb      	ldr	r3, [r7, #8]
2400101e:	2b00      	cmp	r3, #0
24001020:	d056      	beq.n	240010d0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24001022:	68fb      	ldr	r3, [r7, #12]
24001024:	2212      	movs	r2, #18
24001026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2400102a:	68fb      	ldr	r3, [r7, #12]
2400102c:	681b      	ldr	r3, [r3, #0]
2400102e:	691b      	ldr	r3, [r3, #16]
24001030:	1c5a      	adds	r2, r3, #1
24001032:	68fb      	ldr	r3, [r7, #12]
24001034:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24001036:	68fb      	ldr	r3, [r7, #12]
24001038:	681b      	ldr	r3, [r3, #0]
2400103a:	691b      	ldr	r3, [r3, #16]
2400103c:	1c5a      	adds	r2, r3, #1
2400103e:	68fb      	ldr	r3, [r7, #12]
24001040:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24001042:	68fb      	ldr	r3, [r7, #12]
24001044:	68ba      	ldr	r2, [r7, #8]
24001046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24001048:	68fb      	ldr	r3, [r7, #12]
2400104a:	681b      	ldr	r3, [r3, #0]
2400104c:	695a      	ldr	r2, [r3, #20]
2400104e:	68fb      	ldr	r3, [r7, #12]
24001050:	681b      	ldr	r3, [r3, #0]
24001052:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24001056:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24001058:	e01b      	b.n	24001092 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
2400105a:	687b      	ldr	r3, [r7, #4]
2400105c:	9300      	str	r3, [sp, #0]
2400105e:	69bb      	ldr	r3, [r7, #24]
24001060:	2201      	movs	r2, #1
24001062:	2104      	movs	r1, #4
24001064:	68f8      	ldr	r0, [r7, #12]
24001066:	f000 f946 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
2400106a:	4603      	mov	r3, r0
2400106c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2400106e:	7ffb      	ldrb	r3, [r7, #31]
24001070:	2b00      	cmp	r3, #0
24001072:	d113      	bne.n	2400109c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24001074:	68fb      	ldr	r3, [r7, #12]
24001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001078:	781a      	ldrb	r2, [r3, #0]
2400107a:	697b      	ldr	r3, [r7, #20]
2400107c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
2400107e:	68fb      	ldr	r3, [r7, #12]
24001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001082:	1c5a      	adds	r2, r3, #1
24001084:	68fb      	ldr	r3, [r7, #12]
24001086:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24001088:	68fb      	ldr	r3, [r7, #12]
2400108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400108c:	1e5a      	subs	r2, r3, #1
2400108e:	68fb      	ldr	r3, [r7, #12]
24001090:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
24001092:	68fb      	ldr	r3, [r7, #12]
24001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001096:	2b00      	cmp	r3, #0
24001098:	d1df      	bne.n	2400105a <HAL_QSPI_Transmit+0x86>
2400109a:	e000      	b.n	2400109e <HAL_QSPI_Transmit+0xca>
          break;
2400109c:	bf00      	nop
      }

      if (status == HAL_OK)
2400109e:	7ffb      	ldrb	r3, [r7, #31]
240010a0:	2b00      	cmp	r3, #0
240010a2:	d110      	bne.n	240010c6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
240010a4:	687b      	ldr	r3, [r7, #4]
240010a6:	9300      	str	r3, [sp, #0]
240010a8:	69bb      	ldr	r3, [r7, #24]
240010aa:	2201      	movs	r2, #1
240010ac:	2102      	movs	r1, #2
240010ae:	68f8      	ldr	r0, [r7, #12]
240010b0:	f000 f921 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
240010b4:	4603      	mov	r3, r0
240010b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
240010b8:	7ffb      	ldrb	r3, [r7, #31]
240010ba:	2b00      	cmp	r3, #0
240010bc:	d103      	bne.n	240010c6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240010be:	68fb      	ldr	r3, [r7, #12]
240010c0:	681b      	ldr	r3, [r3, #0]
240010c2:	2202      	movs	r2, #2
240010c4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
240010c6:	68fb      	ldr	r3, [r7, #12]
240010c8:	2201      	movs	r2, #1
240010ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240010ce:	e00a      	b.n	240010e6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240010d0:	68fb      	ldr	r3, [r7, #12]
240010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240010d4:	f043 0208 	orr.w	r2, r3, #8
240010d8:	68fb      	ldr	r3, [r7, #12]
240010da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240010dc:	2301      	movs	r3, #1
240010de:	77fb      	strb	r3, [r7, #31]
240010e0:	e001      	b.n	240010e6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
240010e2:	2302      	movs	r3, #2
240010e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240010e6:	68fb      	ldr	r3, [r7, #12]
240010e8:	2200      	movs	r2, #0
240010ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
240010ee:	7ffb      	ldrb	r3, [r7, #31]
}
240010f0:	4618      	mov	r0, r3
240010f2:	3720      	adds	r7, #32
240010f4:	46bd      	mov	sp, r7
240010f6:	bd80      	pop	{r7, pc}

240010f8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
240010f8:	b580      	push	{r7, lr}
240010fa:	b08a      	sub	sp, #40	; 0x28
240010fc:	af02      	add	r7, sp, #8
240010fe:	60f8      	str	r0, [r7, #12]
24001100:	60b9      	str	r1, [r7, #8]
24001102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24001104:	2300      	movs	r3, #0
24001106:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24001108:	f7ff fdac 	bl	24000c64 <HAL_GetTick>
2400110c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2400110e:	68fb      	ldr	r3, [r7, #12]
24001110:	681b      	ldr	r3, [r3, #0]
24001112:	699b      	ldr	r3, [r3, #24]
24001114:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24001116:	68fb      	ldr	r3, [r7, #12]
24001118:	681b      	ldr	r3, [r3, #0]
2400111a:	3320      	adds	r3, #32
2400111c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
2400111e:	68fb      	ldr	r3, [r7, #12]
24001120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24001124:	b2db      	uxtb	r3, r3
24001126:	2b01      	cmp	r3, #1
24001128:	d101      	bne.n	2400112e <HAL_QSPI_Receive+0x36>
2400112a:	2302      	movs	r3, #2
2400112c:	e07d      	b.n	2400122a <HAL_QSPI_Receive+0x132>
2400112e:	68fb      	ldr	r3, [r7, #12]
24001130:	2201      	movs	r2, #1
24001132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24001136:	68fb      	ldr	r3, [r7, #12]
24001138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400113c:	b2db      	uxtb	r3, r3
2400113e:	2b01      	cmp	r3, #1
24001140:	d16c      	bne.n	2400121c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001142:	68fb      	ldr	r3, [r7, #12]
24001144:	2200      	movs	r2, #0
24001146:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24001148:	68bb      	ldr	r3, [r7, #8]
2400114a:	2b00      	cmp	r3, #0
2400114c:	d05d      	beq.n	2400120a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2400114e:	68fb      	ldr	r3, [r7, #12]
24001150:	2222      	movs	r2, #34	; 0x22
24001152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24001156:	68fb      	ldr	r3, [r7, #12]
24001158:	681b      	ldr	r3, [r3, #0]
2400115a:	691b      	ldr	r3, [r3, #16]
2400115c:	1c5a      	adds	r2, r3, #1
2400115e:	68fb      	ldr	r3, [r7, #12]
24001160:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24001162:	68fb      	ldr	r3, [r7, #12]
24001164:	681b      	ldr	r3, [r3, #0]
24001166:	691b      	ldr	r3, [r3, #16]
24001168:	1c5a      	adds	r2, r3, #1
2400116a:	68fb      	ldr	r3, [r7, #12]
2400116c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2400116e:	68fb      	ldr	r3, [r7, #12]
24001170:	68ba      	ldr	r2, [r7, #8]
24001172:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24001174:	68fb      	ldr	r3, [r7, #12]
24001176:	681b      	ldr	r3, [r3, #0]
24001178:	695b      	ldr	r3, [r3, #20]
2400117a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2400117e:	68fb      	ldr	r3, [r7, #12]
24001180:	681b      	ldr	r3, [r3, #0]
24001182:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24001186:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24001188:	68fb      	ldr	r3, [r7, #12]
2400118a:	681b      	ldr	r3, [r3, #0]
2400118c:	697a      	ldr	r2, [r7, #20]
2400118e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
24001190:	e01c      	b.n	240011cc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
24001192:	687b      	ldr	r3, [r7, #4]
24001194:	9300      	str	r3, [sp, #0]
24001196:	69bb      	ldr	r3, [r7, #24]
24001198:	2201      	movs	r2, #1
2400119a:	2106      	movs	r1, #6
2400119c:	68f8      	ldr	r0, [r7, #12]
2400119e:	f000 f8aa 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
240011a2:	4603      	mov	r3, r0
240011a4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
240011a6:	7ffb      	ldrb	r3, [r7, #31]
240011a8:	2b00      	cmp	r3, #0
240011aa:	d114      	bne.n	240011d6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
240011ac:	68fb      	ldr	r3, [r7, #12]
240011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240011b0:	693a      	ldr	r2, [r7, #16]
240011b2:	7812      	ldrb	r2, [r2, #0]
240011b4:	b2d2      	uxtb	r2, r2
240011b6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
240011b8:	68fb      	ldr	r3, [r7, #12]
240011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240011bc:	1c5a      	adds	r2, r3, #1
240011be:	68fb      	ldr	r3, [r7, #12]
240011c0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
240011c2:	68fb      	ldr	r3, [r7, #12]
240011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240011c6:	1e5a      	subs	r2, r3, #1
240011c8:	68fb      	ldr	r3, [r7, #12]
240011ca:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
240011cc:	68fb      	ldr	r3, [r7, #12]
240011ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240011d0:	2b00      	cmp	r3, #0
240011d2:	d1de      	bne.n	24001192 <HAL_QSPI_Receive+0x9a>
240011d4:	e000      	b.n	240011d8 <HAL_QSPI_Receive+0xe0>
          break;
240011d6:	bf00      	nop
      }

      if (status == HAL_OK)
240011d8:	7ffb      	ldrb	r3, [r7, #31]
240011da:	2b00      	cmp	r3, #0
240011dc:	d110      	bne.n	24001200 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
240011de:	687b      	ldr	r3, [r7, #4]
240011e0:	9300      	str	r3, [sp, #0]
240011e2:	69bb      	ldr	r3, [r7, #24]
240011e4:	2201      	movs	r2, #1
240011e6:	2102      	movs	r1, #2
240011e8:	68f8      	ldr	r0, [r7, #12]
240011ea:	f000 f884 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
240011ee:	4603      	mov	r3, r0
240011f0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
240011f2:	7ffb      	ldrb	r3, [r7, #31]
240011f4:	2b00      	cmp	r3, #0
240011f6:	d103      	bne.n	24001200 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240011f8:	68fb      	ldr	r3, [r7, #12]
240011fa:	681b      	ldr	r3, [r3, #0]
240011fc:	2202      	movs	r2, #2
240011fe:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24001200:	68fb      	ldr	r3, [r7, #12]
24001202:	2201      	movs	r2, #1
24001204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24001208:	e00a      	b.n	24001220 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2400120a:	68fb      	ldr	r3, [r7, #12]
2400120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400120e:	f043 0208 	orr.w	r2, r3, #8
24001212:	68fb      	ldr	r3, [r7, #12]
24001214:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24001216:	2301      	movs	r3, #1
24001218:	77fb      	strb	r3, [r7, #31]
2400121a:	e001      	b.n	24001220 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
2400121c:	2302      	movs	r3, #2
2400121e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24001220:	68fb      	ldr	r3, [r7, #12]
24001222:	2200      	movs	r2, #0
24001224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24001228:	7ffb      	ldrb	r3, [r7, #31]
}
2400122a:	4618      	mov	r0, r3
2400122c:	3720      	adds	r7, #32
2400122e:	46bd      	mov	sp, r7
24001230:	bd80      	pop	{r7, pc}

24001232 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
24001232:	b580      	push	{r7, lr}
24001234:	b088      	sub	sp, #32
24001236:	af02      	add	r7, sp, #8
24001238:	60f8      	str	r0, [r7, #12]
2400123a:	60b9      	str	r1, [r7, #8]
2400123c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2400123e:	f7ff fd11 	bl	24000c64 <HAL_GetTick>
24001242:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
24001244:	68fb      	ldr	r3, [r7, #12]
24001246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400124a:	b2db      	uxtb	r3, r3
2400124c:	2b01      	cmp	r3, #1
2400124e:	d101      	bne.n	24001254 <HAL_QSPI_MemoryMapped+0x22>
24001250:	2302      	movs	r3, #2
24001252:	e04c      	b.n	240012ee <HAL_QSPI_MemoryMapped+0xbc>
24001254:	68fb      	ldr	r3, [r7, #12]
24001256:	2201      	movs	r2, #1
24001258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2400125c:	68fb      	ldr	r3, [r7, #12]
2400125e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001262:	b2db      	uxtb	r3, r3
24001264:	2b01      	cmp	r3, #1
24001266:	d13b      	bne.n	240012e0 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24001268:	68fb      	ldr	r3, [r7, #12]
2400126a:	2200      	movs	r2, #0
2400126c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2400126e:	68fb      	ldr	r3, [r7, #12]
24001270:	2282      	movs	r2, #130	; 0x82
24001272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24001276:	68fb      	ldr	r3, [r7, #12]
24001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400127a:	9300      	str	r3, [sp, #0]
2400127c:	693b      	ldr	r3, [r7, #16]
2400127e:	2200      	movs	r2, #0
24001280:	2120      	movs	r1, #32
24001282:	68f8      	ldr	r0, [r7, #12]
24001284:	f000 f837 	bl	240012f6 <QSPI_WaitFlagStateUntilTimeout>
24001288:	4603      	mov	r3, r0
2400128a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2400128c:	7dfb      	ldrb	r3, [r7, #23]
2400128e:	2b00      	cmp	r3, #0
24001290:	d128      	bne.n	240012e4 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
24001292:	68fb      	ldr	r3, [r7, #12]
24001294:	681b      	ldr	r3, [r3, #0]
24001296:	681b      	ldr	r3, [r3, #0]
24001298:	f023 0108 	bic.w	r1, r3, #8
2400129c:	687b      	ldr	r3, [r7, #4]
2400129e:	685a      	ldr	r2, [r3, #4]
240012a0:	68fb      	ldr	r3, [r7, #12]
240012a2:	681b      	ldr	r3, [r3, #0]
240012a4:	430a      	orrs	r2, r1
240012a6:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
240012a8:	687b      	ldr	r3, [r7, #4]
240012aa:	685b      	ldr	r3, [r3, #4]
240012ac:	2b08      	cmp	r3, #8
240012ae:	d110      	bne.n	240012d2 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
240012b0:	68fb      	ldr	r3, [r7, #12]
240012b2:	681b      	ldr	r3, [r3, #0]
240012b4:	687a      	ldr	r2, [r7, #4]
240012b6:	6812      	ldr	r2, [r2, #0]
240012b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
240012ba:	68fb      	ldr	r3, [r7, #12]
240012bc:	681b      	ldr	r3, [r3, #0]
240012be:	2210      	movs	r2, #16
240012c0:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
240012c2:	68fb      	ldr	r3, [r7, #12]
240012c4:	681b      	ldr	r3, [r3, #0]
240012c6:	681a      	ldr	r2, [r3, #0]
240012c8:	68fb      	ldr	r3, [r7, #12]
240012ca:	681b      	ldr	r3, [r3, #0]
240012cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
240012d0:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
240012d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
240012d6:	68b9      	ldr	r1, [r7, #8]
240012d8:	68f8      	ldr	r0, [r7, #12]
240012da:	f000 f843 	bl	24001364 <QSPI_Config>
240012de:	e001      	b.n	240012e4 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
240012e0:	2302      	movs	r3, #2
240012e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240012e4:	68fb      	ldr	r3, [r7, #12]
240012e6:	2200      	movs	r2, #0
240012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240012ec:	7dfb      	ldrb	r3, [r7, #23]
}
240012ee:	4618      	mov	r0, r3
240012f0:	3718      	adds	r7, #24
240012f2:	46bd      	mov	sp, r7
240012f4:	bd80      	pop	{r7, pc}

240012f6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
240012f6:	b580      	push	{r7, lr}
240012f8:	b084      	sub	sp, #16
240012fa:	af00      	add	r7, sp, #0
240012fc:	60f8      	str	r0, [r7, #12]
240012fe:	60b9      	str	r1, [r7, #8]
24001300:	603b      	str	r3, [r7, #0]
24001302:	4613      	mov	r3, r2
24001304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24001306:	e01a      	b.n	2400133e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24001308:	69bb      	ldr	r3, [r7, #24]
2400130a:	f1b3 3fff 	cmp.w	r3, #4294967295
2400130e:	d016      	beq.n	2400133e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24001310:	f7ff fca8 	bl	24000c64 <HAL_GetTick>
24001314:	4602      	mov	r2, r0
24001316:	683b      	ldr	r3, [r7, #0]
24001318:	1ad3      	subs	r3, r2, r3
2400131a:	69ba      	ldr	r2, [r7, #24]
2400131c:	429a      	cmp	r2, r3
2400131e:	d302      	bcc.n	24001326 <QSPI_WaitFlagStateUntilTimeout+0x30>
24001320:	69bb      	ldr	r3, [r7, #24]
24001322:	2b00      	cmp	r3, #0
24001324:	d10b      	bne.n	2400133e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24001326:	68fb      	ldr	r3, [r7, #12]
24001328:	2204      	movs	r2, #4
2400132a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2400132e:	68fb      	ldr	r3, [r7, #12]
24001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001332:	f043 0201 	orr.w	r2, r3, #1
24001336:	68fb      	ldr	r3, [r7, #12]
24001338:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
2400133a:	2301      	movs	r3, #1
2400133c:	e00e      	b.n	2400135c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2400133e:	68fb      	ldr	r3, [r7, #12]
24001340:	681b      	ldr	r3, [r3, #0]
24001342:	689a      	ldr	r2, [r3, #8]
24001344:	68bb      	ldr	r3, [r7, #8]
24001346:	4013      	ands	r3, r2
24001348:	2b00      	cmp	r3, #0
2400134a:	bf14      	ite	ne
2400134c:	2301      	movne	r3, #1
2400134e:	2300      	moveq	r3, #0
24001350:	b2db      	uxtb	r3, r3
24001352:	461a      	mov	r2, r3
24001354:	79fb      	ldrb	r3, [r7, #7]
24001356:	429a      	cmp	r2, r3
24001358:	d1d6      	bne.n	24001308 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2400135a:	2300      	movs	r3, #0
}
2400135c:	4618      	mov	r0, r3
2400135e:	3710      	adds	r7, #16
24001360:	46bd      	mov	sp, r7
24001362:	bd80      	pop	{r7, pc}

24001364 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24001364:	b480      	push	{r7}
24001366:	b085      	sub	sp, #20
24001368:	af00      	add	r7, sp, #0
2400136a:	60f8      	str	r0, [r7, #12]
2400136c:	60b9      	str	r1, [r7, #8]
2400136e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24001370:	68bb      	ldr	r3, [r7, #8]
24001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001374:	2b00      	cmp	r3, #0
24001376:	d009      	beq.n	2400138c <QSPI_Config+0x28>
24001378:	687b      	ldr	r3, [r7, #4]
2400137a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2400137e:	d005      	beq.n	2400138c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24001380:	68bb      	ldr	r3, [r7, #8]
24001382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24001384:	68fb      	ldr	r3, [r7, #12]
24001386:	681b      	ldr	r3, [r3, #0]
24001388:	3a01      	subs	r2, #1
2400138a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
2400138c:	68bb      	ldr	r3, [r7, #8]
2400138e:	699b      	ldr	r3, [r3, #24]
24001390:	2b00      	cmp	r3, #0
24001392:	f000 80b9 	beq.w	24001508 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24001396:	68bb      	ldr	r3, [r7, #8]
24001398:	6a1b      	ldr	r3, [r3, #32]
2400139a:	2b00      	cmp	r3, #0
2400139c:	d05f      	beq.n	2400145e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
2400139e:	68fb      	ldr	r3, [r7, #12]
240013a0:	681b      	ldr	r3, [r3, #0]
240013a2:	68ba      	ldr	r2, [r7, #8]
240013a4:	6892      	ldr	r2, [r2, #8]
240013a6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
240013a8:	68bb      	ldr	r3, [r7, #8]
240013aa:	69db      	ldr	r3, [r3, #28]
240013ac:	2b00      	cmp	r3, #0
240013ae:	d031      	beq.n	24001414 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240013b0:	68bb      	ldr	r3, [r7, #8]
240013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240013b4:	68bb      	ldr	r3, [r7, #8]
240013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240013b8:	431a      	orrs	r2, r3
240013ba:	68bb      	ldr	r3, [r7, #8]
240013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240013be:	431a      	orrs	r2, r3
240013c0:	68bb      	ldr	r3, [r7, #8]
240013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240013c4:	431a      	orrs	r2, r3
240013c6:	68bb      	ldr	r3, [r7, #8]
240013c8:	695b      	ldr	r3, [r3, #20]
240013ca:	049b      	lsls	r3, r3, #18
240013cc:	431a      	orrs	r2, r3
240013ce:	68bb      	ldr	r3, [r7, #8]
240013d0:	691b      	ldr	r3, [r3, #16]
240013d2:	431a      	orrs	r2, r3
240013d4:	68bb      	ldr	r3, [r7, #8]
240013d6:	6a1b      	ldr	r3, [r3, #32]
240013d8:	431a      	orrs	r2, r3
240013da:	68bb      	ldr	r3, [r7, #8]
240013dc:	68db      	ldr	r3, [r3, #12]
240013de:	431a      	orrs	r2, r3
240013e0:	68bb      	ldr	r3, [r7, #8]
240013e2:	69db      	ldr	r3, [r3, #28]
240013e4:	431a      	orrs	r2, r3
240013e6:	68bb      	ldr	r3, [r7, #8]
240013e8:	699b      	ldr	r3, [r3, #24]
240013ea:	431a      	orrs	r2, r3
240013ec:	68bb      	ldr	r3, [r7, #8]
240013ee:	681b      	ldr	r3, [r3, #0]
240013f0:	ea42 0103 	orr.w	r1, r2, r3
240013f4:	68fb      	ldr	r3, [r7, #12]
240013f6:	681b      	ldr	r3, [r3, #0]
240013f8:	687a      	ldr	r2, [r7, #4]
240013fa:	430a      	orrs	r2, r1
240013fc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240013fe:	687b      	ldr	r3, [r7, #4]
24001400:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24001404:	f000 812e 	beq.w	24001664 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24001408:	68fb      	ldr	r3, [r7, #12]
2400140a:	681b      	ldr	r3, [r3, #0]
2400140c:	68ba      	ldr	r2, [r7, #8]
2400140e:	6852      	ldr	r2, [r2, #4]
24001410:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
24001412:	e127      	b.n	24001664 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24001414:	68bb      	ldr	r3, [r7, #8]
24001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24001418:	68bb      	ldr	r3, [r7, #8]
2400141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400141c:	431a      	orrs	r2, r3
2400141e:	68bb      	ldr	r3, [r7, #8]
24001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001422:	431a      	orrs	r2, r3
24001424:	68bb      	ldr	r3, [r7, #8]
24001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001428:	431a      	orrs	r2, r3
2400142a:	68bb      	ldr	r3, [r7, #8]
2400142c:	695b      	ldr	r3, [r3, #20]
2400142e:	049b      	lsls	r3, r3, #18
24001430:	431a      	orrs	r2, r3
24001432:	68bb      	ldr	r3, [r7, #8]
24001434:	691b      	ldr	r3, [r3, #16]
24001436:	431a      	orrs	r2, r3
24001438:	68bb      	ldr	r3, [r7, #8]
2400143a:	6a1b      	ldr	r3, [r3, #32]
2400143c:	431a      	orrs	r2, r3
2400143e:	68bb      	ldr	r3, [r7, #8]
24001440:	69db      	ldr	r3, [r3, #28]
24001442:	431a      	orrs	r2, r3
24001444:	68bb      	ldr	r3, [r7, #8]
24001446:	699b      	ldr	r3, [r3, #24]
24001448:	431a      	orrs	r2, r3
2400144a:	68bb      	ldr	r3, [r7, #8]
2400144c:	681b      	ldr	r3, [r3, #0]
2400144e:	ea42 0103 	orr.w	r1, r2, r3
24001452:	68fb      	ldr	r3, [r7, #12]
24001454:	681b      	ldr	r3, [r3, #0]
24001456:	687a      	ldr	r2, [r7, #4]
24001458:	430a      	orrs	r2, r1
2400145a:	615a      	str	r2, [r3, #20]
}
2400145c:	e102      	b.n	24001664 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2400145e:	68bb      	ldr	r3, [r7, #8]
24001460:	69db      	ldr	r3, [r3, #28]
24001462:	2b00      	cmp	r3, #0
24001464:	d02e      	beq.n	240014c4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24001466:	68bb      	ldr	r3, [r7, #8]
24001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400146a:	68bb      	ldr	r3, [r7, #8]
2400146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400146e:	431a      	orrs	r2, r3
24001470:	68bb      	ldr	r3, [r7, #8]
24001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001474:	431a      	orrs	r2, r3
24001476:	68bb      	ldr	r3, [r7, #8]
24001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400147a:	431a      	orrs	r2, r3
2400147c:	68bb      	ldr	r3, [r7, #8]
2400147e:	695b      	ldr	r3, [r3, #20]
24001480:	049b      	lsls	r3, r3, #18
24001482:	431a      	orrs	r2, r3
24001484:	68bb      	ldr	r3, [r7, #8]
24001486:	6a1b      	ldr	r3, [r3, #32]
24001488:	431a      	orrs	r2, r3
2400148a:	68bb      	ldr	r3, [r7, #8]
2400148c:	68db      	ldr	r3, [r3, #12]
2400148e:	431a      	orrs	r2, r3
24001490:	68bb      	ldr	r3, [r7, #8]
24001492:	69db      	ldr	r3, [r3, #28]
24001494:	431a      	orrs	r2, r3
24001496:	68bb      	ldr	r3, [r7, #8]
24001498:	699b      	ldr	r3, [r3, #24]
2400149a:	431a      	orrs	r2, r3
2400149c:	68bb      	ldr	r3, [r7, #8]
2400149e:	681b      	ldr	r3, [r3, #0]
240014a0:	ea42 0103 	orr.w	r1, r2, r3
240014a4:	68fb      	ldr	r3, [r7, #12]
240014a6:	681b      	ldr	r3, [r3, #0]
240014a8:	687a      	ldr	r2, [r7, #4]
240014aa:	430a      	orrs	r2, r1
240014ac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240014ae:	687b      	ldr	r3, [r7, #4]
240014b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240014b4:	f000 80d6 	beq.w	24001664 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
240014b8:	68fb      	ldr	r3, [r7, #12]
240014ba:	681b      	ldr	r3, [r3, #0]
240014bc:	68ba      	ldr	r2, [r7, #8]
240014be:	6852      	ldr	r2, [r2, #4]
240014c0:	619a      	str	r2, [r3, #24]
}
240014c2:	e0cf      	b.n	24001664 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240014c4:	68bb      	ldr	r3, [r7, #8]
240014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240014c8:	68bb      	ldr	r3, [r7, #8]
240014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240014cc:	431a      	orrs	r2, r3
240014ce:	68bb      	ldr	r3, [r7, #8]
240014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240014d2:	431a      	orrs	r2, r3
240014d4:	68bb      	ldr	r3, [r7, #8]
240014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240014d8:	431a      	orrs	r2, r3
240014da:	68bb      	ldr	r3, [r7, #8]
240014dc:	695b      	ldr	r3, [r3, #20]
240014de:	049b      	lsls	r3, r3, #18
240014e0:	431a      	orrs	r2, r3
240014e2:	68bb      	ldr	r3, [r7, #8]
240014e4:	6a1b      	ldr	r3, [r3, #32]
240014e6:	431a      	orrs	r2, r3
240014e8:	68bb      	ldr	r3, [r7, #8]
240014ea:	69db      	ldr	r3, [r3, #28]
240014ec:	431a      	orrs	r2, r3
240014ee:	68bb      	ldr	r3, [r7, #8]
240014f0:	699b      	ldr	r3, [r3, #24]
240014f2:	431a      	orrs	r2, r3
240014f4:	68bb      	ldr	r3, [r7, #8]
240014f6:	681b      	ldr	r3, [r3, #0]
240014f8:	ea42 0103 	orr.w	r1, r2, r3
240014fc:	68fb      	ldr	r3, [r7, #12]
240014fe:	681b      	ldr	r3, [r3, #0]
24001500:	687a      	ldr	r2, [r7, #4]
24001502:	430a      	orrs	r2, r1
24001504:	615a      	str	r2, [r3, #20]
}
24001506:	e0ad      	b.n	24001664 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24001508:	68bb      	ldr	r3, [r7, #8]
2400150a:	6a1b      	ldr	r3, [r3, #32]
2400150c:	2b00      	cmp	r3, #0
2400150e:	d058      	beq.n	240015c2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24001510:	68fb      	ldr	r3, [r7, #12]
24001512:	681b      	ldr	r3, [r3, #0]
24001514:	68ba      	ldr	r2, [r7, #8]
24001516:	6892      	ldr	r2, [r2, #8]
24001518:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2400151a:	68bb      	ldr	r3, [r7, #8]
2400151c:	69db      	ldr	r3, [r3, #28]
2400151e:	2b00      	cmp	r3, #0
24001520:	d02d      	beq.n	2400157e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24001522:	68bb      	ldr	r3, [r7, #8]
24001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24001526:	68bb      	ldr	r3, [r7, #8]
24001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400152a:	431a      	orrs	r2, r3
2400152c:	68bb      	ldr	r3, [r7, #8]
2400152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001530:	431a      	orrs	r2, r3
24001532:	68bb      	ldr	r3, [r7, #8]
24001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001536:	431a      	orrs	r2, r3
24001538:	68bb      	ldr	r3, [r7, #8]
2400153a:	695b      	ldr	r3, [r3, #20]
2400153c:	049b      	lsls	r3, r3, #18
2400153e:	431a      	orrs	r2, r3
24001540:	68bb      	ldr	r3, [r7, #8]
24001542:	691b      	ldr	r3, [r3, #16]
24001544:	431a      	orrs	r2, r3
24001546:	68bb      	ldr	r3, [r7, #8]
24001548:	6a1b      	ldr	r3, [r3, #32]
2400154a:	431a      	orrs	r2, r3
2400154c:	68bb      	ldr	r3, [r7, #8]
2400154e:	68db      	ldr	r3, [r3, #12]
24001550:	431a      	orrs	r2, r3
24001552:	68bb      	ldr	r3, [r7, #8]
24001554:	69db      	ldr	r3, [r3, #28]
24001556:	431a      	orrs	r2, r3
24001558:	68bb      	ldr	r3, [r7, #8]
2400155a:	699b      	ldr	r3, [r3, #24]
2400155c:	ea42 0103 	orr.w	r1, r2, r3
24001560:	68fb      	ldr	r3, [r7, #12]
24001562:	681b      	ldr	r3, [r3, #0]
24001564:	687a      	ldr	r2, [r7, #4]
24001566:	430a      	orrs	r2, r1
24001568:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2400156a:	687b      	ldr	r3, [r7, #4]
2400156c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24001570:	d078      	beq.n	24001664 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24001572:	68fb      	ldr	r3, [r7, #12]
24001574:	681b      	ldr	r3, [r3, #0]
24001576:	68ba      	ldr	r2, [r7, #8]
24001578:	6852      	ldr	r2, [r2, #4]
2400157a:	619a      	str	r2, [r3, #24]
}
2400157c:	e072      	b.n	24001664 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2400157e:	68bb      	ldr	r3, [r7, #8]
24001580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24001582:	68bb      	ldr	r3, [r7, #8]
24001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001586:	431a      	orrs	r2, r3
24001588:	68bb      	ldr	r3, [r7, #8]
2400158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400158c:	431a      	orrs	r2, r3
2400158e:	68bb      	ldr	r3, [r7, #8]
24001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001592:	431a      	orrs	r2, r3
24001594:	68bb      	ldr	r3, [r7, #8]
24001596:	695b      	ldr	r3, [r3, #20]
24001598:	049b      	lsls	r3, r3, #18
2400159a:	431a      	orrs	r2, r3
2400159c:	68bb      	ldr	r3, [r7, #8]
2400159e:	691b      	ldr	r3, [r3, #16]
240015a0:	431a      	orrs	r2, r3
240015a2:	68bb      	ldr	r3, [r7, #8]
240015a4:	6a1b      	ldr	r3, [r3, #32]
240015a6:	431a      	orrs	r2, r3
240015a8:	68bb      	ldr	r3, [r7, #8]
240015aa:	69db      	ldr	r3, [r3, #28]
240015ac:	431a      	orrs	r2, r3
240015ae:	68bb      	ldr	r3, [r7, #8]
240015b0:	699b      	ldr	r3, [r3, #24]
240015b2:	ea42 0103 	orr.w	r1, r2, r3
240015b6:	68fb      	ldr	r3, [r7, #12]
240015b8:	681b      	ldr	r3, [r3, #0]
240015ba:	687a      	ldr	r2, [r7, #4]
240015bc:	430a      	orrs	r2, r1
240015be:	615a      	str	r2, [r3, #20]
}
240015c0:	e050      	b.n	24001664 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
240015c2:	68bb      	ldr	r3, [r7, #8]
240015c4:	69db      	ldr	r3, [r3, #28]
240015c6:	2b00      	cmp	r3, #0
240015c8:	d02a      	beq.n	24001620 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240015ca:	68bb      	ldr	r3, [r7, #8]
240015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240015ce:	68bb      	ldr	r3, [r7, #8]
240015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240015d2:	431a      	orrs	r2, r3
240015d4:	68bb      	ldr	r3, [r7, #8]
240015d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240015d8:	431a      	orrs	r2, r3
240015da:	68bb      	ldr	r3, [r7, #8]
240015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240015de:	431a      	orrs	r2, r3
240015e0:	68bb      	ldr	r3, [r7, #8]
240015e2:	695b      	ldr	r3, [r3, #20]
240015e4:	049b      	lsls	r3, r3, #18
240015e6:	431a      	orrs	r2, r3
240015e8:	68bb      	ldr	r3, [r7, #8]
240015ea:	6a1b      	ldr	r3, [r3, #32]
240015ec:	431a      	orrs	r2, r3
240015ee:	68bb      	ldr	r3, [r7, #8]
240015f0:	68db      	ldr	r3, [r3, #12]
240015f2:	431a      	orrs	r2, r3
240015f4:	68bb      	ldr	r3, [r7, #8]
240015f6:	69db      	ldr	r3, [r3, #28]
240015f8:	431a      	orrs	r2, r3
240015fa:	68bb      	ldr	r3, [r7, #8]
240015fc:	699b      	ldr	r3, [r3, #24]
240015fe:	ea42 0103 	orr.w	r1, r2, r3
24001602:	68fb      	ldr	r3, [r7, #12]
24001604:	681b      	ldr	r3, [r3, #0]
24001606:	687a      	ldr	r2, [r7, #4]
24001608:	430a      	orrs	r2, r1
2400160a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2400160c:	687b      	ldr	r3, [r7, #4]
2400160e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24001612:	d027      	beq.n	24001664 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24001614:	68fb      	ldr	r3, [r7, #12]
24001616:	681b      	ldr	r3, [r3, #0]
24001618:	68ba      	ldr	r2, [r7, #8]
2400161a:	6852      	ldr	r2, [r2, #4]
2400161c:	619a      	str	r2, [r3, #24]
}
2400161e:	e021      	b.n	24001664 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
24001620:	68bb      	ldr	r3, [r7, #8]
24001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001624:	2b00      	cmp	r3, #0
24001626:	d01d      	beq.n	24001664 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24001628:	68bb      	ldr	r3, [r7, #8]
2400162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400162c:	68bb      	ldr	r3, [r7, #8]
2400162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001630:	431a      	orrs	r2, r3
24001632:	68bb      	ldr	r3, [r7, #8]
24001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001636:	431a      	orrs	r2, r3
24001638:	68bb      	ldr	r3, [r7, #8]
2400163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400163c:	431a      	orrs	r2, r3
2400163e:	68bb      	ldr	r3, [r7, #8]
24001640:	695b      	ldr	r3, [r3, #20]
24001642:	049b      	lsls	r3, r3, #18
24001644:	431a      	orrs	r2, r3
24001646:	68bb      	ldr	r3, [r7, #8]
24001648:	6a1b      	ldr	r3, [r3, #32]
2400164a:	431a      	orrs	r2, r3
2400164c:	68bb      	ldr	r3, [r7, #8]
2400164e:	69db      	ldr	r3, [r3, #28]
24001650:	431a      	orrs	r2, r3
24001652:	68bb      	ldr	r3, [r7, #8]
24001654:	699b      	ldr	r3, [r3, #24]
24001656:	ea42 0103 	orr.w	r1, r2, r3
2400165a:	68fb      	ldr	r3, [r7, #12]
2400165c:	681b      	ldr	r3, [r3, #0]
2400165e:	687a      	ldr	r2, [r7, #4]
24001660:	430a      	orrs	r2, r1
24001662:	615a      	str	r2, [r3, #20]
}
24001664:	bf00      	nop
24001666:	3714      	adds	r7, #20
24001668:	46bd      	mov	sp, r7
2400166a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400166e:	4770      	bx	lr

24001670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24001670:	b580      	push	{r7, lr}
24001672:	b08c      	sub	sp, #48	; 0x30
24001674:	af00      	add	r7, sp, #0
24001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
24001678:	687b      	ldr	r3, [r7, #4]
2400167a:	2b00      	cmp	r3, #0
2400167c:	d102      	bne.n	24001684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
2400167e:	2301      	movs	r3, #1
24001680:	f000 bc48 	b.w	24001f14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24001684:	687b      	ldr	r3, [r7, #4]
24001686:	681b      	ldr	r3, [r3, #0]
24001688:	f003 0301 	and.w	r3, r3, #1
2400168c:	2b00      	cmp	r3, #0
2400168e:	f000 8088 	beq.w	240017a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24001692:	4b99      	ldr	r3, [pc, #612]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001694:	691b      	ldr	r3, [r3, #16]
24001696:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400169c:	4b96      	ldr	r3, [pc, #600]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240016a4:	2b10      	cmp	r3, #16
240016a6:	d007      	beq.n	240016b8 <HAL_RCC_OscConfig+0x48>
240016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240016aa:	2b18      	cmp	r3, #24
240016ac:	d111      	bne.n	240016d2 <HAL_RCC_OscConfig+0x62>
240016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
240016b0:	f003 0303 	and.w	r3, r3, #3
240016b4:	2b02      	cmp	r3, #2
240016b6:	d10c      	bne.n	240016d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240016b8:	4b8f      	ldr	r3, [pc, #572]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240016ba:	681b      	ldr	r3, [r3, #0]
240016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240016c0:	2b00      	cmp	r3, #0
240016c2:	d06d      	beq.n	240017a0 <HAL_RCC_OscConfig+0x130>
240016c4:	687b      	ldr	r3, [r7, #4]
240016c6:	685b      	ldr	r3, [r3, #4]
240016c8:	2b00      	cmp	r3, #0
240016ca:	d169      	bne.n	240017a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
240016cc:	2301      	movs	r3, #1
240016ce:	f000 bc21 	b.w	24001f14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240016d2:	687b      	ldr	r3, [r7, #4]
240016d4:	685b      	ldr	r3, [r3, #4]
240016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240016da:	d106      	bne.n	240016ea <HAL_RCC_OscConfig+0x7a>
240016dc:	4b86      	ldr	r3, [pc, #536]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240016de:	681b      	ldr	r3, [r3, #0]
240016e0:	4a85      	ldr	r2, [pc, #532]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240016e6:	6013      	str	r3, [r2, #0]
240016e8:	e02e      	b.n	24001748 <HAL_RCC_OscConfig+0xd8>
240016ea:	687b      	ldr	r3, [r7, #4]
240016ec:	685b      	ldr	r3, [r3, #4]
240016ee:	2b00      	cmp	r3, #0
240016f0:	d10c      	bne.n	2400170c <HAL_RCC_OscConfig+0x9c>
240016f2:	4b81      	ldr	r3, [pc, #516]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240016f4:	681b      	ldr	r3, [r3, #0]
240016f6:	4a80      	ldr	r2, [pc, #512]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240016fc:	6013      	str	r3, [r2, #0]
240016fe:	4b7e      	ldr	r3, [pc, #504]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001700:	681b      	ldr	r3, [r3, #0]
24001702:	4a7d      	ldr	r2, [pc, #500]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001708:	6013      	str	r3, [r2, #0]
2400170a:	e01d      	b.n	24001748 <HAL_RCC_OscConfig+0xd8>
2400170c:	687b      	ldr	r3, [r7, #4]
2400170e:	685b      	ldr	r3, [r3, #4]
24001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24001714:	d10c      	bne.n	24001730 <HAL_RCC_OscConfig+0xc0>
24001716:	4b78      	ldr	r3, [pc, #480]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001718:	681b      	ldr	r3, [r3, #0]
2400171a:	4a77      	ldr	r2, [pc, #476]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24001720:	6013      	str	r3, [r2, #0]
24001722:	4b75      	ldr	r3, [pc, #468]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001724:	681b      	ldr	r3, [r3, #0]
24001726:	4a74      	ldr	r2, [pc, #464]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400172c:	6013      	str	r3, [r2, #0]
2400172e:	e00b      	b.n	24001748 <HAL_RCC_OscConfig+0xd8>
24001730:	4b71      	ldr	r3, [pc, #452]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001732:	681b      	ldr	r3, [r3, #0]
24001734:	4a70      	ldr	r2, [pc, #448]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400173a:	6013      	str	r3, [r2, #0]
2400173c:	4b6e      	ldr	r3, [pc, #440]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400173e:	681b      	ldr	r3, [r3, #0]
24001740:	4a6d      	ldr	r2, [pc, #436]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24001748:	687b      	ldr	r3, [r7, #4]
2400174a:	685b      	ldr	r3, [r3, #4]
2400174c:	2b00      	cmp	r3, #0
2400174e:	d013      	beq.n	24001778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001750:	f7ff fa88 	bl	24000c64 <HAL_GetTick>
24001754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24001756:	e008      	b.n	2400176a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24001758:	f7ff fa84 	bl	24000c64 <HAL_GetTick>
2400175c:	4602      	mov	r2, r0
2400175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001760:	1ad3      	subs	r3, r2, r3
24001762:	2b64      	cmp	r3, #100	; 0x64
24001764:	d901      	bls.n	2400176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
24001766:	2303      	movs	r3, #3
24001768:	e3d4      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400176a:	4b63      	ldr	r3, [pc, #396]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400176c:	681b      	ldr	r3, [r3, #0]
2400176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24001772:	2b00      	cmp	r3, #0
24001774:	d0f0      	beq.n	24001758 <HAL_RCC_OscConfig+0xe8>
24001776:	e014      	b.n	240017a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001778:	f7ff fa74 	bl	24000c64 <HAL_GetTick>
2400177c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2400177e:	e008      	b.n	24001792 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24001780:	f7ff fa70 	bl	24000c64 <HAL_GetTick>
24001784:	4602      	mov	r2, r0
24001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001788:	1ad3      	subs	r3, r2, r3
2400178a:	2b64      	cmp	r3, #100	; 0x64
2400178c:	d901      	bls.n	24001792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
2400178e:	2303      	movs	r3, #3
24001790:	e3c0      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24001792:	4b59      	ldr	r3, [pc, #356]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001794:	681b      	ldr	r3, [r3, #0]
24001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400179a:	2b00      	cmp	r3, #0
2400179c:	d1f0      	bne.n	24001780 <HAL_RCC_OscConfig+0x110>
2400179e:	e000      	b.n	240017a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240017a2:	687b      	ldr	r3, [r7, #4]
240017a4:	681b      	ldr	r3, [r3, #0]
240017a6:	f003 0302 	and.w	r3, r3, #2
240017aa:	2b00      	cmp	r3, #0
240017ac:	f000 80ca 	beq.w	24001944 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240017b0:	4b51      	ldr	r3, [pc, #324]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240017b2:	691b      	ldr	r3, [r3, #16]
240017b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
240017b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240017ba:	4b4f      	ldr	r3, [pc, #316]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240017be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240017c0:	6a3b      	ldr	r3, [r7, #32]
240017c2:	2b00      	cmp	r3, #0
240017c4:	d007      	beq.n	240017d6 <HAL_RCC_OscConfig+0x166>
240017c6:	6a3b      	ldr	r3, [r7, #32]
240017c8:	2b18      	cmp	r3, #24
240017ca:	d156      	bne.n	2400187a <HAL_RCC_OscConfig+0x20a>
240017cc:	69fb      	ldr	r3, [r7, #28]
240017ce:	f003 0303 	and.w	r3, r3, #3
240017d2:	2b00      	cmp	r3, #0
240017d4:	d151      	bne.n	2400187a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240017d6:	4b48      	ldr	r3, [pc, #288]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240017d8:	681b      	ldr	r3, [r3, #0]
240017da:	f003 0304 	and.w	r3, r3, #4
240017de:	2b00      	cmp	r3, #0
240017e0:	d005      	beq.n	240017ee <HAL_RCC_OscConfig+0x17e>
240017e2:	687b      	ldr	r3, [r7, #4]
240017e4:	68db      	ldr	r3, [r3, #12]
240017e6:	2b00      	cmp	r3, #0
240017e8:	d101      	bne.n	240017ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
240017ea:	2301      	movs	r3, #1
240017ec:	e392      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240017ee:	4b42      	ldr	r3, [pc, #264]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240017f0:	681b      	ldr	r3, [r3, #0]
240017f2:	f023 0219 	bic.w	r2, r3, #25
240017f6:	687b      	ldr	r3, [r7, #4]
240017f8:	68db      	ldr	r3, [r3, #12]
240017fa:	493f      	ldr	r1, [pc, #252]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240017fc:	4313      	orrs	r3, r2
240017fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001800:	f7ff fa30 	bl	24000c64 <HAL_GetTick>
24001804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24001806:	e008      	b.n	2400181a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24001808:	f7ff fa2c 	bl	24000c64 <HAL_GetTick>
2400180c:	4602      	mov	r2, r0
2400180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001810:	1ad3      	subs	r3, r2, r3
24001812:	2b02      	cmp	r3, #2
24001814:	d901      	bls.n	2400181a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
24001816:	2303      	movs	r3, #3
24001818:	e37c      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400181a:	4b37      	ldr	r3, [pc, #220]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400181c:	681b      	ldr	r3, [r3, #0]
2400181e:	f003 0304 	and.w	r3, r3, #4
24001822:	2b00      	cmp	r3, #0
24001824:	d0f0      	beq.n	24001808 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24001826:	f7ff fa4d 	bl	24000cc4 <HAL_GetREVID>
2400182a:	4603      	mov	r3, r0
2400182c:	f241 0203 	movw	r2, #4099	; 0x1003
24001830:	4293      	cmp	r3, r2
24001832:	d817      	bhi.n	24001864 <HAL_RCC_OscConfig+0x1f4>
24001834:	687b      	ldr	r3, [r7, #4]
24001836:	691b      	ldr	r3, [r3, #16]
24001838:	2b40      	cmp	r3, #64	; 0x40
2400183a:	d108      	bne.n	2400184e <HAL_RCC_OscConfig+0x1de>
2400183c:	4b2e      	ldr	r3, [pc, #184]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400183e:	685b      	ldr	r3, [r3, #4]
24001840:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24001844:	4a2c      	ldr	r2, [pc, #176]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400184a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400184c:	e07a      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2400184e:	4b2a      	ldr	r3, [pc, #168]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001850:	685b      	ldr	r3, [r3, #4]
24001852:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24001856:	687b      	ldr	r3, [r7, #4]
24001858:	691b      	ldr	r3, [r3, #16]
2400185a:	031b      	lsls	r3, r3, #12
2400185c:	4926      	ldr	r1, [pc, #152]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
2400185e:	4313      	orrs	r3, r2
24001860:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24001862:	e06f      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24001864:	4b24      	ldr	r3, [pc, #144]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001866:	685b      	ldr	r3, [r3, #4]
24001868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2400186c:	687b      	ldr	r3, [r7, #4]
2400186e:	691b      	ldr	r3, [r3, #16]
24001870:	061b      	lsls	r3, r3, #24
24001872:	4921      	ldr	r1, [pc, #132]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001874:	4313      	orrs	r3, r2
24001876:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24001878:	e064      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2400187a:	687b      	ldr	r3, [r7, #4]
2400187c:	68db      	ldr	r3, [r3, #12]
2400187e:	2b00      	cmp	r3, #0
24001880:	d047      	beq.n	24001912 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24001882:	4b1d      	ldr	r3, [pc, #116]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001884:	681b      	ldr	r3, [r3, #0]
24001886:	f023 0219 	bic.w	r2, r3, #25
2400188a:	687b      	ldr	r3, [r7, #4]
2400188c:	68db      	ldr	r3, [r3, #12]
2400188e:	491a      	ldr	r1, [pc, #104]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
24001890:	4313      	orrs	r3, r2
24001892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001894:	f7ff f9e6 	bl	24000c64 <HAL_GetTick>
24001898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400189a:	e008      	b.n	240018ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400189c:	f7ff f9e2 	bl	24000c64 <HAL_GetTick>
240018a0:	4602      	mov	r2, r0
240018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240018a4:	1ad3      	subs	r3, r2, r3
240018a6:	2b02      	cmp	r3, #2
240018a8:	d901      	bls.n	240018ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
240018aa:	2303      	movs	r3, #3
240018ac:	e332      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240018ae:	4b12      	ldr	r3, [pc, #72]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240018b0:	681b      	ldr	r3, [r3, #0]
240018b2:	f003 0304 	and.w	r3, r3, #4
240018b6:	2b00      	cmp	r3, #0
240018b8:	d0f0      	beq.n	2400189c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240018ba:	f7ff fa03 	bl	24000cc4 <HAL_GetREVID>
240018be:	4603      	mov	r3, r0
240018c0:	f241 0203 	movw	r2, #4099	; 0x1003
240018c4:	4293      	cmp	r3, r2
240018c6:	d819      	bhi.n	240018fc <HAL_RCC_OscConfig+0x28c>
240018c8:	687b      	ldr	r3, [r7, #4]
240018ca:	691b      	ldr	r3, [r3, #16]
240018cc:	2b40      	cmp	r3, #64	; 0x40
240018ce:	d108      	bne.n	240018e2 <HAL_RCC_OscConfig+0x272>
240018d0:	4b09      	ldr	r3, [pc, #36]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240018d2:	685b      	ldr	r3, [r3, #4]
240018d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240018d8:	4a07      	ldr	r2, [pc, #28]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240018da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240018de:	6053      	str	r3, [r2, #4]
240018e0:	e030      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
240018e2:	4b05      	ldr	r3, [pc, #20]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240018e4:	685b      	ldr	r3, [r3, #4]
240018e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
240018ea:	687b      	ldr	r3, [r7, #4]
240018ec:	691b      	ldr	r3, [r3, #16]
240018ee:	031b      	lsls	r3, r3, #12
240018f0:	4901      	ldr	r1, [pc, #4]	; (240018f8 <HAL_RCC_OscConfig+0x288>)
240018f2:	4313      	orrs	r3, r2
240018f4:	604b      	str	r3, [r1, #4]
240018f6:	e025      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
240018f8:	58024400 	.word	0x58024400
240018fc:	4b9a      	ldr	r3, [pc, #616]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240018fe:	685b      	ldr	r3, [r3, #4]
24001900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24001904:	687b      	ldr	r3, [r7, #4]
24001906:	691b      	ldr	r3, [r3, #16]
24001908:	061b      	lsls	r3, r3, #24
2400190a:	4997      	ldr	r1, [pc, #604]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
2400190c:	4313      	orrs	r3, r2
2400190e:	604b      	str	r3, [r1, #4]
24001910:	e018      	b.n	24001944 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24001912:	4b95      	ldr	r3, [pc, #596]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001914:	681b      	ldr	r3, [r3, #0]
24001916:	4a94      	ldr	r2, [pc, #592]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001918:	f023 0301 	bic.w	r3, r3, #1
2400191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400191e:	f7ff f9a1 	bl	24000c64 <HAL_GetTick>
24001922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24001924:	e008      	b.n	24001938 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24001926:	f7ff f99d 	bl	24000c64 <HAL_GetTick>
2400192a:	4602      	mov	r2, r0
2400192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400192e:	1ad3      	subs	r3, r2, r3
24001930:	2b02      	cmp	r3, #2
24001932:	d901      	bls.n	24001938 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
24001934:	2303      	movs	r3, #3
24001936:	e2ed      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24001938:	4b8b      	ldr	r3, [pc, #556]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
2400193a:	681b      	ldr	r3, [r3, #0]
2400193c:	f003 0304 	and.w	r3, r3, #4
24001940:	2b00      	cmp	r3, #0
24001942:	d1f0      	bne.n	24001926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24001944:	687b      	ldr	r3, [r7, #4]
24001946:	681b      	ldr	r3, [r3, #0]
24001948:	f003 0310 	and.w	r3, r3, #16
2400194c:	2b00      	cmp	r3, #0
2400194e:	f000 80a9 	beq.w	24001aa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24001952:	4b85      	ldr	r3, [pc, #532]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001954:	691b      	ldr	r3, [r3, #16]
24001956:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400195a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400195c:	4b82      	ldr	r3, [pc, #520]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
2400195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001960:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24001962:	69bb      	ldr	r3, [r7, #24]
24001964:	2b08      	cmp	r3, #8
24001966:	d007      	beq.n	24001978 <HAL_RCC_OscConfig+0x308>
24001968:	69bb      	ldr	r3, [r7, #24]
2400196a:	2b18      	cmp	r3, #24
2400196c:	d13a      	bne.n	240019e4 <HAL_RCC_OscConfig+0x374>
2400196e:	697b      	ldr	r3, [r7, #20]
24001970:	f003 0303 	and.w	r3, r3, #3
24001974:	2b01      	cmp	r3, #1
24001976:	d135      	bne.n	240019e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24001978:	4b7b      	ldr	r3, [pc, #492]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
2400197a:	681b      	ldr	r3, [r3, #0]
2400197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24001980:	2b00      	cmp	r3, #0
24001982:	d005      	beq.n	24001990 <HAL_RCC_OscConfig+0x320>
24001984:	687b      	ldr	r3, [r7, #4]
24001986:	69db      	ldr	r3, [r3, #28]
24001988:	2b80      	cmp	r3, #128	; 0x80
2400198a:	d001      	beq.n	24001990 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
2400198c:	2301      	movs	r3, #1
2400198e:	e2c1      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24001990:	f7ff f998 	bl	24000cc4 <HAL_GetREVID>
24001994:	4603      	mov	r3, r0
24001996:	f241 0203 	movw	r2, #4099	; 0x1003
2400199a:	4293      	cmp	r3, r2
2400199c:	d817      	bhi.n	240019ce <HAL_RCC_OscConfig+0x35e>
2400199e:	687b      	ldr	r3, [r7, #4]
240019a0:	6a1b      	ldr	r3, [r3, #32]
240019a2:	2b20      	cmp	r3, #32
240019a4:	d108      	bne.n	240019b8 <HAL_RCC_OscConfig+0x348>
240019a6:	4b70      	ldr	r3, [pc, #448]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019a8:	685b      	ldr	r3, [r3, #4]
240019aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240019ae:	4a6e      	ldr	r2, [pc, #440]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240019b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240019b6:	e075      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240019b8:	4b6b      	ldr	r3, [pc, #428]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019ba:	685b      	ldr	r3, [r3, #4]
240019bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
240019c0:	687b      	ldr	r3, [r7, #4]
240019c2:	6a1b      	ldr	r3, [r3, #32]
240019c4:	069b      	lsls	r3, r3, #26
240019c6:	4968      	ldr	r1, [pc, #416]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019c8:	4313      	orrs	r3, r2
240019ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240019cc:	e06a      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240019ce:	4b66      	ldr	r3, [pc, #408]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019d0:	68db      	ldr	r3, [r3, #12]
240019d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
240019d6:	687b      	ldr	r3, [r7, #4]
240019d8:	6a1b      	ldr	r3, [r3, #32]
240019da:	061b      	lsls	r3, r3, #24
240019dc:	4962      	ldr	r1, [pc, #392]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019de:	4313      	orrs	r3, r2
240019e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240019e2:	e05f      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
240019e4:	687b      	ldr	r3, [r7, #4]
240019e6:	69db      	ldr	r3, [r3, #28]
240019e8:	2b00      	cmp	r3, #0
240019ea:	d042      	beq.n	24001a72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
240019ec:	4b5e      	ldr	r3, [pc, #376]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019ee:	681b      	ldr	r3, [r3, #0]
240019f0:	4a5d      	ldr	r2, [pc, #372]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
240019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240019f8:	f7ff f934 	bl	24000c64 <HAL_GetTick>
240019fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240019fe:	e008      	b.n	24001a12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24001a00:	f7ff f930 	bl	24000c64 <HAL_GetTick>
24001a04:	4602      	mov	r2, r0
24001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001a08:	1ad3      	subs	r3, r2, r3
24001a0a:	2b02      	cmp	r3, #2
24001a0c:	d901      	bls.n	24001a12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
24001a0e:	2303      	movs	r3, #3
24001a10:	e280      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24001a12:	4b55      	ldr	r3, [pc, #340]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a14:	681b      	ldr	r3, [r3, #0]
24001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
24001a1a:	2b00      	cmp	r3, #0
24001a1c:	d0f0      	beq.n	24001a00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24001a1e:	f7ff f951 	bl	24000cc4 <HAL_GetREVID>
24001a22:	4603      	mov	r3, r0
24001a24:	f241 0203 	movw	r2, #4099	; 0x1003
24001a28:	4293      	cmp	r3, r2
24001a2a:	d817      	bhi.n	24001a5c <HAL_RCC_OscConfig+0x3ec>
24001a2c:	687b      	ldr	r3, [r7, #4]
24001a2e:	6a1b      	ldr	r3, [r3, #32]
24001a30:	2b20      	cmp	r3, #32
24001a32:	d108      	bne.n	24001a46 <HAL_RCC_OscConfig+0x3d6>
24001a34:	4b4c      	ldr	r3, [pc, #304]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a36:	685b      	ldr	r3, [r3, #4]
24001a38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24001a3c:	4a4a      	ldr	r2, [pc, #296]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24001a42:	6053      	str	r3, [r2, #4]
24001a44:	e02e      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
24001a46:	4b48      	ldr	r3, [pc, #288]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a48:	685b      	ldr	r3, [r3, #4]
24001a4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24001a4e:	687b      	ldr	r3, [r7, #4]
24001a50:	6a1b      	ldr	r3, [r3, #32]
24001a52:	069b      	lsls	r3, r3, #26
24001a54:	4944      	ldr	r1, [pc, #272]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a56:	4313      	orrs	r3, r2
24001a58:	604b      	str	r3, [r1, #4]
24001a5a:	e023      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
24001a5c:	4b42      	ldr	r3, [pc, #264]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a5e:	68db      	ldr	r3, [r3, #12]
24001a60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24001a64:	687b      	ldr	r3, [r7, #4]
24001a66:	6a1b      	ldr	r3, [r3, #32]
24001a68:	061b      	lsls	r3, r3, #24
24001a6a:	493f      	ldr	r1, [pc, #252]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a6c:	4313      	orrs	r3, r2
24001a6e:	60cb      	str	r3, [r1, #12]
24001a70:	e018      	b.n	24001aa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24001a72:	4b3d      	ldr	r3, [pc, #244]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a74:	681b      	ldr	r3, [r3, #0]
24001a76:	4a3c      	ldr	r2, [pc, #240]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001a7e:	f7ff f8f1 	bl	24000c64 <HAL_GetTick>
24001a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24001a84:	e008      	b.n	24001a98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24001a86:	f7ff f8ed 	bl	24000c64 <HAL_GetTick>
24001a8a:	4602      	mov	r2, r0
24001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001a8e:	1ad3      	subs	r3, r2, r3
24001a90:	2b02      	cmp	r3, #2
24001a92:	d901      	bls.n	24001a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
24001a94:	2303      	movs	r3, #3
24001a96:	e23d      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24001a98:	4b33      	ldr	r3, [pc, #204]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001a9a:	681b      	ldr	r3, [r3, #0]
24001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24001aa0:	2b00      	cmp	r3, #0
24001aa2:	d1f0      	bne.n	24001a86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24001aa4:	687b      	ldr	r3, [r7, #4]
24001aa6:	681b      	ldr	r3, [r3, #0]
24001aa8:	f003 0308 	and.w	r3, r3, #8
24001aac:	2b00      	cmp	r3, #0
24001aae:	d036      	beq.n	24001b1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24001ab0:	687b      	ldr	r3, [r7, #4]
24001ab2:	695b      	ldr	r3, [r3, #20]
24001ab4:	2b00      	cmp	r3, #0
24001ab6:	d019      	beq.n	24001aec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
24001ab8:	4b2b      	ldr	r3, [pc, #172]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24001abc:	4a2a      	ldr	r2, [pc, #168]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001abe:	f043 0301 	orr.w	r3, r3, #1
24001ac2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24001ac4:	f7ff f8ce 	bl	24000c64 <HAL_GetTick>
24001ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24001aca:	e008      	b.n	24001ade <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24001acc:	f7ff f8ca 	bl	24000c64 <HAL_GetTick>
24001ad0:	4602      	mov	r2, r0
24001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001ad4:	1ad3      	subs	r3, r2, r3
24001ad6:	2b02      	cmp	r3, #2
24001ad8:	d901      	bls.n	24001ade <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
24001ada:	2303      	movs	r3, #3
24001adc:	e21a      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24001ade:	4b22      	ldr	r3, [pc, #136]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24001ae2:	f003 0302 	and.w	r3, r3, #2
24001ae6:	2b00      	cmp	r3, #0
24001ae8:	d0f0      	beq.n	24001acc <HAL_RCC_OscConfig+0x45c>
24001aea:	e018      	b.n	24001b1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
24001aec:	4b1e      	ldr	r3, [pc, #120]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24001af0:	4a1d      	ldr	r2, [pc, #116]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001af2:	f023 0301 	bic.w	r3, r3, #1
24001af6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24001af8:	f7ff f8b4 	bl	24000c64 <HAL_GetTick>
24001afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24001afe:	e008      	b.n	24001b12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24001b00:	f7ff f8b0 	bl	24000c64 <HAL_GetTick>
24001b04:	4602      	mov	r2, r0
24001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001b08:	1ad3      	subs	r3, r2, r3
24001b0a:	2b02      	cmp	r3, #2
24001b0c:	d901      	bls.n	24001b12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
24001b0e:	2303      	movs	r3, #3
24001b10:	e200      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24001b12:	4b15      	ldr	r3, [pc, #84]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24001b16:	f003 0302 	and.w	r3, r3, #2
24001b1a:	2b00      	cmp	r3, #0
24001b1c:	d1f0      	bne.n	24001b00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24001b1e:	687b      	ldr	r3, [r7, #4]
24001b20:	681b      	ldr	r3, [r3, #0]
24001b22:	f003 0320 	and.w	r3, r3, #32
24001b26:	2b00      	cmp	r3, #0
24001b28:	d039      	beq.n	24001b9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24001b2a:	687b      	ldr	r3, [r7, #4]
24001b2c:	699b      	ldr	r3, [r3, #24]
24001b2e:	2b00      	cmp	r3, #0
24001b30:	d01c      	beq.n	24001b6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
24001b32:	4b0d      	ldr	r3, [pc, #52]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001b34:	681b      	ldr	r3, [r3, #0]
24001b36:	4a0c      	ldr	r2, [pc, #48]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001b3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24001b3e:	f7ff f891 	bl	24000c64 <HAL_GetTick>
24001b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24001b44:	e008      	b.n	24001b58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24001b46:	f7ff f88d 	bl	24000c64 <HAL_GetTick>
24001b4a:	4602      	mov	r2, r0
24001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001b4e:	1ad3      	subs	r3, r2, r3
24001b50:	2b02      	cmp	r3, #2
24001b52:	d901      	bls.n	24001b58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
24001b54:	2303      	movs	r3, #3
24001b56:	e1dd      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24001b58:	4b03      	ldr	r3, [pc, #12]	; (24001b68 <HAL_RCC_OscConfig+0x4f8>)
24001b5a:	681b      	ldr	r3, [r3, #0]
24001b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24001b60:	2b00      	cmp	r3, #0
24001b62:	d0f0      	beq.n	24001b46 <HAL_RCC_OscConfig+0x4d6>
24001b64:	e01b      	b.n	24001b9e <HAL_RCC_OscConfig+0x52e>
24001b66:	bf00      	nop
24001b68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
24001b6c:	4b9b      	ldr	r3, [pc, #620]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001b6e:	681b      	ldr	r3, [r3, #0]
24001b70:	4a9a      	ldr	r2, [pc, #616]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24001b76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24001b78:	f7ff f874 	bl	24000c64 <HAL_GetTick>
24001b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24001b7e:	e008      	b.n	24001b92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24001b80:	f7ff f870 	bl	24000c64 <HAL_GetTick>
24001b84:	4602      	mov	r2, r0
24001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001b88:	1ad3      	subs	r3, r2, r3
24001b8a:	2b02      	cmp	r3, #2
24001b8c:	d901      	bls.n	24001b92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
24001b8e:	2303      	movs	r3, #3
24001b90:	e1c0      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24001b92:	4b92      	ldr	r3, [pc, #584]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001b94:	681b      	ldr	r3, [r3, #0]
24001b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24001b9a:	2b00      	cmp	r3, #0
24001b9c:	d1f0      	bne.n	24001b80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24001b9e:	687b      	ldr	r3, [r7, #4]
24001ba0:	681b      	ldr	r3, [r3, #0]
24001ba2:	f003 0304 	and.w	r3, r3, #4
24001ba6:	2b00      	cmp	r3, #0
24001ba8:	f000 8081 	beq.w	24001cae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
24001bac:	4b8c      	ldr	r3, [pc, #560]	; (24001de0 <HAL_RCC_OscConfig+0x770>)
24001bae:	681b      	ldr	r3, [r3, #0]
24001bb0:	4a8b      	ldr	r2, [pc, #556]	; (24001de0 <HAL_RCC_OscConfig+0x770>)
24001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24001bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24001bb8:	f7ff f854 	bl	24000c64 <HAL_GetTick>
24001bbc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24001bbe:	e008      	b.n	24001bd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24001bc0:	f7ff f850 	bl	24000c64 <HAL_GetTick>
24001bc4:	4602      	mov	r2, r0
24001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001bc8:	1ad3      	subs	r3, r2, r3
24001bca:	2b64      	cmp	r3, #100	; 0x64
24001bcc:	d901      	bls.n	24001bd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
24001bce:	2303      	movs	r3, #3
24001bd0:	e1a0      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24001bd2:	4b83      	ldr	r3, [pc, #524]	; (24001de0 <HAL_RCC_OscConfig+0x770>)
24001bd4:	681b      	ldr	r3, [r3, #0]
24001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
24001bda:	2b00      	cmp	r3, #0
24001bdc:	d0f0      	beq.n	24001bc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24001bde:	687b      	ldr	r3, [r7, #4]
24001be0:	689b      	ldr	r3, [r3, #8]
24001be2:	2b01      	cmp	r3, #1
24001be4:	d106      	bne.n	24001bf4 <HAL_RCC_OscConfig+0x584>
24001be6:	4b7d      	ldr	r3, [pc, #500]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001bea:	4a7c      	ldr	r2, [pc, #496]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001bec:	f043 0301 	orr.w	r3, r3, #1
24001bf0:	6713      	str	r3, [r2, #112]	; 0x70
24001bf2:	e02d      	b.n	24001c50 <HAL_RCC_OscConfig+0x5e0>
24001bf4:	687b      	ldr	r3, [r7, #4]
24001bf6:	689b      	ldr	r3, [r3, #8]
24001bf8:	2b00      	cmp	r3, #0
24001bfa:	d10c      	bne.n	24001c16 <HAL_RCC_OscConfig+0x5a6>
24001bfc:	4b77      	ldr	r3, [pc, #476]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c00:	4a76      	ldr	r2, [pc, #472]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c02:	f023 0301 	bic.w	r3, r3, #1
24001c06:	6713      	str	r3, [r2, #112]	; 0x70
24001c08:	4b74      	ldr	r3, [pc, #464]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c0c:	4a73      	ldr	r2, [pc, #460]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c0e:	f023 0304 	bic.w	r3, r3, #4
24001c12:	6713      	str	r3, [r2, #112]	; 0x70
24001c14:	e01c      	b.n	24001c50 <HAL_RCC_OscConfig+0x5e0>
24001c16:	687b      	ldr	r3, [r7, #4]
24001c18:	689b      	ldr	r3, [r3, #8]
24001c1a:	2b05      	cmp	r3, #5
24001c1c:	d10c      	bne.n	24001c38 <HAL_RCC_OscConfig+0x5c8>
24001c1e:	4b6f      	ldr	r3, [pc, #444]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c22:	4a6e      	ldr	r2, [pc, #440]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c24:	f043 0304 	orr.w	r3, r3, #4
24001c28:	6713      	str	r3, [r2, #112]	; 0x70
24001c2a:	4b6c      	ldr	r3, [pc, #432]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c2e:	4a6b      	ldr	r2, [pc, #428]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c30:	f043 0301 	orr.w	r3, r3, #1
24001c34:	6713      	str	r3, [r2, #112]	; 0x70
24001c36:	e00b      	b.n	24001c50 <HAL_RCC_OscConfig+0x5e0>
24001c38:	4b68      	ldr	r3, [pc, #416]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c3c:	4a67      	ldr	r2, [pc, #412]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c3e:	f023 0301 	bic.w	r3, r3, #1
24001c42:	6713      	str	r3, [r2, #112]	; 0x70
24001c44:	4b65      	ldr	r3, [pc, #404]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c48:	4a64      	ldr	r2, [pc, #400]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c4a:	f023 0304 	bic.w	r3, r3, #4
24001c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24001c50:	687b      	ldr	r3, [r7, #4]
24001c52:	689b      	ldr	r3, [r3, #8]
24001c54:	2b00      	cmp	r3, #0
24001c56:	d015      	beq.n	24001c84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24001c58:	f7ff f804 	bl	24000c64 <HAL_GetTick>
24001c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24001c5e:	e00a      	b.n	24001c76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24001c60:	f7ff f800 	bl	24000c64 <HAL_GetTick>
24001c64:	4602      	mov	r2, r0
24001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001c68:	1ad3      	subs	r3, r2, r3
24001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
24001c6e:	4293      	cmp	r3, r2
24001c70:	d901      	bls.n	24001c76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
24001c72:	2303      	movs	r3, #3
24001c74:	e14e      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24001c76:	4b59      	ldr	r3, [pc, #356]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001c7a:	f003 0302 	and.w	r3, r3, #2
24001c7e:	2b00      	cmp	r3, #0
24001c80:	d0ee      	beq.n	24001c60 <HAL_RCC_OscConfig+0x5f0>
24001c82:	e014      	b.n	24001cae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24001c84:	f7fe ffee 	bl	24000c64 <HAL_GetTick>
24001c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24001c8a:	e00a      	b.n	24001ca2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24001c8c:	f7fe ffea 	bl	24000c64 <HAL_GetTick>
24001c90:	4602      	mov	r2, r0
24001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001c94:	1ad3      	subs	r3, r2, r3
24001c96:	f241 3288 	movw	r2, #5000	; 0x1388
24001c9a:	4293      	cmp	r3, r2
24001c9c:	d901      	bls.n	24001ca2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
24001c9e:	2303      	movs	r3, #3
24001ca0:	e138      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24001ca2:	4b4e      	ldr	r3, [pc, #312]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24001ca6:	f003 0302 	and.w	r3, r3, #2
24001caa:	2b00      	cmp	r3, #0
24001cac:	d1ee      	bne.n	24001c8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24001cae:	687b      	ldr	r3, [r7, #4]
24001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001cb2:	2b00      	cmp	r3, #0
24001cb4:	f000 812d 	beq.w	24001f12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24001cb8:	4b48      	ldr	r3, [pc, #288]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001cba:	691b      	ldr	r3, [r3, #16]
24001cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
24001cc0:	2b18      	cmp	r3, #24
24001cc2:	f000 80bd 	beq.w	24001e40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24001cc6:	687b      	ldr	r3, [r7, #4]
24001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001cca:	2b02      	cmp	r3, #2
24001ccc:	f040 809e 	bne.w	24001e0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24001cd0:	4b42      	ldr	r3, [pc, #264]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001cd2:	681b      	ldr	r3, [r3, #0]
24001cd4:	4a41      	ldr	r2, [pc, #260]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001cdc:	f7fe ffc2 	bl	24000c64 <HAL_GetTick>
24001ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24001ce2:	e008      	b.n	24001cf6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24001ce4:	f7fe ffbe 	bl	24000c64 <HAL_GetTick>
24001ce8:	4602      	mov	r2, r0
24001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001cec:	1ad3      	subs	r3, r2, r3
24001cee:	2b02      	cmp	r3, #2
24001cf0:	d901      	bls.n	24001cf6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
24001cf2:	2303      	movs	r3, #3
24001cf4:	e10e      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24001cf6:	4b39      	ldr	r3, [pc, #228]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001cf8:	681b      	ldr	r3, [r3, #0]
24001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24001cfe:	2b00      	cmp	r3, #0
24001d00:	d1f0      	bne.n	24001ce4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24001d02:	4b36      	ldr	r3, [pc, #216]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24001d06:	4b37      	ldr	r3, [pc, #220]	; (24001de4 <HAL_RCC_OscConfig+0x774>)
24001d08:	4013      	ands	r3, r2
24001d0a:	687a      	ldr	r2, [r7, #4]
24001d0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
24001d0e:	687a      	ldr	r2, [r7, #4]
24001d10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
24001d12:	0112      	lsls	r2, r2, #4
24001d14:	430a      	orrs	r2, r1
24001d16:	4931      	ldr	r1, [pc, #196]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d18:	4313      	orrs	r3, r2
24001d1a:	628b      	str	r3, [r1, #40]	; 0x28
24001d1c:	687b      	ldr	r3, [r7, #4]
24001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001d20:	3b01      	subs	r3, #1
24001d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
24001d26:	687b      	ldr	r3, [r7, #4]
24001d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001d2a:	3b01      	subs	r3, #1
24001d2c:	025b      	lsls	r3, r3, #9
24001d2e:	b29b      	uxth	r3, r3
24001d30:	431a      	orrs	r2, r3
24001d32:	687b      	ldr	r3, [r7, #4]
24001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24001d36:	3b01      	subs	r3, #1
24001d38:	041b      	lsls	r3, r3, #16
24001d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24001d3e:	431a      	orrs	r2, r3
24001d40:	687b      	ldr	r3, [r7, #4]
24001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24001d44:	3b01      	subs	r3, #1
24001d46:	061b      	lsls	r3, r3, #24
24001d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24001d4c:	4923      	ldr	r1, [pc, #140]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d4e:	4313      	orrs	r3, r2
24001d50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
24001d52:	4b22      	ldr	r3, [pc, #136]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d56:	4a21      	ldr	r2, [pc, #132]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d58:	f023 0301 	bic.w	r3, r3, #1
24001d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24001d5e:	4b1f      	ldr	r3, [pc, #124]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24001d62:	4b21      	ldr	r3, [pc, #132]	; (24001de8 <HAL_RCC_OscConfig+0x778>)
24001d64:	4013      	ands	r3, r2
24001d66:	687a      	ldr	r2, [r7, #4]
24001d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
24001d6a:	00d2      	lsls	r2, r2, #3
24001d6c:	491b      	ldr	r1, [pc, #108]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d6e:	4313      	orrs	r3, r2
24001d70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24001d72:	4b1a      	ldr	r3, [pc, #104]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d76:	f023 020c 	bic.w	r2, r3, #12
24001d7a:	687b      	ldr	r3, [r7, #4]
24001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24001d7e:	4917      	ldr	r1, [pc, #92]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d80:	4313      	orrs	r3, r2
24001d82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24001d84:	4b15      	ldr	r3, [pc, #84]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d88:	f023 0202 	bic.w	r2, r3, #2
24001d8c:	687b      	ldr	r3, [r7, #4]
24001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001d90:	4912      	ldr	r1, [pc, #72]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d92:	4313      	orrs	r3, r2
24001d94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24001d96:	4b11      	ldr	r3, [pc, #68]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d9a:	4a10      	ldr	r2, [pc, #64]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24001da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24001da2:	4b0e      	ldr	r3, [pc, #56]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001da6:	4a0d      	ldr	r2, [pc, #52]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24001dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24001dae:	4b0b      	ldr	r3, [pc, #44]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001db2:	4a0a      	ldr	r2, [pc, #40]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24001db8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
24001dba:	4b08      	ldr	r3, [pc, #32]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001dbe:	4a07      	ldr	r2, [pc, #28]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001dc0:	f043 0301 	orr.w	r3, r3, #1
24001dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
24001dc6:	4b05      	ldr	r3, [pc, #20]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001dc8:	681b      	ldr	r3, [r3, #0]
24001dca:	4a04      	ldr	r2, [pc, #16]	; (24001ddc <HAL_RCC_OscConfig+0x76c>)
24001dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001dd2:	f7fe ff47 	bl	24000c64 <HAL_GetTick>
24001dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24001dd8:	e011      	b.n	24001dfe <HAL_RCC_OscConfig+0x78e>
24001dda:	bf00      	nop
24001ddc:	58024400 	.word	0x58024400
24001de0:	58024800 	.word	0x58024800
24001de4:	fffffc0c 	.word	0xfffffc0c
24001de8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24001dec:	f7fe ff3a 	bl	24000c64 <HAL_GetTick>
24001df0:	4602      	mov	r2, r0
24001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001df4:	1ad3      	subs	r3, r2, r3
24001df6:	2b02      	cmp	r3, #2
24001df8:	d901      	bls.n	24001dfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
24001dfa:	2303      	movs	r3, #3
24001dfc:	e08a      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24001dfe:	4b47      	ldr	r3, [pc, #284]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e00:	681b      	ldr	r3, [r3, #0]
24001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24001e06:	2b00      	cmp	r3, #0
24001e08:	d0f0      	beq.n	24001dec <HAL_RCC_OscConfig+0x77c>
24001e0a:	e082      	b.n	24001f12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24001e0c:	4b43      	ldr	r3, [pc, #268]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e0e:	681b      	ldr	r3, [r3, #0]
24001e10:	4a42      	ldr	r2, [pc, #264]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24001e18:	f7fe ff24 	bl	24000c64 <HAL_GetTick>
24001e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24001e1e:	e008      	b.n	24001e32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24001e20:	f7fe ff20 	bl	24000c64 <HAL_GetTick>
24001e24:	4602      	mov	r2, r0
24001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001e28:	1ad3      	subs	r3, r2, r3
24001e2a:	2b02      	cmp	r3, #2
24001e2c:	d901      	bls.n	24001e32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
24001e2e:	2303      	movs	r3, #3
24001e30:	e070      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24001e32:	4b3a      	ldr	r3, [pc, #232]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e34:	681b      	ldr	r3, [r3, #0]
24001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24001e3a:	2b00      	cmp	r3, #0
24001e3c:	d1f0      	bne.n	24001e20 <HAL_RCC_OscConfig+0x7b0>
24001e3e:	e068      	b.n	24001f12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
24001e40:	4b36      	ldr	r3, [pc, #216]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001e44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
24001e46:	4b35      	ldr	r3, [pc, #212]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24001e4c:	687b      	ldr	r3, [r7, #4]
24001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001e50:	2b01      	cmp	r3, #1
24001e52:	d031      	beq.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24001e54:	693b      	ldr	r3, [r7, #16]
24001e56:	f003 0203 	and.w	r2, r3, #3
24001e5a:	687b      	ldr	r3, [r7, #4]
24001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24001e5e:	429a      	cmp	r2, r3
24001e60:	d12a      	bne.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24001e62:	693b      	ldr	r3, [r7, #16]
24001e64:	091b      	lsrs	r3, r3, #4
24001e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24001e6a:	687b      	ldr	r3, [r7, #4]
24001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24001e6e:	429a      	cmp	r2, r3
24001e70:	d122      	bne.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24001e72:	68fb      	ldr	r3, [r7, #12]
24001e74:	f3c3 0208 	ubfx	r2, r3, #0, #9
24001e78:	687b      	ldr	r3, [r7, #4]
24001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24001e7e:	429a      	cmp	r2, r3
24001e80:	d11a      	bne.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24001e82:	68fb      	ldr	r3, [r7, #12]
24001e84:	0a5b      	lsrs	r3, r3, #9
24001e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24001e8a:	687b      	ldr	r3, [r7, #4]
24001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001e8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24001e90:	429a      	cmp	r2, r3
24001e92:	d111      	bne.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24001e94:	68fb      	ldr	r3, [r7, #12]
24001e96:	0c1b      	lsrs	r3, r3, #16
24001e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24001e9c:	687b      	ldr	r3, [r7, #4]
24001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24001ea0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24001ea2:	429a      	cmp	r2, r3
24001ea4:	d108      	bne.n	24001eb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24001ea6:	68fb      	ldr	r3, [r7, #12]
24001ea8:	0e1b      	lsrs	r3, r3, #24
24001eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24001eae:	687b      	ldr	r3, [r7, #4]
24001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24001eb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24001eb4:	429a      	cmp	r2, r3
24001eb6:	d001      	beq.n	24001ebc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
24001eb8:	2301      	movs	r3, #1
24001eba:	e02b      	b.n	24001f14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24001ebc:	4b17      	ldr	r3, [pc, #92]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001ec0:	08db      	lsrs	r3, r3, #3
24001ec2:	f3c3 030c 	ubfx	r3, r3, #0, #13
24001ec6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24001ec8:	687b      	ldr	r3, [r7, #4]
24001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24001ecc:	693a      	ldr	r2, [r7, #16]
24001ece:	429a      	cmp	r2, r3
24001ed0:	d01f      	beq.n	24001f12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
24001ed2:	4b12      	ldr	r3, [pc, #72]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001ed6:	4a11      	ldr	r2, [pc, #68]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001ed8:	f023 0301 	bic.w	r3, r3, #1
24001edc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
24001ede:	f7fe fec1 	bl	24000c64 <HAL_GetTick>
24001ee2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24001ee4:	bf00      	nop
24001ee6:	f7fe febd 	bl	24000c64 <HAL_GetTick>
24001eea:	4602      	mov	r2, r0
24001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001eee:	4293      	cmp	r3, r2
24001ef0:	d0f9      	beq.n	24001ee6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24001ef2:	4b0a      	ldr	r3, [pc, #40]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24001ef6:	4b0a      	ldr	r3, [pc, #40]	; (24001f20 <HAL_RCC_OscConfig+0x8b0>)
24001ef8:	4013      	ands	r3, r2
24001efa:	687a      	ldr	r2, [r7, #4]
24001efc:	6c92      	ldr	r2, [r2, #72]	; 0x48
24001efe:	00d2      	lsls	r2, r2, #3
24001f00:	4906      	ldr	r1, [pc, #24]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001f02:	4313      	orrs	r3, r2
24001f04:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
24001f06:	4b05      	ldr	r3, [pc, #20]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001f0a:	4a04      	ldr	r2, [pc, #16]	; (24001f1c <HAL_RCC_OscConfig+0x8ac>)
24001f0c:	f043 0301 	orr.w	r3, r3, #1
24001f10:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
24001f12:	2300      	movs	r3, #0
}
24001f14:	4618      	mov	r0, r3
24001f16:	3730      	adds	r7, #48	; 0x30
24001f18:	46bd      	mov	sp, r7
24001f1a:	bd80      	pop	{r7, pc}
24001f1c:	58024400 	.word	0x58024400
24001f20:	ffff0007 	.word	0xffff0007

24001f24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
24001f24:	b580      	push	{r7, lr}
24001f26:	b086      	sub	sp, #24
24001f28:	af00      	add	r7, sp, #0
24001f2a:	6078      	str	r0, [r7, #4]
24001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
24001f2e:	687b      	ldr	r3, [r7, #4]
24001f30:	2b00      	cmp	r3, #0
24001f32:	d101      	bne.n	24001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
24001f34:	2301      	movs	r3, #1
24001f36:	e19c      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24001f38:	4b8a      	ldr	r3, [pc, #552]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24001f3a:	681b      	ldr	r3, [r3, #0]
24001f3c:	f003 030f 	and.w	r3, r3, #15
24001f40:	683a      	ldr	r2, [r7, #0]
24001f42:	429a      	cmp	r2, r3
24001f44:	d910      	bls.n	24001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24001f46:	4b87      	ldr	r3, [pc, #540]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24001f48:	681b      	ldr	r3, [r3, #0]
24001f4a:	f023 020f 	bic.w	r2, r3, #15
24001f4e:	4985      	ldr	r1, [pc, #532]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24001f50:	683b      	ldr	r3, [r7, #0]
24001f52:	4313      	orrs	r3, r2
24001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24001f56:	4b83      	ldr	r3, [pc, #524]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24001f58:	681b      	ldr	r3, [r3, #0]
24001f5a:	f003 030f 	and.w	r3, r3, #15
24001f5e:	683a      	ldr	r2, [r7, #0]
24001f60:	429a      	cmp	r2, r3
24001f62:	d001      	beq.n	24001f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
24001f64:	2301      	movs	r3, #1
24001f66:	e184      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24001f68:	687b      	ldr	r3, [r7, #4]
24001f6a:	681b      	ldr	r3, [r3, #0]
24001f6c:	f003 0304 	and.w	r3, r3, #4
24001f70:	2b00      	cmp	r3, #0
24001f72:	d010      	beq.n	24001f96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24001f74:	687b      	ldr	r3, [r7, #4]
24001f76:	691a      	ldr	r2, [r3, #16]
24001f78:	4b7b      	ldr	r3, [pc, #492]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001f7a:	699b      	ldr	r3, [r3, #24]
24001f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
24001f80:	429a      	cmp	r2, r3
24001f82:	d908      	bls.n	24001f96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24001f84:	4b78      	ldr	r3, [pc, #480]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001f86:	699b      	ldr	r3, [r3, #24]
24001f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24001f8c:	687b      	ldr	r3, [r7, #4]
24001f8e:	691b      	ldr	r3, [r3, #16]
24001f90:	4975      	ldr	r1, [pc, #468]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001f92:	4313      	orrs	r3, r2
24001f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24001f96:	687b      	ldr	r3, [r7, #4]
24001f98:	681b      	ldr	r3, [r3, #0]
24001f9a:	f003 0308 	and.w	r3, r3, #8
24001f9e:	2b00      	cmp	r3, #0
24001fa0:	d010      	beq.n	24001fc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24001fa2:	687b      	ldr	r3, [r7, #4]
24001fa4:	695a      	ldr	r2, [r3, #20]
24001fa6:	4b70      	ldr	r3, [pc, #448]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fa8:	69db      	ldr	r3, [r3, #28]
24001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
24001fae:	429a      	cmp	r2, r3
24001fb0:	d908      	bls.n	24001fc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24001fb2:	4b6d      	ldr	r3, [pc, #436]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fb4:	69db      	ldr	r3, [r3, #28]
24001fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24001fba:	687b      	ldr	r3, [r7, #4]
24001fbc:	695b      	ldr	r3, [r3, #20]
24001fbe:	496a      	ldr	r1, [pc, #424]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fc0:	4313      	orrs	r3, r2
24001fc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24001fc4:	687b      	ldr	r3, [r7, #4]
24001fc6:	681b      	ldr	r3, [r3, #0]
24001fc8:	f003 0310 	and.w	r3, r3, #16
24001fcc:	2b00      	cmp	r3, #0
24001fce:	d010      	beq.n	24001ff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24001fd0:	687b      	ldr	r3, [r7, #4]
24001fd2:	699a      	ldr	r2, [r3, #24]
24001fd4:	4b64      	ldr	r3, [pc, #400]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fd6:	69db      	ldr	r3, [r3, #28]
24001fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24001fdc:	429a      	cmp	r2, r3
24001fde:	d908      	bls.n	24001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24001fe0:	4b61      	ldr	r3, [pc, #388]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fe2:	69db      	ldr	r3, [r3, #28]
24001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24001fe8:	687b      	ldr	r3, [r7, #4]
24001fea:	699b      	ldr	r3, [r3, #24]
24001fec:	495e      	ldr	r1, [pc, #376]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24001fee:	4313      	orrs	r3, r2
24001ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24001ff2:	687b      	ldr	r3, [r7, #4]
24001ff4:	681b      	ldr	r3, [r3, #0]
24001ff6:	f003 0320 	and.w	r3, r3, #32
24001ffa:	2b00      	cmp	r3, #0
24001ffc:	d010      	beq.n	24002020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24001ffe:	687b      	ldr	r3, [r7, #4]
24002000:	69da      	ldr	r2, [r3, #28]
24002002:	4b59      	ldr	r3, [pc, #356]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002004:	6a1b      	ldr	r3, [r3, #32]
24002006:	f003 0370 	and.w	r3, r3, #112	; 0x70
2400200a:	429a      	cmp	r2, r3
2400200c:	d908      	bls.n	24002020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2400200e:	4b56      	ldr	r3, [pc, #344]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002010:	6a1b      	ldr	r3, [r3, #32]
24002012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002016:	687b      	ldr	r3, [r7, #4]
24002018:	69db      	ldr	r3, [r3, #28]
2400201a:	4953      	ldr	r1, [pc, #332]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
2400201c:	4313      	orrs	r3, r2
2400201e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24002020:	687b      	ldr	r3, [r7, #4]
24002022:	681b      	ldr	r3, [r3, #0]
24002024:	f003 0302 	and.w	r3, r3, #2
24002028:	2b00      	cmp	r3, #0
2400202a:	d010      	beq.n	2400204e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400202c:	687b      	ldr	r3, [r7, #4]
2400202e:	68da      	ldr	r2, [r3, #12]
24002030:	4b4d      	ldr	r3, [pc, #308]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002032:	699b      	ldr	r3, [r3, #24]
24002034:	f003 030f 	and.w	r3, r3, #15
24002038:	429a      	cmp	r2, r3
2400203a:	d908      	bls.n	2400204e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400203c:	4b4a      	ldr	r3, [pc, #296]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
2400203e:	699b      	ldr	r3, [r3, #24]
24002040:	f023 020f 	bic.w	r2, r3, #15
24002044:	687b      	ldr	r3, [r7, #4]
24002046:	68db      	ldr	r3, [r3, #12]
24002048:	4947      	ldr	r1, [pc, #284]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
2400204a:	4313      	orrs	r3, r2
2400204c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400204e:	687b      	ldr	r3, [r7, #4]
24002050:	681b      	ldr	r3, [r3, #0]
24002052:	f003 0301 	and.w	r3, r3, #1
24002056:	2b00      	cmp	r3, #0
24002058:	d055      	beq.n	24002106 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
2400205a:	4b43      	ldr	r3, [pc, #268]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
2400205c:	699b      	ldr	r3, [r3, #24]
2400205e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
24002062:	687b      	ldr	r3, [r7, #4]
24002064:	689b      	ldr	r3, [r3, #8]
24002066:	4940      	ldr	r1, [pc, #256]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002068:	4313      	orrs	r3, r2
2400206a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2400206c:	687b      	ldr	r3, [r7, #4]
2400206e:	685b      	ldr	r3, [r3, #4]
24002070:	2b02      	cmp	r3, #2
24002072:	d107      	bne.n	24002084 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24002074:	4b3c      	ldr	r3, [pc, #240]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002076:	681b      	ldr	r3, [r3, #0]
24002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400207c:	2b00      	cmp	r3, #0
2400207e:	d121      	bne.n	240020c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24002080:	2301      	movs	r3, #1
24002082:	e0f6      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24002084:	687b      	ldr	r3, [r7, #4]
24002086:	685b      	ldr	r3, [r3, #4]
24002088:	2b03      	cmp	r3, #3
2400208a:	d107      	bne.n	2400209c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400208c:	4b36      	ldr	r3, [pc, #216]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
2400208e:	681b      	ldr	r3, [r3, #0]
24002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24002094:	2b00      	cmp	r3, #0
24002096:	d115      	bne.n	240020c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24002098:	2301      	movs	r3, #1
2400209a:	e0ea      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2400209c:	687b      	ldr	r3, [r7, #4]
2400209e:	685b      	ldr	r3, [r3, #4]
240020a0:	2b01      	cmp	r3, #1
240020a2:	d107      	bne.n	240020b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240020a4:	4b30      	ldr	r3, [pc, #192]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
240020a6:	681b      	ldr	r3, [r3, #0]
240020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
240020ac:	2b00      	cmp	r3, #0
240020ae:	d109      	bne.n	240020c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240020b0:	2301      	movs	r3, #1
240020b2:	e0de      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240020b4:	4b2c      	ldr	r3, [pc, #176]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
240020b6:	681b      	ldr	r3, [r3, #0]
240020b8:	f003 0304 	and.w	r3, r3, #4
240020bc:	2b00      	cmp	r3, #0
240020be:	d101      	bne.n	240020c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240020c0:	2301      	movs	r3, #1
240020c2:	e0d6      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240020c4:	4b28      	ldr	r3, [pc, #160]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
240020c6:	691b      	ldr	r3, [r3, #16]
240020c8:	f023 0207 	bic.w	r2, r3, #7
240020cc:	687b      	ldr	r3, [r7, #4]
240020ce:	685b      	ldr	r3, [r3, #4]
240020d0:	4925      	ldr	r1, [pc, #148]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
240020d2:	4313      	orrs	r3, r2
240020d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240020d6:	f7fe fdc5 	bl	24000c64 <HAL_GetTick>
240020da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240020dc:	e00a      	b.n	240020f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240020de:	f7fe fdc1 	bl	24000c64 <HAL_GetTick>
240020e2:	4602      	mov	r2, r0
240020e4:	697b      	ldr	r3, [r7, #20]
240020e6:	1ad3      	subs	r3, r2, r3
240020e8:	f241 3288 	movw	r2, #5000	; 0x1388
240020ec:	4293      	cmp	r3, r2
240020ee:	d901      	bls.n	240020f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
240020f0:	2303      	movs	r3, #3
240020f2:	e0be      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240020f4:	4b1c      	ldr	r3, [pc, #112]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
240020f6:	691b      	ldr	r3, [r3, #16]
240020f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
240020fc:	687b      	ldr	r3, [r7, #4]
240020fe:	685b      	ldr	r3, [r3, #4]
24002100:	00db      	lsls	r3, r3, #3
24002102:	429a      	cmp	r2, r3
24002104:	d1eb      	bne.n	240020de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24002106:	687b      	ldr	r3, [r7, #4]
24002108:	681b      	ldr	r3, [r3, #0]
2400210a:	f003 0302 	and.w	r3, r3, #2
2400210e:	2b00      	cmp	r3, #0
24002110:	d010      	beq.n	24002134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24002112:	687b      	ldr	r3, [r7, #4]
24002114:	68da      	ldr	r2, [r3, #12]
24002116:	4b14      	ldr	r3, [pc, #80]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002118:	699b      	ldr	r3, [r3, #24]
2400211a:	f003 030f 	and.w	r3, r3, #15
2400211e:	429a      	cmp	r2, r3
24002120:	d208      	bcs.n	24002134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24002122:	4b11      	ldr	r3, [pc, #68]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002124:	699b      	ldr	r3, [r3, #24]
24002126:	f023 020f 	bic.w	r2, r3, #15
2400212a:	687b      	ldr	r3, [r7, #4]
2400212c:	68db      	ldr	r3, [r3, #12]
2400212e:	490e      	ldr	r1, [pc, #56]	; (24002168 <HAL_RCC_ClockConfig+0x244>)
24002130:	4313      	orrs	r3, r2
24002132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24002134:	4b0b      	ldr	r3, [pc, #44]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24002136:	681b      	ldr	r3, [r3, #0]
24002138:	f003 030f 	and.w	r3, r3, #15
2400213c:	683a      	ldr	r2, [r7, #0]
2400213e:	429a      	cmp	r2, r3
24002140:	d214      	bcs.n	2400216c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24002142:	4b08      	ldr	r3, [pc, #32]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24002144:	681b      	ldr	r3, [r3, #0]
24002146:	f023 020f 	bic.w	r2, r3, #15
2400214a:	4906      	ldr	r1, [pc, #24]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
2400214c:	683b      	ldr	r3, [r7, #0]
2400214e:	4313      	orrs	r3, r2
24002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24002152:	4b04      	ldr	r3, [pc, #16]	; (24002164 <HAL_RCC_ClockConfig+0x240>)
24002154:	681b      	ldr	r3, [r3, #0]
24002156:	f003 030f 	and.w	r3, r3, #15
2400215a:	683a      	ldr	r2, [r7, #0]
2400215c:	429a      	cmp	r2, r3
2400215e:	d005      	beq.n	2400216c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24002160:	2301      	movs	r3, #1
24002162:	e086      	b.n	24002272 <HAL_RCC_ClockConfig+0x34e>
24002164:	52002000 	.word	0x52002000
24002168:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2400216c:	687b      	ldr	r3, [r7, #4]
2400216e:	681b      	ldr	r3, [r3, #0]
24002170:	f003 0304 	and.w	r3, r3, #4
24002174:	2b00      	cmp	r3, #0
24002176:	d010      	beq.n	2400219a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24002178:	687b      	ldr	r3, [r7, #4]
2400217a:	691a      	ldr	r2, [r3, #16]
2400217c:	4b3f      	ldr	r3, [pc, #252]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
2400217e:	699b      	ldr	r3, [r3, #24]
24002180:	f003 0370 	and.w	r3, r3, #112	; 0x70
24002184:	429a      	cmp	r2, r3
24002186:	d208      	bcs.n	2400219a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24002188:	4b3c      	ldr	r3, [pc, #240]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
2400218a:	699b      	ldr	r3, [r3, #24]
2400218c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002190:	687b      	ldr	r3, [r7, #4]
24002192:	691b      	ldr	r3, [r3, #16]
24002194:	4939      	ldr	r1, [pc, #228]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
24002196:	4313      	orrs	r3, r2
24002198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400219a:	687b      	ldr	r3, [r7, #4]
2400219c:	681b      	ldr	r3, [r3, #0]
2400219e:	f003 0308 	and.w	r3, r3, #8
240021a2:	2b00      	cmp	r3, #0
240021a4:	d010      	beq.n	240021c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240021a6:	687b      	ldr	r3, [r7, #4]
240021a8:	695a      	ldr	r2, [r3, #20]
240021aa:	4b34      	ldr	r3, [pc, #208]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021ac:	69db      	ldr	r3, [r3, #28]
240021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
240021b2:	429a      	cmp	r2, r3
240021b4:	d208      	bcs.n	240021c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240021b6:	4b31      	ldr	r3, [pc, #196]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021b8:	69db      	ldr	r3, [r3, #28]
240021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240021be:	687b      	ldr	r3, [r7, #4]
240021c0:	695b      	ldr	r3, [r3, #20]
240021c2:	492e      	ldr	r1, [pc, #184]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021c4:	4313      	orrs	r3, r2
240021c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240021c8:	687b      	ldr	r3, [r7, #4]
240021ca:	681b      	ldr	r3, [r3, #0]
240021cc:	f003 0310 	and.w	r3, r3, #16
240021d0:	2b00      	cmp	r3, #0
240021d2:	d010      	beq.n	240021f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240021d4:	687b      	ldr	r3, [r7, #4]
240021d6:	699a      	ldr	r2, [r3, #24]
240021d8:	4b28      	ldr	r3, [pc, #160]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021da:	69db      	ldr	r3, [r3, #28]
240021dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
240021e0:	429a      	cmp	r2, r3
240021e2:	d208      	bcs.n	240021f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240021e4:	4b25      	ldr	r3, [pc, #148]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021e6:	69db      	ldr	r3, [r3, #28]
240021e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240021ec:	687b      	ldr	r3, [r7, #4]
240021ee:	699b      	ldr	r3, [r3, #24]
240021f0:	4922      	ldr	r1, [pc, #136]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
240021f2:	4313      	orrs	r3, r2
240021f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240021f6:	687b      	ldr	r3, [r7, #4]
240021f8:	681b      	ldr	r3, [r3, #0]
240021fa:	f003 0320 	and.w	r3, r3, #32
240021fe:	2b00      	cmp	r3, #0
24002200:	d010      	beq.n	24002224 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24002202:	687b      	ldr	r3, [r7, #4]
24002204:	69da      	ldr	r2, [r3, #28]
24002206:	4b1d      	ldr	r3, [pc, #116]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
24002208:	6a1b      	ldr	r3, [r3, #32]
2400220a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2400220e:	429a      	cmp	r2, r3
24002210:	d208      	bcs.n	24002224 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24002212:	4b1a      	ldr	r3, [pc, #104]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
24002214:	6a1b      	ldr	r3, [r3, #32]
24002216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2400221a:	687b      	ldr	r3, [r7, #4]
2400221c:	69db      	ldr	r3, [r3, #28]
2400221e:	4917      	ldr	r1, [pc, #92]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
24002220:	4313      	orrs	r3, r2
24002222:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002224:	f000 f834 	bl	24002290 <HAL_RCC_GetSysClockFreq>
24002228:	4602      	mov	r2, r0
2400222a:	4b14      	ldr	r3, [pc, #80]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
2400222c:	699b      	ldr	r3, [r3, #24]
2400222e:	0a1b      	lsrs	r3, r3, #8
24002230:	f003 030f 	and.w	r3, r3, #15
24002234:	4912      	ldr	r1, [pc, #72]	; (24002280 <HAL_RCC_ClockConfig+0x35c>)
24002236:	5ccb      	ldrb	r3, [r1, r3]
24002238:	f003 031f 	and.w	r3, r3, #31
2400223c:	fa22 f303 	lsr.w	r3, r2, r3
24002240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002242:	4b0e      	ldr	r3, [pc, #56]	; (2400227c <HAL_RCC_ClockConfig+0x358>)
24002244:	699b      	ldr	r3, [r3, #24]
24002246:	f003 030f 	and.w	r3, r3, #15
2400224a:	4a0d      	ldr	r2, [pc, #52]	; (24002280 <HAL_RCC_ClockConfig+0x35c>)
2400224c:	5cd3      	ldrb	r3, [r2, r3]
2400224e:	f003 031f 	and.w	r3, r3, #31
24002252:	693a      	ldr	r2, [r7, #16]
24002254:	fa22 f303 	lsr.w	r3, r2, r3
24002258:	4a0a      	ldr	r2, [pc, #40]	; (24002284 <HAL_RCC_ClockConfig+0x360>)
2400225a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400225c:	4a0a      	ldr	r2, [pc, #40]	; (24002288 <HAL_RCC_ClockConfig+0x364>)
2400225e:	693b      	ldr	r3, [r7, #16]
24002260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
24002262:	4b0a      	ldr	r3, [pc, #40]	; (2400228c <HAL_RCC_ClockConfig+0x368>)
24002264:	681b      	ldr	r3, [r3, #0]
24002266:	4618      	mov	r0, r3
24002268:	f7fe fcc6 	bl	24000bf8 <HAL_InitTick>
2400226c:	4603      	mov	r3, r0
2400226e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24002270:	7bfb      	ldrb	r3, [r7, #15]
}
24002272:	4618      	mov	r0, r3
24002274:	3718      	adds	r7, #24
24002276:	46bd      	mov	sp, r7
24002278:	bd80      	pop	{r7, pc}
2400227a:	bf00      	nop
2400227c:	58024400 	.word	0x58024400
24002280:	24002674 	.word	0x24002674
24002284:	2400020c 	.word	0x2400020c
24002288:	24000208 	.word	0x24000208
2400228c:	24000210 	.word	0x24000210

24002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24002290:	b480      	push	{r7}
24002292:	b089      	sub	sp, #36	; 0x24
24002294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24002296:	4bb3      	ldr	r3, [pc, #716]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002298:	691b      	ldr	r3, [r3, #16]
2400229a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400229e:	2b18      	cmp	r3, #24
240022a0:	f200 8155 	bhi.w	2400254e <HAL_RCC_GetSysClockFreq+0x2be>
240022a4:	a201      	add	r2, pc, #4	; (adr r2, 240022ac <HAL_RCC_GetSysClockFreq+0x1c>)
240022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240022aa:	bf00      	nop
240022ac:	24002311 	.word	0x24002311
240022b0:	2400254f 	.word	0x2400254f
240022b4:	2400254f 	.word	0x2400254f
240022b8:	2400254f 	.word	0x2400254f
240022bc:	2400254f 	.word	0x2400254f
240022c0:	2400254f 	.word	0x2400254f
240022c4:	2400254f 	.word	0x2400254f
240022c8:	2400254f 	.word	0x2400254f
240022cc:	24002337 	.word	0x24002337
240022d0:	2400254f 	.word	0x2400254f
240022d4:	2400254f 	.word	0x2400254f
240022d8:	2400254f 	.word	0x2400254f
240022dc:	2400254f 	.word	0x2400254f
240022e0:	2400254f 	.word	0x2400254f
240022e4:	2400254f 	.word	0x2400254f
240022e8:	2400254f 	.word	0x2400254f
240022ec:	2400233d 	.word	0x2400233d
240022f0:	2400254f 	.word	0x2400254f
240022f4:	2400254f 	.word	0x2400254f
240022f8:	2400254f 	.word	0x2400254f
240022fc:	2400254f 	.word	0x2400254f
24002300:	2400254f 	.word	0x2400254f
24002304:	2400254f 	.word	0x2400254f
24002308:	2400254f 	.word	0x2400254f
2400230c:	24002343 	.word	0x24002343
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24002310:	4b94      	ldr	r3, [pc, #592]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002312:	681b      	ldr	r3, [r3, #0]
24002314:	f003 0320 	and.w	r3, r3, #32
24002318:	2b00      	cmp	r3, #0
2400231a:	d009      	beq.n	24002330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400231c:	4b91      	ldr	r3, [pc, #580]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
2400231e:	681b      	ldr	r3, [r3, #0]
24002320:	08db      	lsrs	r3, r3, #3
24002322:	f003 0303 	and.w	r3, r3, #3
24002326:	4a90      	ldr	r2, [pc, #576]	; (24002568 <HAL_RCC_GetSysClockFreq+0x2d8>)
24002328:	fa22 f303 	lsr.w	r3, r2, r3
2400232c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
2400232e:	e111      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24002330:	4b8d      	ldr	r3, [pc, #564]	; (24002568 <HAL_RCC_GetSysClockFreq+0x2d8>)
24002332:	61bb      	str	r3, [r7, #24]
      break;
24002334:	e10e      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
24002336:	4b8d      	ldr	r3, [pc, #564]	; (2400256c <HAL_RCC_GetSysClockFreq+0x2dc>)
24002338:	61bb      	str	r3, [r7, #24]
      break;
2400233a:	e10b      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
2400233c:	4b8c      	ldr	r3, [pc, #560]	; (24002570 <HAL_RCC_GetSysClockFreq+0x2e0>)
2400233e:	61bb      	str	r3, [r7, #24]
      break;
24002340:	e108      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24002342:	4b88      	ldr	r3, [pc, #544]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002346:	f003 0303 	and.w	r3, r3, #3
2400234a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400234c:	4b85      	ldr	r3, [pc, #532]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
2400234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002350:	091b      	lsrs	r3, r3, #4
24002352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24002356:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24002358:	4b82      	ldr	r3, [pc, #520]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
2400235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400235c:	f003 0301 	and.w	r3, r3, #1
24002360:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24002362:	4b80      	ldr	r3, [pc, #512]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002366:	08db      	lsrs	r3, r3, #3
24002368:	f3c3 030c 	ubfx	r3, r3, #0, #13
2400236c:	68fa      	ldr	r2, [r7, #12]
2400236e:	fb02 f303 	mul.w	r3, r2, r3
24002372:	ee07 3a90 	vmov	s15, r3
24002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400237a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2400237e:	693b      	ldr	r3, [r7, #16]
24002380:	2b00      	cmp	r3, #0
24002382:	f000 80e1 	beq.w	24002548 <HAL_RCC_GetSysClockFreq+0x2b8>
24002386:	697b      	ldr	r3, [r7, #20]
24002388:	2b02      	cmp	r3, #2
2400238a:	f000 8083 	beq.w	24002494 <HAL_RCC_GetSysClockFreq+0x204>
2400238e:	697b      	ldr	r3, [r7, #20]
24002390:	2b02      	cmp	r3, #2
24002392:	f200 80a1 	bhi.w	240024d8 <HAL_RCC_GetSysClockFreq+0x248>
24002396:	697b      	ldr	r3, [r7, #20]
24002398:	2b00      	cmp	r3, #0
2400239a:	d003      	beq.n	240023a4 <HAL_RCC_GetSysClockFreq+0x114>
2400239c:	697b      	ldr	r3, [r7, #20]
2400239e:	2b01      	cmp	r3, #1
240023a0:	d056      	beq.n	24002450 <HAL_RCC_GetSysClockFreq+0x1c0>
240023a2:	e099      	b.n	240024d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240023a4:	4b6f      	ldr	r3, [pc, #444]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
240023a6:	681b      	ldr	r3, [r3, #0]
240023a8:	f003 0320 	and.w	r3, r3, #32
240023ac:	2b00      	cmp	r3, #0
240023ae:	d02d      	beq.n	2400240c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240023b0:	4b6c      	ldr	r3, [pc, #432]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
240023b2:	681b      	ldr	r3, [r3, #0]
240023b4:	08db      	lsrs	r3, r3, #3
240023b6:	f003 0303 	and.w	r3, r3, #3
240023ba:	4a6b      	ldr	r2, [pc, #428]	; (24002568 <HAL_RCC_GetSysClockFreq+0x2d8>)
240023bc:	fa22 f303 	lsr.w	r3, r2, r3
240023c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240023c2:	687b      	ldr	r3, [r7, #4]
240023c4:	ee07 3a90 	vmov	s15, r3
240023c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
240023cc:	693b      	ldr	r3, [r7, #16]
240023ce:	ee07 3a90 	vmov	s15, r3
240023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240023d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240023da:	4b62      	ldr	r3, [pc, #392]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
240023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240023de:	f3c3 0308 	ubfx	r3, r3, #0, #9
240023e2:	ee07 3a90 	vmov	s15, r3
240023e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240023ea:	ed97 6a02 	vldr	s12, [r7, #8]
240023ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 24002574 <HAL_RCC_GetSysClockFreq+0x2e4>
240023f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
240023f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
240023fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240023fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002402:	ee67 7a27 	vmul.f32	s15, s14, s15
24002406:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
2400240a:	e087      	b.n	2400251c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400240c:	693b      	ldr	r3, [r7, #16]
2400240e:	ee07 3a90 	vmov	s15, r3
24002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002416:	eddf 6a58 	vldr	s13, [pc, #352]	; 24002578 <HAL_RCC_GetSysClockFreq+0x2e8>
2400241a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400241e:	4b51      	ldr	r3, [pc, #324]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002422:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002426:	ee07 3a90 	vmov	s15, r3
2400242a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400242e:	ed97 6a02 	vldr	s12, [r7, #8]
24002432:	eddf 5a50 	vldr	s11, [pc, #320]	; 24002574 <HAL_RCC_GetSysClockFreq+0x2e4>
24002436:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400243a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400243e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002442:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002446:	ee67 7a27 	vmul.f32	s15, s14, s15
2400244a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2400244e:	e065      	b.n	2400251c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002450:	693b      	ldr	r3, [r7, #16]
24002452:	ee07 3a90 	vmov	s15, r3
24002456:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400245a:	eddf 6a48 	vldr	s13, [pc, #288]	; 2400257c <HAL_RCC_GetSysClockFreq+0x2ec>
2400245e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002462:	4b40      	ldr	r3, [pc, #256]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002466:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400246a:	ee07 3a90 	vmov	s15, r3
2400246e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002472:	ed97 6a02 	vldr	s12, [r7, #8]
24002476:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24002574 <HAL_RCC_GetSysClockFreq+0x2e4>
2400247a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400247e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002486:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400248a:	ee67 7a27 	vmul.f32	s15, s14, s15
2400248e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24002492:	e043      	b.n	2400251c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002494:	693b      	ldr	r3, [r7, #16]
24002496:	ee07 3a90 	vmov	s15, r3
2400249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400249e:	eddf 6a38 	vldr	s13, [pc, #224]	; 24002580 <HAL_RCC_GetSysClockFreq+0x2f0>
240024a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240024a6:	4b2f      	ldr	r3, [pc, #188]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
240024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
240024ae:	ee07 3a90 	vmov	s15, r3
240024b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240024b6:	ed97 6a02 	vldr	s12, [r7, #8]
240024ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24002574 <HAL_RCC_GetSysClockFreq+0x2e4>
240024be:	eec6 7a25 	vdiv.f32	s15, s12, s11
240024c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240024c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240024ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
240024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
240024d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
240024d6:	e021      	b.n	2400251c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240024d8:	693b      	ldr	r3, [r7, #16]
240024da:	ee07 3a90 	vmov	s15, r3
240024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
240024e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 2400257c <HAL_RCC_GetSysClockFreq+0x2ec>
240024e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240024ea:	4b1e      	ldr	r3, [pc, #120]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
240024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
240024f2:	ee07 3a90 	vmov	s15, r3
240024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240024fa:	ed97 6a02 	vldr	s12, [r7, #8]
240024fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24002574 <HAL_RCC_GetSysClockFreq+0x2e4>
24002502:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002512:	ee67 7a27 	vmul.f32	s15, s14, s15
24002516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2400251a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400251c:	4b11      	ldr	r3, [pc, #68]	; (24002564 <HAL_RCC_GetSysClockFreq+0x2d4>)
2400251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002520:	0a5b      	lsrs	r3, r3, #9
24002522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24002526:	3301      	adds	r3, #1
24002528:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400252a:	683b      	ldr	r3, [r7, #0]
2400252c:	ee07 3a90 	vmov	s15, r3
24002530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24002534:	edd7 6a07 	vldr	s13, [r7, #28]
24002538:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400253c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24002540:	ee17 3a90 	vmov	r3, s15
24002544:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
24002546:	e005      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
24002548:	2300      	movs	r3, #0
2400254a:	61bb      	str	r3, [r7, #24]
      break;
2400254c:	e002      	b.n	24002554 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
2400254e:	4b07      	ldr	r3, [pc, #28]	; (2400256c <HAL_RCC_GetSysClockFreq+0x2dc>)
24002550:	61bb      	str	r3, [r7, #24]
      break;
24002552:	bf00      	nop
  }

  return sysclockfreq;
24002554:	69bb      	ldr	r3, [r7, #24]
}
24002556:	4618      	mov	r0, r3
24002558:	3724      	adds	r7, #36	; 0x24
2400255a:	46bd      	mov	sp, r7
2400255c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002560:	4770      	bx	lr
24002562:	bf00      	nop
24002564:	58024400 	.word	0x58024400
24002568:	03d09000 	.word	0x03d09000
2400256c:	003d0900 	.word	0x003d0900
24002570:	017d7840 	.word	0x017d7840
24002574:	46000000 	.word	0x46000000
24002578:	4c742400 	.word	0x4c742400
2400257c:	4a742400 	.word	0x4a742400
24002580:	4bbebc20 	.word	0x4bbebc20

24002584 <memset>:
24002584:	4402      	add	r2, r0
24002586:	4603      	mov	r3, r0
24002588:	4293      	cmp	r3, r2
2400258a:	d100      	bne.n	2400258e <memset+0xa>
2400258c:	4770      	bx	lr
2400258e:	f803 1b01 	strb.w	r1, [r3], #1
24002592:	e7f9      	b.n	24002588 <memset+0x4>

24002594 <_init>:
24002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24002596:	bf00      	nop
24002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
2400259a:	bc08      	pop	{r3}
2400259c:	469e      	mov	lr, r3
2400259e:	4770      	bx	lr

240025a0 <_fini>:
240025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240025a2:	bf00      	nop
240025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
240025a6:	bc08      	pop	{r3}
240025a8:	469e      	mov	lr, r3
240025aa:	4770      	bx	lr
